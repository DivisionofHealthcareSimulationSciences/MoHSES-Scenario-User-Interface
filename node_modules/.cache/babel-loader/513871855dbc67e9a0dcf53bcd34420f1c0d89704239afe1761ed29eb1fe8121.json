{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as d3 from 'd3';\nexport default {\n  data: () => ({\n    chosenFile: null,\n    data: null,\n    columnData: [],\n    array2D: null,\n    allGroup: [],\n    selectPlot: null\n  }),\n  methods: {\n    importFile() {\n      if (this.chosenFile === null) {\n        this.data = \"No File Chosen\";\n      } else {\n        var reader = new FileReader();\n        var file = this.chosenFile[0];\n        // Use the javascript reader object to load the contents\n        // of the file in the v-model prop\n        reader.readAsText(file);\n        reader.onload = () => {\n          this.data = reader.result;\n          const rows = this.data.split('\\n');\n          this.array2D = Array.from({\n            length: rows[0].split(',').length\n          }, () => []);\n          for (let i = 0; i < rows.length; i++) {\n            const columns = rows[i].split(',');\n            for (let j = 0; j < columns.length; j++) {\n              this.array2D[j].push(columns[j]);\n            }\n          }\n          for (let i = 0; i < this.array2D.length; i++) {\n            this.allGroup.push(this.array2D[i][0]);\n            this.array2D[i] = this.array2D[i].slice(1).map(str => parseInt(str));\n          }\n          console.log(this.allGroup);\n          console.log(this.array2D);\n          console.log(this.array2D);\n        };\n      }\n    },\n    mounted: function () {\n      this.drawSVG();\n    },\n    watch: {\n      dataModel(data) {\n        this.drawSVG();\n      }\n    },\n    methods: {\n      drawSVG: function (data1, data2) {\n        var element = document.getElementById(\"visualization\");\n        let localThis = this;\n        if ($(element).children()) {\n          console.log('re-drawing');\n          $(element).empty();\n        }\n        var lineData = this.dataModel;\n        var vis = d3.select(\"#visualization\"),\n          margin = {\n            top: 20,\n            right: 20,\n            bottom: 20,\n            left: 50\n          },\n          width = Math.max($(element).width(), 400) - margin.left - margin.right,\n          height = $(element).height() - margin.top - margin.bottom,\n          xRange = d3.scale.linear().range([margin.left, width - margin.right]).domain([d3.min(lineData, function (d) {\n            return d.x;\n          }), d3.max(lineData, function (d) {\n            return d.x;\n          })]),\n          yRange = d3.scale.linear().range([height - margin.top, margin.bottom]).domain([d3.min(lineData, function (d) {\n            return d.y;\n          }), d3.max(lineData, function (d) {\n            return d.y;\n          })]),\n          xAxis = d3.svg.axis().scale(xRange).tickSize(1).tickSubdivide(true),\n          yAxis = d3.svg.axis().scale(yRange).tickSize(1).orient(\"left\").tickSubdivide(true);\n        vis.append(\"svg:g\").attr(\"class\", \"x axis\").attr(\"transform\", \"translate(0,\" + (height - margin.bottom) + \")\").call(xAxis);\n        vis.append(\"svg:g\").attr(\"class\", \"y axis\").attr(\"transform\", \"translate(\" + margin.left + \",0)\").call(yAxis);\n        var lineFunc = d3.svg.line().x(function (d) {\n          return xRange(d.x);\n        }).y(function (d) {\n          return yRange(d.y);\n        }).interpolate('basis');\n        vis.append(\"svg:path\").attr(\"d\", lineFunc(lineData)).attr(\"stroke\", \"blue\").attr(\"stroke-width\", 2).attr(\"fill\", \"none\");\n      }\n    }\n  },\n  methods: {\n    updateData: function () {\n      this.dataModel = this.dataModel.map(item => {\n        item.x = Math.floor(Math.random() * 60);\n        item.y = Math.floor(Math.random() * 60);\n        return item;\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["d3","data","chosenFile","columnData","array2D","allGroup","selectPlot","methods","importFile","reader","FileReader","file","readAsText","onload","result","rows","split","Array","from","length","i","columns","j","push","slice","map","str","parseInt","console","log","mounted","drawSVG","watch","dataModel","data1","data2","element","document","getElementById","localThis","$","children","empty","lineData","vis","select","margin","top","right","bottom","left","width","Math","max","height","xRange","scale","linear","range","domain","min","d","x","yRange","y","xAxis","svg","axis","tickSize","tickSubdivide","yAxis","orient","append","attr","call","lineFunc","line","interpolate","updateData","item","floor","random"],"sourceRoot":"","sources":["/Users/stlp/Desktop/Spring 2023/BIOEN 405/User Interface/MoHSES-Scenario-User-Interface/src/views/PlottingView.vue"],"sourcesContent":["<template>\n    <v-toolbar style=\"color: white\" color=\"#4b0082\">\n      <v-toolbar-title>BioGears Plotting Tool</v-toolbar-title>\n    </v-toolbar>\n    <v-main class=\"bg-grey-lighten-3\">\n      <v-container>\n        <v-card class=\"mt-n12\">\n          <v-card-text>\n            <p style=\"font-size: 20px\">Please upload your .CSV:</p>\n            <br>\n            <v-file-input v-model=\"chosenFile\"></v-file-input>\n            <v-spacer></v-spacer>\n\n            <v-btn @click=\"importFile\">Import File</v-btn>\n            \n\n    \n            <br>\n            <br>\n \n            <v-row v-if=\"array2D\">\n            \n                <v-col cols=\"2\">\n                    <v-btn @click=\"drawSVG\">Plot Chart</v-btn>\n                </v-col>\n                <v-col cols=\"10\">\n                    <v-select @change=\"updateData(array2D[0], array2D[allGroup.indexOf(selectPlot)])\" v-model=\"selectPlot\" id=\"selectButton\" :items=\"allGroup.slice(1)\"></v-select>\n                </v-col>\n                \n            </v-row>\n        </v-card-text>\n        \n        <div ref=\"chart\"></div>\n        </v-card>\n      </v-container>\n    </v-main>\n  </template>\n  \n<script>\nimport * as d3 from 'd3';\n\nexport default {\n      data: () => ({\n        chosenFile: null,\n        data: null,\n        columnData:[],\n        array2D: null,\n        allGroup: [],\n        selectPlot: null,\n      }),\n      methods: {\n        importFile() {\n      \n      if (this.chosenFile === null) {\n        this.data = \"No File Chosen\"\n      } else {\n        var reader = new FileReader();\n        var file = this.chosenFile[0]\n        // Use the javascript reader object to load the contents\n        // of the file in the v-model prop\n        reader.readAsText(file);\n        reader.onload = () => {\n        this.data = reader.result;\n        const rows = this.data.split('\\n')\n        this.array2D = Array.from({ length: rows[0].split(',').length }, () => []);\n        for (let i=0; i<rows.length;i++) {\n            const columns = rows[i].split(',');\n            for (let j =0; j<columns.length;j++) {\n                this.array2D[j].push(columns[j]);\n            }\n            \n        }\n        for (let i=0; i<this.array2D.length;i++) {\n        this.allGroup.push(this.array2D[i][0])\n        this.array2D[i] = this.array2D[i].slice(1).map(str => parseInt(str));\n    }\n    console.log(this.allGroup)\n    console.log(this.array2D)\n        console.log(this.array2D)\n      }\n    }\n},\n\n   mounted: function() {\n     this.drawSVG()\n   },\n   watch: {\n     dataModel(data){\n       this.drawSVG()\n     },\n   },\n   methods: {\n     drawSVG: function(data1, data2){\n       var element = document.getElementById(\"visualization\");\n\t\t\tlet localThis = this;\n\t\t\tif ($(element).children()) {\n\t\t\t\tconsole.log('re-drawing');\n\t\t\t\t$(element).empty();\n\t\t\t}\n\t\t\tvar lineData = this.dataModel; \n\t\t\tvar vis = d3.select(\"#visualization\"),\n\t\t\t    margin = {\n\t\t\t      top: 20,\n\t\t\t      right: 20,\n\t\t\t      bottom: 20,\n\t\t\t      left: 50\n\t\t\t    },\n\t\t\t    width = Math.max($(element).width(), 400) - margin.left - margin.right,\n\t\t\t\theight = $(element).height() - margin.top - margin.bottom,\n\t\t\t    xRange = d3.scale.linear().range([margin.left, width - margin.right]).domain([d3.min(lineData, function (d) {\n\t\t\t        return d.x;\n\t\t\t      }),\n\t\t\t      d3.max(lineData, function (d) {\n\t\t\t        return d.x;\n\t\t\t      })\n\t\t\t    ]),\n\n\t\t\t    yRange = d3.scale.linear().range([height - margin.top, margin.bottom]).domain([d3.min(lineData, function (d) {\n\t\t\t        return d.y;\n\t\t\t      }),\n\t\t\t      d3.max(lineData, function (d) {\n\t\t\t        return d.y;\n\t\t\t      })\n\t\t\t    ]),\n\n\t\t\t    xAxis = d3.svg.axis()\n\t\t\t      .scale(xRange)\n\t\t\t      .tickSize(1)\n\t\t\t      .tickSubdivide(true),\n\n\t\t\t    yAxis = d3.svg.axis()\n\t\t\t      .scale(yRange)\n\t\t\t      .tickSize(1)\n\t\t\t      .orient(\"left\")\n\t\t\t      .tickSubdivide(true);\n\n\t\t\t  vis.append(\"svg:g\")\n\t\t\t    .attr(\"class\", \"x axis\")\n\t\t\t    .attr(\"transform\", \"translate(0,\" + (height - margin.bottom) + \")\")\n\t\t\t    .call(xAxis);\n\n\t\t\t  vis.append(\"svg:g\")\n\t\t\t    .attr(\"class\", \"y axis\")\n\t\t\t    .attr(\"transform\", \"translate(\" + (margin.left) + \",0)\")\n\t\t\t    .call(yAxis);\n\n\t\t\t  var lineFunc = d3.svg.line()\n\t\t\t  .x(function (d) {\n\t\t\t    return xRange(d.x);\n\t\t\t  })\n\t\t\t  .y(function (d) {\n\t\t\t    return yRange(d.y);\n\t\t\t  })\n\t\t\t  .interpolate('basis');\n\n\t\t\tvis.append(\"svg:path\")\n\t\t\t  .attr(\"d\", lineFunc(lineData))\n\t\t\t  .attr(\"stroke\", \"blue\")\n\t\t\t  .attr(\"stroke-width\", 2)\n\t\t\t  .attr(\"fill\", \"none\");\n     }\n   }\n  \n},\n\n\n\n  methods: {\n    updateData: function(){\n      this.dataModel = this.dataModel.map(item=>{\n        item.x = Math.floor(Math.random() * 60);\n        item.y = Math.floor(Math.random() * 60);\n        return item\n      })\n    }\n  }\n}\n\n</script>\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}