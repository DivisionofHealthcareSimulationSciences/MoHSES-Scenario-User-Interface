{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as d3 from 'd3';\nexport default {\n  data: () => ({\n    chosenFile: null,\n    data: null,\n    columnData: [],\n    array2D: null,\n    allGroup: [],\n    selectPlot: null,\n    x: null,\n    svg: null,\n    y: null,\n    height: null,\n    xAxis: null,\n    yAxis: null\n  }),\n  methods: {\n    importFile() {\n      if (this.chosenFile === null) {\n        this.data = \"No File Chosen\";\n      } else {\n        var reader = new FileReader();\n        var file = this.chosenFile[0];\n        // Use the javascript reader object to load the contents\n        // of the file in the v-model prop\n        reader.readAsText(file);\n        reader.onload = () => {\n          this.data = reader.result;\n          const rows = this.data.split('\\n');\n          this.array2D = Array.from({\n            length: rows[0].split(',').length\n          }, () => []);\n          for (let i = 0; i < rows.length; i++) {\n            const columns = rows[i].split(',');\n            for (let j = 0; j < columns.length; j++) {\n              this.array2D[j].push(columns[j]);\n            }\n          }\n          for (let i = 0; i < this.array2D.length; i++) {\n            this.allGroup.push(this.array2D[i][0]);\n            this.array2D[i] = this.array2D[i].slice(1).map(str => parseInt(str));\n          }\n          console.log(this.allGroup);\n          console.log(this.array2D);\n          console.log(this.array2D);\n        };\n      }\n    },\n    // Create a function that takes a dataset as input and update the plot:\n    update(data1, data2) {\n      console.log('running update');\n      // Create the X axis:\n      this.x.domain([0, d3.max(data1)]);\n      this.svg.selectAll(\".myXaxis\").transition().duration(3000).call(this.xAxis);\n\n      // create the Y axis\n      this.y.domain([0, d3.max(data2)]);\n      this.svg.selectAll(\".myYaxis\").transition().duration(3000).call(this.yAxis);\n      const line = d3.line().x((d, i) => data1[i]).y((d, i) => data2[i]);\n\n      // Create the line path\n      this.svg.append('path').datum(data1).attr('d', line).attr('fill', 'none').attr('stroke', 'steelblue').attr('stroke-width', 2);\n\n      // Create the X and Y axes\n      // const xAxis = d3.axisBottom(xScale);\n      // const yAxis = d3.axisLeft(yScale);\n\n      this.svg.append('g').attr('transform', `translate(0, ${this.height})`).call(this.xAxis);\n      this.svg.append('g').call(this.yAxis);\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["d3","data","chosenFile","columnData","array2D","allGroup","selectPlot","x","svg","y","height","xAxis","yAxis","methods","importFile","reader","FileReader","file","readAsText","onload","result","rows","split","Array","from","length","i","columns","j","push","slice","map","str","parseInt","console","log","update","data1","data2","domain","max","selectAll","transition","duration","call","line","d","append","datum","attr"],"sourceRoot":"","sources":["/Users/stlp/Desktop/Spring 2023/BIOEN 405/User Interface/MoHSES-Scenario-User-Interface/src/views/PlottingView.vue"],"sourcesContent":["<template>\n    <v-toolbar style=\"color: white\" color=\"#4b0082\">\n      <v-toolbar-title>BioGears Plotting Tool</v-toolbar-title>\n    </v-toolbar>\n    <v-main class=\"bg-grey-lighten-3\">\n      <v-container>\n        <v-card class=\"mt-n12\">\n          <v-card-text>\n            <p style=\"font-size: 20px\">Please upload your .CSV:</p>\n            <br>\n            <v-file-input v-model=\"chosenFile\"></v-file-input>\n            <v-spacer></v-spacer>\n\n            <v-btn @click=\"importFile\">Import File</v-btn>\n            \n\n    \n            <br>\n            <br>\n \n            <v-row v-if=\"array2D\">\n            \n                <v-col cols=\"2\">\n                    <v-btn @click=\"plotChart\">Plot Chart</v-btn>\n                </v-col>\n                <v-col cols=\"10\">\n                    <v-select @change=\"update(array2D[0], array2D[allGroup.indexOf(selectPlot)])\" v-model=\"selectPlot\" id=\"selectButton\" :items=\"allGroup.slice(1)\"></v-select>\n                </v-col>\n                \n            </v-row>\n        </v-card-text>\n        \n        <div ref=\"chart\"></div>\n        </v-card>\n      </v-container>\n    </v-main>\n  </template>\n  \n<script>\nimport * as d3 from 'd3';\n\nexport default {\n      data: () => ({\n        chosenFile: null,\n        data: null,\n        columnData:[],\n        array2D: null,\n        allGroup: [],\n        selectPlot: null,\n        x: null,\n        svg: null,\n        y: null,\n        height: null,\n        xAxis: null,\n        yAxis: null\n      }),\n      methods: {\n        importFile() {\n      \n      if (this.chosenFile === null) {\n        this.data = \"No File Chosen\"\n      } else {\n        var reader = new FileReader();\n        var file = this.chosenFile[0]\n        // Use the javascript reader object to load the contents\n        // of the file in the v-model prop\n        reader.readAsText(file);\n        reader.onload = () => {\n        this.data = reader.result;\n        const rows = this.data.split('\\n')\n        this.array2D = Array.from({ length: rows[0].split(',').length }, () => []);\n        for (let i=0; i<rows.length;i++) {\n            const columns = rows[i].split(',');\n            for (let j =0; j<columns.length;j++) {\n                this.array2D[j].push(columns[j]);\n            }\n            \n        }\n        for (let i=0; i<this.array2D.length;i++) {\n        this.allGroup.push(this.array2D[i][0])\n        this.array2D[i] = this.array2D[i].slice(1).map(str => parseInt(str));\n    }\n    console.log(this.allGroup)\n    console.log(this.array2D)\n        console.log(this.array2D)\n      }\n    }\n},\n\n\n\n  // Create a function that takes a dataset as input and update the plot:\nupdate (data1, data2) {\nconsole.log('running update')\n// Create the X axis:\nthis.x.domain([0, d3.max(data1) ]);\nthis.svg.selectAll(\".myXaxis\").transition()\n  .duration(3000)\n  .call(this.xAxis);\n\n// create the Y axis\nthis.y.domain([0, d3.max(data2) ]);\nthis.svg.selectAll(\".myYaxis\")\n  .transition()\n  .duration(3000)\n  .call(this.yAxis);\n\n\n  const line = d3.line()\n      .x((d, i) => (data1[i]))\n      .y((d, i) => (data2[i]));\n\n    // Create the line path\n    this.svg.append('path')\n      .datum(data1)\n      .attr('d', line)\n      .attr('fill', 'none')\n      .attr('stroke', 'steelblue')\n      .attr('stroke-width', 2);\n\n    // Create the X and Y axes\n    // const xAxis = d3.axisBottom(xScale);\n    // const yAxis = d3.axisLeft(yScale);\n\n    this.svg.append('g')\n      .attr('transform', `translate(0, ${this.height})`)\n      .call(this.xAxis);\n\n    this.svg.append('g')\n      .call(this.yAxis);\n\n\n\n}\n\n  }\n,\n\n\n\n}\n\n</script>\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}