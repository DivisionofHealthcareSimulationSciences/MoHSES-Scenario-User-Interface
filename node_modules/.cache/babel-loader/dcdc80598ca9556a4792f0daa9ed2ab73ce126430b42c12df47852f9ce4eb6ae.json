{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { vgField } from '../../channeldef';\nimport { getTimeUnitParts, normalizeTimeUnit } from '../../timeunit';\nimport { duplicate, entries, hash, isEmpty, replacePathInField, vals } from '../../util';\nimport { DataFlowNode } from './dataflow';\nexport class TimeUnitNode extends DataFlowNode {\n  clone() {\n    return new TimeUnitNode(null, duplicate(this.formula));\n  }\n  constructor(parent, formula) {\n    super(parent);\n    this.formula = formula;\n  }\n  static makeFromEncoding(parent, model) {\n    const formula = model.reduceFieldDef((timeUnitComponent, fieldDef) => {\n      const {\n        field,\n        timeUnit\n      } = fieldDef;\n      if (timeUnit) {\n        const as = vgField(fieldDef, {\n          forAs: true\n        });\n        timeUnitComponent[hash({\n          as,\n          field,\n          timeUnit\n        })] = {\n          as,\n          field,\n          timeUnit\n        };\n      }\n      return timeUnitComponent;\n    }, {});\n    if (isEmpty(formula)) {\n      return null;\n    }\n    return new TimeUnitNode(parent, formula);\n  }\n  static makeFromTransform(parent, t) {\n    const {\n      timeUnit,\n      ...other\n    } = {\n      ...t\n    };\n    const normalizedTimeUnit = normalizeTimeUnit(timeUnit);\n    const component = {\n      ...other,\n      timeUnit: normalizedTimeUnit\n    };\n    return new TimeUnitNode(parent, {\n      [hash(component)]: component\n    });\n  }\n  /**\n   * Merge together TimeUnitNodes assigning the children of `other` to `this`\n   * and removing `other`.\n   */\n  merge(other) {\n    this.formula = {\n      ...this.formula\n    };\n    // if the same hash happen twice, merge\n    for (const key in other.formula) {\n      if (!this.formula[key]) {\n        // copy if it's not a duplicate\n        this.formula[key] = other.formula[key];\n      }\n    }\n    for (const child of other.children) {\n      other.removeChild(child);\n      child.parent = this;\n    }\n    other.remove();\n  }\n  /**\n   * Remove time units coming from the other node.\n   */\n  removeFormulas(fields) {\n    const newFormula = {};\n    for (const [key, timeUnit] of entries(this.formula)) {\n      if (!fields.has(timeUnit.as)) {\n        newFormula[key] = timeUnit;\n      }\n    }\n    this.formula = newFormula;\n  }\n  producedFields() {\n    return new Set(vals(this.formula).map(f => f.as));\n  }\n  dependentFields() {\n    return new Set(vals(this.formula).map(f => f.field));\n  }\n  hash() {\n    return `TimeUnit ${hash(this.formula)}`;\n  }\n  assemble() {\n    const transforms = [];\n    for (const f of vals(this.formula)) {\n      const {\n        field,\n        as,\n        timeUnit\n      } = f;\n      const {\n        unit,\n        utc,\n        ...params\n      } = normalizeTimeUnit(timeUnit);\n      transforms.push({\n        field: replacePathInField(field),\n        type: 'timeunit',\n        ...(unit ? {\n          units: getTimeUnitParts(unit)\n        } : {}),\n        ...(utc ? {\n          timezone: 'utc'\n        } : {}),\n        ...params,\n        as: [as, `${as}_end`]\n      });\n    }\n    return transforms;\n  }\n}","map":{"version":3,"mappings":"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","names":["vgField","getTimeUnitParts","normalizeTimeUnit","duplicate","entries","hash","isEmpty","replacePathInField","vals","DataFlowNode","TimeUnitNode","clone","formula","constructor","parent","makeFromEncoding","model","reduceFieldDef","timeUnitComponent","fieldDef","field","timeUnit","as","forAs","makeFromTransform","t","other","normalizedTimeUnit","component","merge","key","child","children","removeChild","remove","removeFormulas","fields","newFormula","has","producedFields","Set","map","f","dependentFields","assemble","transforms","unit","utc","params","push","type","units","timezone"],"sourceRoot":"","sources":["../../../../src/compile/data/timeunit.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}