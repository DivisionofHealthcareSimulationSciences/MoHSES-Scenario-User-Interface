{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/**\r\n * Vega-Lite's singleton logger utility.\r\n */\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _LocalLogger_level;\nimport { Debug, Error as ErrorLevel, Info, logger, Warn } from 'vega-util';\nimport * as _message from './message';\nexport { _message as message };\n/**\r\n * Main (default) Vega Logger instance for Vega-Lite.\r\n */\nconst main = logger(Warn);\nlet current = main;\n/**\r\n * Logger tool for checking if the code throws correct warning.\r\n */\nexport class LocalLogger {\n  constructor() {\n    this.warns = [];\n    this.infos = [];\n    this.debugs = [];\n    _LocalLogger_level.set(this, Warn);\n  }\n  level(_) {\n    if (_) {\n      __classPrivateFieldSet(this, _LocalLogger_level, _, \"f\");\n      return this;\n    }\n    return __classPrivateFieldGet(this, _LocalLogger_level, \"f\");\n  }\n  warn(...args) {\n    if (__classPrivateFieldGet(this, _LocalLogger_level, \"f\") >= Warn) this.warns.push(...args);\n    return this;\n  }\n  info(...args) {\n    if (__classPrivateFieldGet(this, _LocalLogger_level, \"f\") >= Info) this.infos.push(...args);\n    return this;\n  }\n  debug(...args) {\n    if (__classPrivateFieldGet(this, _LocalLogger_level, \"f\") >= Debug) this.debugs.push(...args);\n    return this;\n  }\n  error(...args) {\n    if (__classPrivateFieldGet(this, _LocalLogger_level, \"f\") >= ErrorLevel) throw Error(...args);\n    return this;\n  }\n}\n_LocalLogger_level = new WeakMap();\nexport function wrap(f) {\n  return () => {\n    current = new LocalLogger();\n    f(current);\n    reset();\n  };\n}\n/**\r\n * Set the singleton logger to be a custom logger.\r\n */\nexport function set(newLogger) {\n  current = newLogger;\n  return current;\n}\n/**\r\n * Reset the main logger to use the default Vega Logger.\r\n */\nexport function reset() {\n  current = main;\n  return current;\n}\nexport function error(...args) {\n  current.error(...args);\n}\nexport function warn(...args) {\n  current.warn(...args);\n}\nexport function info(...args) {\n  current.info(...args);\n}\nexport function debug(...args) {\n  current.debug(...args);\n}","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;AAIA,SAAQA,KAAK,EAAEC,KAAK,IAAIC,UAAU,EAAEC,IAAI,EAAEC,MAAM,EAAmBC,IAAI,QAAO,WAAW;AAAC,0BACjE,WAAW;AAAA,qBAAxBC,OAAO;AAEnB;;;AAGA,MAAMC,IAAI,GAAGH,MAAM,CAACC,IAAI,CAAC;AACzB,IAAIG,OAAO,GAAoBD,IAAI;AAEnC;;;AAGA,OAAM,MAAOE,WAAW;EAAxBC;IACS,UAAK,GAAU,EAAE;IACjB,UAAK,GAAU,EAAE;IACjB,WAAM,GAAU,EAAE;IAEzBC,6BAAiBN,IAAI;EA+BvB;EA3BSO,KAAK,CAACC,CAAU;IACrB,IAAIA,CAAC,EAAE;MACLC,2BAAI,sBAAUD,CAAC;MACf,OAAO,IAAI;;IAEb,OAAOE,2BAAI,0BAAO;EACpB;EAEOC,IAAI,CAAC,GAAGC,IAAoB;IACjC,IAAIF,2BAAI,0BAAO,IAAIV,IAAI,EAAE,IAAI,CAACa,KAAK,CAACC,IAAI,CAAC,GAAGF,IAAI,CAAC;IACjD,OAAO,IAAI;EACb;EAEOG,IAAI,CAAC,GAAGH,IAAoB;IACjC,IAAIF,2BAAI,0BAAO,IAAIZ,IAAI,EAAE,IAAI,CAACkB,KAAK,CAACF,IAAI,CAAC,GAAGF,IAAI,CAAC;IACjD,OAAO,IAAI;EACb;EAEOK,KAAK,CAAC,GAAGL,IAAoB;IAClC,IAAIF,2BAAI,0BAAO,IAAIf,KAAK,EAAE,IAAI,CAACuB,MAAM,CAACJ,IAAI,CAAC,GAAGF,IAAI,CAAC;IACnD,OAAO,IAAI;EACb;EAEOO,KAAK,CAAC,GAAGP,IAAoB;IAClC,IAAIF,2BAAI,0BAAO,IAAIb,UAAU,EAAE,MAAMD,KAAK,CAAC,GAAGgB,IAAI,CAAC;IACnD,OAAO,IAAI;EACb;;;AAGF,OAAM,SAAUQ,IAAI,CAACC,CAAgC;EACnD,OAAO,MAAK;IACVlB,OAAO,GAAG,IAAIC,WAAW,EAAE;IAC3BiB,CAAC,CAAClB,OAAsB,CAAC;IACzBmB,KAAK,EAAE;EACT,CAAC;AACH;AAEA;;;AAGA,OAAM,SAAUC,GAAG,CAACC,SAA0B;EAC5CrB,OAAO,GAAGqB,SAAS;EACnB,OAAOrB,OAAO;AAChB;AAEA;;;AAGA,OAAM,SAAUmB,KAAK;EACnBnB,OAAO,GAAGD,IAAI;EACd,OAAOC,OAAO;AAChB;AAEA,OAAM,SAAUgB,KAAK,CAAC,GAAGP,IAAoB;EAC3CT,OAAO,CAACgB,KAAK,CAAC,GAAGP,IAAI,CAAC;AACxB;AAEA,OAAM,SAAUD,IAAI,CAAC,GAAGC,IAAoB;EAC1CT,OAAO,CAACQ,IAAI,CAAC,GAAGC,IAAI,CAAC;AACvB;AAEA,OAAM,SAAUG,IAAI,CAAC,GAAGH,IAAoB;EAC1CT,OAAO,CAACY,IAAI,CAAC,GAAGH,IAAI,CAAC;AACvB;AAEA,OAAM,SAAUK,KAAK,CAAC,GAAGL,IAAoB;EAC3CT,OAAO,CAACc,KAAK,CAAC,GAAGL,IAAI,CAAC;AACxB","names":["Debug","Error","ErrorLevel","Info","logger","Warn","message","main","current","LocalLogger","constructor","_LocalLogger_level","level","_","__classPrivateFieldSet","__classPrivateFieldGet","warn","args","warns","push","info","infos","debug","debugs","error","wrap","f","reset","set","newLogger"],"sourceRoot":"","sources":["../../../src/log/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}