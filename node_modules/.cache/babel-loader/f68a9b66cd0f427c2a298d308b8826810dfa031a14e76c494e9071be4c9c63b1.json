{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport xmlbuilder from 'xmlbuilder';\nexport default {\n  data: () => ({\n    fileName: '',\n    state_file: null,\n    state_file2: null,\n    dialog1: false,\n    dialog: false,\n    altitude_min: 0,\n    altitude_max: 10000,\n    temperature_min: 0,\n    temperature_max: 100,\n    pressure_min: 0,\n    pressure_max: 1000,\n    co2_min: 0,\n    co2_max: 1,\n    age_min: 0,\n    age_max: 120,\n    height_min: 0,\n    height_max: 200,\n    weight_min: 0,\n    weight_max: 200,\n    tab: 'home',\n    name: [],\n    drawer: false,\n    valid: true,\n    expanded: [0],\n    capability: [{\n      required: [],\n      name: [],\n      data: [],\n      propertyName: [],\n      dataType: [],\n      value: []\n    }],\n    scenario_props: {\n      \"name\": [],\n      \"authors\": []\n    },\n    patient_props: {\n      \"type\": [],\n      \"name\": [],\n      \"title\": [],\n      \"age\": 50,\n      \"gender\": [],\n      \"height\": 150,\n      \"weight\": 75\n    },\n    environment_props: {\n      \"surrounding\": [],\n      \"altitude\": 0,\n      \"temperature\": 20,\n      \"pressure\": 760,\n      \"co2\": 0.04,\n      \"sounds\": [],\n      \"smells\": []\n    },\n    ed_props: {\n      'instruction': [],\n      'narrative': [],\n      'learnerCount': [],\n      'role': [],\n      'setup_checklist': [],\n      'equipment': [],\n      'supplies': [],\n      'duration': [],\n      'scenario_type': [],\n      'assessment_type': [],\n      'learner_group': [],\n      'objectives': [],\n      'task': [],\n      'conditions': [],\n      'exit_criteria': []\n    },\n    genders: ['Male', 'Female'],\n    types: ['Medical Doctor', 'Paramedic', 'Nurse']\n  }),\n  methods: {\n    handleFileUpload(e) {\n      this.state_file2 = e.target.files[0];\n      this.fileName = this.state_file2.name;\n    },\n    parseXML() {\n      if (!this.state_file2) {\n        alert('Please upload an XML file first');\n        return;\n      }\n      const reader = new FileReader();\n      reader.onload = e => {\n        const xmlString = e.target.result;\n        const parser = new DOMParser();\n        const xmlDoc = parser.parseFromString(xmlString, 'application/xml');\n\n        // Assuming the XML structure is as follows:\n        // <root>\n        //   <Patient>\n        //     <Age>...</Age>\n        //     <Weight>...</Weight>\n        //   </Patient>\n        // </root>\n        const patient = xmlDoc.querySelector('Patient');\n        const name = patient.querySelector('Name').textContent;\n        const sex = patient.querySelector('Sex').textContent;\n        const age = patient.querySelector('Age').getAttribute('value');\n        const height = patient.querySelector('Height').getAttribute('value');\n        const weight = patient.querySelector('Weight').getAttribute('value');\n        const ambientTemperatureElement = xmlDoc.querySelector('AmbientTemperature');\n        const ambientTemperatureValue = ambientTemperatureElement.getAttribute('value');\n        const atmosphericPressureElement = xmlDoc.querySelector('AtmosphericPressure');\n        const atmosphericPressureValue = atmosphericPressureElement.getAttribute('value');\n        const carbonDioxideElement = xmlDoc.querySelector('AmbientGas[Name=\"CarbonDioxide\"]');\n\n        // Access the FractionAmount element and its value attribute\n        const fractionAmountElement = carbonDioxideElement.querySelector('FractionAmount');\n        const fractionAmountValue = fractionAmountElement.getAttribute('value');\n        console.log('Fraction Amount:', fractionAmountValue);\n        console.log('Patient:', patient);\n        console.log('Name:', name);\n        console.log('sex:', sex);\n        console.log('Age:', age);\n        console.log('Height:', height);\n        console.log('Weight:', weight);\n        console.log('Ambient Temperature:', ambientTemperatureValue);\n        console.log('Ambient Pressure:', atmosphericPressureValue);\n        this.patient_props['name'] = name;\n        this.patient_props['age'] = age;\n        this.patient_props['gender'] = sex;\n        this.patient_props['height'] = height;\n        this.patient_props['weight'] = weight;\n        this.environment_props['co2'] = fractionAmountValue;\n        this.environment_props['temperature'] = ambientTemperatureValue;\n        this.environment_props['pressure'] = atmosphericPressureValue;\n        this.scenario_props['name'] = this.fileName;\n      };\n      reader.readAsText(this.state_file2);\n    },\n    addCapability() {\n      this.capability.push({\n        required: '',\n        name: '',\n        data: '',\n        propertyName: '',\n        dataType: '',\n        value: ''\n      });\n    },\n    nextTab(id) {\n      this.tab = id;\n    },\n    removeCapability(index) {\n      this.capability.splice(index, 1);\n    },\n    validate() {\n      this.$refs.form.validate();\n    },\n    reset() {\n      this.$refs.form.reset();\n    },\n    pathClicked(id) {\n      let pathElement = document.getElementById(id);\n      if (this.name.some(x => Object.keys(x).includes(id))) {\n        this.name = this.name.filter(x => !Object.keys(x).includes(id));\n      } else {\n        this.name.push({\n          [id]: ''\n        });\n      }\n      if (pathElement.classList.contains(\"active\")) {\n        pathElement.classList.remove(\"active\");\n      } else {\n        pathElement.classList.add(\"active\");\n      }\n    },\n    saveXML() {\n      const xml = xmlbuilder.create('AMMConfiguration', {\n        encoding: 'UTF-8'\n      });\n      xml.att({\n        'xmlns:xsd': 'http://www.w3.org/2001/XMLSchema',\n        'xmlns:xsi': 'http://www.w3.org/2001/XMLSchema-instance'\n      });\n      const Scenario = xml.ele('Scenario');\n      Scenario.att({\n        'name': this.scenario_props['name']\n      });\n      const metadata = Scenario.ele('metadata');\n      for (var key1 in this.patient_props) {\n        if (Array.isArray(this.patient_props[key1])) {\n          for (var item1 in this.patient_props[key1]) {\n            metadata.ele(key1, this.patient_props[key1][item1]);\n          }\n        } else {\n          const element = metadata.ele(key1, this.patient_props[key1]);\n          if (key1 == 'age') {\n            element.att('units', 'years');\n          }\n          if (key1 == 'height') {\n            element.att('units', 'centimeters');\n          }\n          if (key1 == 'weight') {\n            element.att('units', 'kilograms');\n          }\n        }\n      }\n      for (var key2 in this.environment_props) {\n        if (Array.isArray(this.environment_props[key2])) {\n          for (var item2 in this.environment_props[key2]) {\n            metadata.ele(key2, this.environment_props[key2][item2]);\n          }\n        } else {\n          const element = metadata.ele(key2, this.environment_props[key2]);\n          if (key2 == 'altitude') {\n            element.att('units', 'meters');\n          }\n          if (key2 == 'temperature') {\n            element.att('units', 'celsius');\n          }\n          if (key2 == 'pressure') {\n            element.att('units', 'mmHg');\n          }\n        }\n      }\n      for (var key3 in this.ed_props) {\n        if (Array.isArray(this.ed_props[key3])) {\n          for (var item3 in this.ed_props[key3]) {\n            metadata.ele(key3, this.ed_props[key3][item3]);\n          }\n        } else {\n          const element = metadata.ele(key3, this.ed_props[key3]);\n          if (key3 == 'duration') {\n            element.att('units', 'minutes');\n          }\n        }\n      }\n      const caps = Scenario.ele('capabilities');\n      for (var item4 in this.capability) {\n        const cap = caps.ele('capability');\n        const config_data = cap.ele('configuration_data');\n        for (var key4 in this.capability[item4]) {\n          if (key4 == 'name') {\n            cap.att(key4, this.capability[item4][key4]);\n          }\n          if (key4 == 'required') {\n            cap.att(key4, this.capability[item4][key4]);\n          } else {\n            config_data.ele(key4, this.capability[item4][key4]);\n          }\n        }\n      }\n      var xmlString = xml.end({\n        pretty: true\n      });\n      const blob = new Blob([xmlString], {\n        type: 'text/xml'\n      });\n      const link = document.createElement('a');\n      link.href = URL.createObjectURL(blob);\n      link.download = 'data.xml';\n      link.click();\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["xmlbuilder","data","fileName","state_file","state_file2","dialog1","dialog","altitude_min","altitude_max","temperature_min","temperature_max","pressure_min","pressure_max","co2_min","co2_max","age_min","age_max","height_min","height_max","weight_min","weight_max","tab","name","drawer","valid","expanded","capability","required","propertyName","dataType","value","scenario_props","patient_props","environment_props","ed_props","genders","types","methods","handleFileUpload","e","target","files","parseXML","alert","reader","FileReader","onload","xmlString","result","parser","DOMParser","xmlDoc","parseFromString","patient","querySelector","textContent","sex","age","getAttribute","height","weight","ambientTemperatureElement","ambientTemperatureValue","atmosphericPressureElement","atmosphericPressureValue","carbonDioxideElement","fractionAmountElement","fractionAmountValue","console","log","readAsText","addCapability","push","nextTab","id","removeCapability","index","splice","validate","$refs","form","reset","pathClicked","pathElement","document","getElementById","some","x","Object","keys","includes","filter","classList","contains","remove","add","saveXML","xml","create","encoding","att","Scenario","ele","metadata","key1","Array","isArray","item1","element","key2","item2","key3","item3","caps","item4","cap","config_data","key4","end","pretty","blob","Blob","type","link","createElement","href","URL","createObjectURL","download","click"],"sourceRoot":"","sources":["/Users/stlp/Desktop/Spring 2023/BIOEN 405/User Interface/MoHSES-Scenario-User-Interface/src/views/MoHSESView.vue"],"sourcesContent":["<template>\n   <v-toolbar style=\"color: white\" color=\"#3c2d70\">\n      <v-toolbar-title>MoHSES Scenario Creation Tool</v-toolbar-title>\n   </v-toolbar>\n   <v-tabs large v-model=\"tab\" color=\"#4b0082\">\n      <v-tab value=\"home\">\n         <v-icon start> mdi-home </v-icon>\n         About this page\n      </v-tab>\n      <v-tab value=\"option-1\">\n         <v-icon start> mdi-form-textbox </v-icon>\n         Scenario Properties\n      </v-tab>\n      <v-tab value=\"option-2\">\n         <v-icon start> mdi-account </v-icon>\n         Patient Properties\n      </v-tab>\n      <v-tab value=\"option-3\">\n         <v-icon start> mdi-access-point </v-icon>\n         Environment Properties\n      </v-tab>\n      <v-tab value=\"option-4\">\n         <v-icon start> mdi-list-status </v-icon>\n         Educational Encounter Properties\n      </v-tab>\n      <v-tab value=\"option-5\">\n         <v-icon start> mdi-tools </v-icon>\n         Capabilities\n      </v-tab>\n   </v-tabs>\n   <v-main class=\"bg-grey-lighten-3\">\n      <v-container>\n         <v-window v-model=\"tab\" class=\"mt-n12\">\n            <v-form ref=\"form\" v-model=\"valid\" lazy-validation>\n               <v-window-item value=\"home\">\n                  <v-card class=\"bg-grey-lighten-3\" flat>\n                   <v-card-title class=\"text-center\" style=\"font-size: 36px\">Welcome to the MoHSES Scenario Creation Tool!</v-card-title>\n                   \n                   <v-container fluid>\n     <v-row align=\"center\" justify=\"center\">\n       <v-col cols=\"12\">\n         <v-img\n           src=\"@/assets/crest_vh_gold_purple_dt.png\"\n           alt=\"Your image\"\n           class=\"mx-auto\"\n           width=\"80%\"\n           height=\"80%\"\n         />\n       </v-col>\n     </v-row>\n   </v-container>\n                     <v-card-text>\n                        <p style=\"font-size: 14px\">This tool is designed to simplify the process of generating a MoHSES scenario file, which can be used with the MoHSES manikin at the CREST lab. To get started, you will need to use the BioGears Scenario Creation Tool to generate a patient state file and BioGears scenario file, and run BioGears using these files to generate a state file. Once you have your state file, you can use our tool to create your MoHSES scenario file. Simply upload your state file, select the desired parameters, and let the tool do the rest! With our user-friendly interface, you can quickly generate a MoHSES scenario file to use with the MoHSES manikin.</p>\n                     </v-card-text>\n                  </v-card>\n                  <v-col cols=\"auto\">\n                     <v-btn @click=\"nextTab('option-1')\" density=\"compact\" icon=\"mdi-arrow-right\"></v-btn>\n                  </v-col>\n               </v-window-item>\n               <v-window-item value=\"option-1\">\n                  <v-card flat>\n                     <v-card-text>\n                        <p style=\"font-size: 20px\">Please enter scenario properties:</p>\n                        <br>\n                        <v-file-input\n     label=\"Upload BioGears State File\"\n     v-model=\"state_file\"\n     prepend-icon=\"mdi-upload\"\n     @change=\"handleFileUpload\"\n   ></v-file-input>\n   <v-btn style=\"color: white\" color=\"#3c2d70\" @click=\"parseXML\">Parse State File</v-btn>\n   <br>\n   <br>\n                        <v-select v-model=\"patient_props['type']\" :items=\"types\" label=\"Instructor Type\" required clearable></v-select>\n                        <v-text-field v-model=\"scenario_props['name']\" label=\"Scenario Name\" required clearable></v-text-field>\n                        <v-combobox v-model=\"scenario_props['authors']\" label=\"Authors\" required clearable multiple chips hint='Click \"enter\" to add multiple items'></v-combobox>\n\n                     </v-card-text>\n                  </v-card>\n                  <br>\n                  <v-row justify=\"center\">\n                     <v-col cols=\"auto\">\n                        <v-btn @click=\"nextTab('home')\" density=\"compact\" icon=\"mdi-arrow-left\"></v-btn>\n                     </v-col>\n                     <v-col cols=\"auto\">\n                        <v-btn @click=\"nextTab('option-2')\" density=\"compact\" icon=\"mdi-arrow-right\"></v-btn>\n                     </v-col>\n                  </v-row>\n                  <br>\n               </v-window-item>\n               <v-window-item value=\"option-2\">\n                  <v-card flat>\n                     <v-card-text>\n                        <p style=\"font-size: 20px\">Please enter patient properties:</p>\n                        <br>\n                        <v-text-field v-model=\"patient_props['name']\" label=\"Name\" required clearable></v-text-field>\n                        <v-text-field v-model=\"patient_props['title']\" label=\"Title or Rank\" required clearable></v-text-field>\n                        <v-select v-model=\"patient_props['gender']\" :items=\"genders\" label=\"Sex\" required clearable></v-select>\n                        <v-slider v-model=\"patient_props['age']\" label=\"Age\" class=\"align-center\" :max=\"age_max\" :min=\"age_min\" :step=\"1\">\n                           <template v-slot:append>\n                              <v-text-field v-model=\"patient_props['age']\" hide-details single-line density=\"compact\" type=\"number\" suffix=\"years\" style=\"width: 180px\"></v-text-field>\n                           </template>\n                        </v-slider>\n                        <v-slider v-model=\"patient_props['height']\" label=\"Height\" class=\"align-center\" :max=\"height_max\" :min=\"height_min\" :step=\"0.1\">\n                           <template v-slot:append>\n                              <v-text-field v-model=\"patient_props['height']\" hide-details single-line density=\"compact\" type=\"number\" suffix=\"cm\" style=\"width: 180px\"></v-text-field>\n                           </template>\n                        </v-slider>\n                        <v-slider v-model=\"patient_props['weight']\" label=\"Weight\" class=\"align-center\" :max=\"weight_max\" :min=\"weight_min\" :step=\"0.1\">\n                           <template v-slot:append>\n                              <v-text-field v-model=\"patient_props['weight']\" hide-details single-line density=\"compact\" type=\"number\" suffix=\"kg\" style=\"width: 180px\"></v-text-field>\n                           </template>\n                        </v-slider>\n                     </v-card-text>\n                  </v-card>\n                  <br>\n                  <v-row justify=\"center\">\n                     <v-col cols=\"auto\">\n                        <v-btn @click=\"nextTab('option-1')\" density=\"compact\" icon=\"mdi-arrow-left\"></v-btn>\n                     </v-col>\n                     <v-col cols=\"auto\">\n                        <v-btn @click=\"nextTab('option-3')\" density=\"compact\" icon=\"mdi-arrow-right\"></v-btn>\n                     </v-col>\n                  </v-row>\n                  <br>\n               </v-window-item>\n               <v-window-item value=\"option-3\">\n                  <v-card flat>\n                     <v-card-text>\n                        <p style=\"font-size: 20px\">Please enter environment properties:</p>\n                        <br>\n                        <v-textarea v-model=\"environment_props['surrounding']\" label=\"Surrounding\" clearable></v-textarea>\n                        <v-combobox v-model=\"environment_props['sounds']\" label=\"Ambient Sounds\" multiple clearable chips hint='Click \"enter\" to add multiple items'></v-combobox>\n                        <v-combobox v-model=\"environment_props['smells']\" label=\"Smells\" multiple clearable chips hint='Click \"enter\" to add multiple items'></v-combobox>\n                        <v-slider v-model=\"environment_props['altitude']\" label=\"Altitude\" required clearable class=\"align-center\" :max=\"altitude_max\" :min=\"altitude_min\" :step=\"0.1\">\n                           <template v-slot:append>\n                              <v-text-field v-model=\"environment_props['altitude']\" hide-details clearable single-line density=\"compact\" type=\"number\" suffix=\"m\" style=\"width: 180px\"></v-text-field>\n                           </template>\n                        </v-slider>\n                        <v-slider v-model=\"environment_props['temperature']\" label=\"Temperature\" required clearable class=\"align-center\" :max=\"temperature_max\" :min=\"temperature_min\" :step=\"0.1\">\n                           <template v-slot:append>\n                              <v-text-field v-model=\"environment_props['temperature']\" hide-details clearable single-line density=\"compact\" type=\"number\" suffix=\"Celsius\" style=\"width: 180px\"></v-text-field>\n                           </template>\n                        </v-slider>\n                        <v-slider v-model=\"environment_props['pressure']\" label=\"Pressure\" required clearable class=\"align-center\" :max=\"pressure_max\" :min=\"pressure_min\" :step=\"0.1\">\n                           <template v-slot:append>\n                              <v-text-field v-model=\"environment_props['pressure']\" hide-details clearable single-line density=\"compact\" type=\"number\" suffix=\"mmHg\" style=\"width: 180px\"></v-text-field>\n                           </template>\n                        </v-slider>\n                        <v-slider v-model=\"environment_props['co2']\" label=\"Ambient CO2 [fraction]\" required clearable class=\"align-center\" :max=\"co2_max\" :min=\"co2_min\" :step=\"0.1\">\n                           <template v-slot:append>\n                              <v-text-field v-model=\"environment_props['co2']\" hide-details clearable single-line density=\"compact\" type=\"number\" style=\"width: 180px\"></v-text-field>\n                           </template>\n                        </v-slider>\n                     </v-card-text>\n                  </v-card>\n                  <br>\n                  <v-row justify=\"center\">\n                     <v-col cols=\"auto\">\n                        <v-btn @click=\"nextTab('option-2')\" density=\"compact\" icon=\"mdi-arrow-left\"></v-btn>\n                     </v-col>\n                     <v-col cols=\"auto\">\n                        <v-btn @click=\"nextTab('option-4')\" density=\"compact\" icon=\"mdi-arrow-right\"></v-btn>\n                     </v-col>\n                  </v-row>\n                  <br>\n               </v-window-item>\n               <v-window-item value=\"option-4\">\n                  <v-card flat>\n                     <v-card-text>\n                        <p style=\"font-size: 20px\">Please enter educational encounter properties:</p>\n                        <br>\n                        <v-textarea v-model=\"ed_props['instruction']\" label=\"Instructions\" clearable></v-textarea>\n                        <v-textarea v-model=\"ed_props['narrative']\" label=\"Narrative\" clearable></v-textarea>\n                        <v-text-field v-model=\"ed_props['role']\" label=\"Roles\" clearable></v-text-field>\n                        <v-combobox v-model=\"ed_props['setup_checklist']\" label=\"Setup Checklist\" multiple clearable chips hint='Click \"enter\" to add multiple items'></v-combobox>\n                        <v-combobox v-model=\"ed_props['equipment']\" label=\"Equipment\" multiple clearable chips hint='Click \"enter\" to add multiple items'></v-combobox>\n                        <v-combobox v-model=\"ed_props['supplies']\" label=\"Supplies\" multiple clearable chips hint='Click \"enter\" to add multiple items'></v-combobox>\n                        <v-text-field v-model=\"ed_props['scenario_type']\" label=\"Scenario Type\" clearable></v-text-field>\n                        <v-text-field v-model=\"ed_props['assessment_type']\" label=\"Assessment Type\" clearable></v-text-field>\n                        <v-text-field v-model=\"ed_props['learner_group']\" label=\"Learner Group\" clearable></v-text-field>\n                        <v-combobox v-model=\"ed_props['objectives']\" label=\"Learning Objectives\" multiple clearable chips hint='Click \"enter\" to add multiple items'></v-combobox>\n                        <v-combobox v-model=\"ed_props['task']\" label=\"Task Descriptions\" multiple clearable chips hint='Click \"enter\" to add multiple items'></v-combobox>\n                        <v-combobox v-model=\"ed_props['conditions']\" label=\"Performance Conditions\" multiple clearable chips hint='Click \"enter\" to add multiple items'></v-combobox>\n                        <v-combobox v-model=\"ed_props['exit_criteria']\" label=\"Exit Criteria\" multiple clearable chips hint='Click \"enter\" to add multiple items'></v-combobox>\n                        <v-slider v-model=\"ed_props['duration']\" label=\"Estimated Duration\" clearable class=\"align-center\" :max=\"100\" :min=\"0\" :step=\"1\">\n                           <template v-slot:append>\n                              <v-text-field v-model=\"ed_props['duration']\" hide-details clearable single-line density=\"compact\" type=\"number\" suffix=\"min\" style=\"width: 180px\"></v-text-field>\n                           </template>\n                        </v-slider>\n                        <v-slider v-model=\"ed_props['learnerCount']\" label=\"Number of Learners\" clearable class=\"align-center\" :max=\"100\" :min=\"0\" :step=\"1\">\n                           <template v-slot:append>\n                              <v-text-field v-model=\"ed_props['learnerCount']\" hide-details clearable single-line density=\"compact\" type=\"number\" suffix=\"learners\" style=\"width: 180px\"></v-text-field>\n                           </template>\n                        </v-slider>\n                     </v-card-text>\n                  </v-card>\n                  <br>\n                  <v-row justify=\"center\">\n                     <v-col cols=\"auto\">\n                        <v-btn @click=\"nextTab('option-3')\" density=\"compact\" icon=\"mdi-arrow-left\"></v-btn>\n                     </v-col>\n                     <v-col cols=\"auto\">\n                        <v-btn @click=\"nextTab('option-5')\" density=\"compact\" icon=\"mdi-arrow-right\"></v-btn>\n                     </v-col>\n                  </v-row>\n                  <br>\n               </v-window-item>\n               <v-window-item value=\"option-5\">\n                  <v-card flat>\n                     <v-card-text>\n                        <p style=\"font-size: 20px\">Please enter scenario capabilities:</p>\n                        <br>\n                        <div v-for=\"(exp, index) in capability\" :key=\"index\">\n                           <v-checkbox-btn v-model=\"exp.required\" label=\"Required\"></v-checkbox-btn>\n                           <v-text-field clearable v-model=\"exp.name\" label=\"Capability Name\"></v-text-field>\n                           <v-text-field clearable v-model=\"exp.data\" label=\"Configuration Data\"></v-text-field>\n                           <v-text-field clearable v-model=\"exp.propertyName\" label=\"Property Name\"></v-text-field>\n                           <v-select clearable v-model=\"exp.dataType\" label=\"Data Type\" :items=\"['string', 'number', 'boolean', 'option']\"></v-select>\n                           <v-file-input clearable v-model=\"exp.value\" label=\"Value\"></v-file-input>\n                           <v-btn @click=\"removeCapability(index)\">Remove Capability</v-btn>\n                           <br>\n                           <br>\n                        </div>\n                        <v-btn @click=\"addCapability\">Add Capability</v-btn>\n                        <br>\n                        <br>\n                        <v-row>\n      <v-col cols=\"auto\" class=\"mr-2\">\n        <v-btn style=\"color: white\" color=\"#3c2d70\" v-if=\"selectPlot\" @click=\"plotSelectedChart\">Plot Chart</v-btn>\n      </v-col>\n      <v-col cols=\"auto\">\n        <v-btn style=\"color: white\" color=\"#3c2d70\" v-if=\"selectPlot\" @click=\"downloadChart\">Download Chart</v-btn>\n      </v-col>\n    </v-row>\n<v-row>\n   <v-col cols=\"auto\" class=\"mr-2\">\n                        <v-dialog\n     v-model=\"dialog1\"\n     persistent\n     width=\"auto\"\n   >\n     <template v-slot:activator=\"{ props }\">\n       <v-btn\n         color=\"success\"\n         v-bind=\"props\"\n       >\n         Submit\n       </v-btn>\n     </template>\n     <v-card>\n       <v-card-title class=\"text-h5\">\n         Submission Confirmation\n       </v-card-title>\n       <v-card-text>Are you sure you would like to submit your form?</v-card-text>\n       <v-card-actions>\n         <v-spacer></v-spacer>\n         <v-btn\n           color=\"green-darken-1\"\n           variant=\"text\"\n           @click=\"dialog1 = false\"\n         >\n           Dismiss\n         </v-btn>\n         <v-btn :disabled=\"!valid\" color=\"success\" class=\"mr-4\" @click=\"saveXML(); dialog1=false\"> Submit </v-btn>\n       </v-card-actions>\n     </v-card>\n   </v-dialog>\n   <v-spacer></v-spacer>\n   <v-dialog\n     v-model=\"dialog\"\n     persistent\n     width=\"auto\"\n   >\n     <template v-slot:activator=\"{ props }\">\n       <v-btn\n         color=\"error\"\n         v-bind=\"props\"\n       >\n         Reset Form\n       </v-btn>\n     </template>\n     <v-card>\n       <v-card-title class=\"text-h5\">\n         Reset Confirmation\n       </v-card-title>\n       <v-card-text>Are you sure you would like to reset your form?</v-card-text>\n       <v-card-actions>\n         <v-spacer></v-spacer>\n         <v-btn\n           color=\"green-darken-1\"\n           variant=\"text\"\n           @click=\"dialog = false\"\n         >\n           Dismiss\n         </v-btn>\n         <v-btn color=\"error\" class=\"mr-4\" @click=\"reset(); dialog=false\"> Reset Form </v-btn>\n         </v-card-actions>\n         </v-card>\n         </v-dialog>\n       </v-col>\n         </v-row>\n         \n\n                        <br>\n                     </v-card-text>\n                  </v-card>\n                  <br>\n                  <br>\n                  <v-row justify=\"center\">\n                     <v-col cols=\"auto\">\n                        <v-btn @click=\"nextTab('option-4')\" density=\"compact\" icon=\"mdi-arrow-left\"></v-btn>\n                     </v-col>\n                  </v-row>\n                  <br>\n                  <br>\n               </v-window-item>\n            </v-form>\n         </v-window>\n      </v-container>\n   </v-main>\n</template>\n<script>\n   import xmlbuilder from 'xmlbuilder'\n   export default {\n     data: () => ({\n       fileName: '',\n       state_file: null,\n       state_file2: null,\n       dialog1: false,\n       dialog: false,\n       altitude_min: 0,\n       altitude_max: 10000,\n       temperature_min: 0,\n       temperature_max: 100,\n       pressure_min: 0,\n       pressure_max: 1000,\n       co2_min: 0,\n       co2_max: 1,\n       age_min: 0,\n       age_max: 120,\n       height_min: 0,\n       height_max: 200,\n       weight_min: 0,\n       weight_max: 200,\n       tab: 'home',\n       name: [],\n       drawer: false,\n       valid: true,\n       expanded: [0],\n       capability: [{\n         required: [],\n         name: [],\n         data: [],\n         propertyName: [],\n         dataType: [],\n         value: []\n       }, ],\n       scenario_props: {\n         \"name\": [],\n         \"authors\": []\n       },\n       patient_props: {\n         \"type\": [],\n         \"name\": [],\n         \"title\": [],\n         \"age\": 50,\n         \"gender\": [],\n         \"height\": 150,\n         \"weight\": 75,\n       },\n       environment_props: {\n         \"surrounding\": [],\n         \"altitude\": 0,\n         \"temperature\": 20,\n         \"pressure\": 760,\n         \"co2\": 0.04,\n         \"sounds\": [],\n         \"smells\": []\n       },\n       ed_props: {\n         'instruction': [],\n         'narrative': [],\n         'learnerCount': [],\n         'role': [],\n         'setup_checklist': [],\n         'equipment': [],\n         'supplies': [],\n         'duration': [],\n         'scenario_type': [],\n         'assessment_type': [],\n         'learner_group': [],\n         'objectives': [],\n         'task': [],\n         'conditions': [],\n         'exit_criteria': []\n       },\n       genders: ['Male', 'Female'],\n       types: ['Medical Doctor', 'Paramedic', 'Nurse'],\n     }),\n     methods: {\n      handleFileUpload(e) {\n      this.state_file2 = e.target.files[0];\n      this.fileName = this.state_file2.name;\n    },\n    parseXML() {\n      if (!this.state_file2) {\n        alert('Please upload an XML file first');\n        return;\n      }\n\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const xmlString = e.target.result;\n        const parser = new DOMParser();\n        const xmlDoc = parser.parseFromString(xmlString, 'application/xml');\n\n        // Assuming the XML structure is as follows:\n        // <root>\n        //   <Patient>\n        //     <Age>...</Age>\n        //     <Weight>...</Weight>\n        //   </Patient>\n        // </root>\n        const patient = xmlDoc.querySelector('Patient');\n        const name = patient.querySelector('Name').textContent;\n        const sex = patient.querySelector('Sex').textContent;\n        const age = patient.querySelector('Age').getAttribute('value');\n        const height = patient.querySelector('Height').getAttribute('value');\n        const weight = patient.querySelector('Weight').getAttribute('value');\n        const ambientTemperatureElement = xmlDoc.querySelector('AmbientTemperature');\n        const ambientTemperatureValue = ambientTemperatureElement.getAttribute('value');\n        const atmosphericPressureElement = xmlDoc.querySelector('AtmosphericPressure');\n        const atmosphericPressureValue = atmosphericPressureElement.getAttribute('value');\n        const carbonDioxideElement = xmlDoc.querySelector('AmbientGas[Name=\"CarbonDioxide\"]');\n\n        // Access the FractionAmount element and its value attribute\n        const fractionAmountElement = carbonDioxideElement.querySelector('FractionAmount');\n        const fractionAmountValue = fractionAmountElement.getAttribute('value');\n\n        console.log('Fraction Amount:', fractionAmountValue);\n        console.log('Patient:', patient);\n        console.log('Name:', name);\n        console.log('sex:', sex);\n        console.log('Age:', age);\n        console.log('Height:', height);\n        console.log('Weight:', weight);\n        console.log('Ambient Temperature:', ambientTemperatureValue);\n        console.log('Ambient Pressure:', atmosphericPressureValue);\n        this.patient_props['name'] = name;\n        this.patient_props['age'] = age;\n        this.patient_props['gender'] = sex;\n        this.patient_props['height'] = height;\n        this.patient_props['weight'] = weight;\n        this.environment_props['co2'] = fractionAmountValue;\n        this.environment_props['temperature'] = ambientTemperatureValue;\n        this.environment_props['pressure'] = atmosphericPressureValue;\n        this.scenario_props['name'] = this.fileName;\n      };\n      reader.readAsText(this.state_file2);\n    },\n       addCapability() {\n         this.capability.push({\n           required: '',\n           name: '',\n           data: '',\n           propertyName: '',\n           dataType: '',\n           value: ''\n         });\n       },\n       nextTab(id) {\n         this.tab = id;\n       },\n       removeCapability(index) {\n         this.capability.splice(index, 1);\n       },\n       validate() {\n         this.$refs.form.validate()\n       },\n       reset() {\n         this.$refs.form.reset()\n       },\n       pathClicked(id) {\n         let pathElement = document.getElementById(id);\n         if (this.name.some(x => Object.keys(x).includes(id))) {\n           this.name = this.name.filter(x => !Object.keys(x).includes(id));\n         } else {\n           this.name.push({\n             [id]: ''\n           })\n         }\n         if (pathElement.classList.contains(\"active\")) {\n           pathElement.classList.remove(\"active\");\n         } else {\n           pathElement.classList.add(\"active\");\n         }\n       },\n       saveXML() {\n         const xml = xmlbuilder.create('AMMConfiguration', {\n           encoding: 'UTF-8'\n         })\n         xml.att({'xmlns:xsd':'http://www.w3.org/2001/XMLSchema', 'xmlns:xsi':'http://www.w3.org/2001/XMLSchema-instance'})\n         const Scenario = xml.ele('Scenario')\n         Scenario.att({'name':this.scenario_props['name']})\n         const metadata = Scenario.ele('metadata')\n         for (var key1 in this.patient_props) {\n           if (Array.isArray(this.patient_props[key1])) {\n             for (var item1 in this.patient_props[key1]) {\n               metadata.ele(key1, this.patient_props[key1][item1])\n             }\n           } else {\n             const element = metadata.ele(key1, this.patient_props[key1])\n             if (key1 == 'age') {\n               element.att('units', 'years')\n             }\n             if (key1 == 'height') {\n               element.att('units', 'centimeters')\n             }\n             if (key1 == 'weight') {\n               element.att('units', 'kilograms')\n             }\n           }\n         }\n         for (var key2 in this.environment_props) {\n           if (Array.isArray(this.environment_props[key2])) {\n             for (var item2 in this.environment_props[key2]) {\n               metadata.ele(key2, this.environment_props[key2][item2])\n             }\n           } else {\n             const element = metadata.ele(key2, this.environment_props[key2])\n             if (key2 == 'altitude') {\n               element.att('units', 'meters')\n             }\n             if (key2 == 'temperature') {\n               element.att('units', 'celsius')\n             }\n             if (key2 == 'pressure') {\n               element.att('units', 'mmHg')\n             }\n           }\n         }\n         for (var key3 in this.ed_props) {\n           if (Array.isArray(this.ed_props[key3])) {\n             for (var item3 in this.ed_props[key3]) {\n               metadata.ele(key3, this.ed_props[key3][item3])\n             }\n           } else {\n             const element = metadata.ele(key3, this.ed_props[key3])\n             if (key3 == 'duration') {\n               element.att('units', 'minutes')\n             }\n           }\n         }\n         const caps = Scenario.ele('capabilities')\n         for (var item4 in this.capability) {\n           const cap = caps.ele('capability')\n           const config_data = cap.ele('configuration_data')\n           for (var key4 in this.capability[item4]) {\n             if (key4 == 'name') {\n               cap.att(key4, this.capability[item4][key4])\n             } \n             if (key4 == 'required') {\n               cap.att(key4, this.capability[item4][key4])\n             } else {\n               config_data.ele(key4, this.capability[item4][key4])\n             }\n           }\n         }\n         var xmlString = xml.end({\n           pretty: true\n         });\n         const blob = new Blob([xmlString], {\n           type: 'text/xml'\n         })\n         const link = document.createElement('a')\n         link.href = URL.createObjectURL(blob)\n         link.download = 'data.xml'\n         link.click()\n       }\n     },\n   }\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}