{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, withCtx as _withCtx, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_file_input = _resolveComponent(\"v-file-input\");\n  const _component_v_simple_table = _resolveComponent(\"v-simple-table\");\n  const _component_v_container = _resolveComponent(\"v-container\");\n  return _openBlock(), _createBlock(_component_v_container, null, {\n    default: _withCtx(() => [_createVNode(_component_v_file_input, {\n      accept: \".csv\",\n      modelValue: $data.file,\n      \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.file = $event),\n      label: \"Upload CSV file\",\n      onInput: $options.parseCsv,\n      ref: \"\"\n    }, null, 8 /* PROPS */, [\"modelValue\", \"onInput\"]), _createVNode(_component_v_simple_table, null, {\n      default: _withCtx(() => [_createElementVNode(\"thead\", null, [_createElementVNode(\"tr\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.headers, header => {\n        return _openBlock(), _createElementBlock(\"th\", {\n          key: header\n        }, _toDisplayString(header), 1 /* TEXT */);\n      }), 128 /* KEYED_FRAGMENT */))])]), _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.rows, (row, rowIndex) => {\n        return _openBlock(), _createElementBlock(\"tr\", {\n          key: rowIndex\n        }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(row, (value, columnIndex) => {\n          return _openBlock(), _createElementBlock(\"td\", {\n            key: columnIndex\n          }, _toDisplayString(value), 1 /* TEXT */);\n        }), 128 /* KEYED_FRAGMENT */))]);\n      }), 128 /* KEYED_FRAGMENT */))])]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"mappings":";;;;;uBACIA,aAwBcC;sBAvBZ,MAMgB,CANhBC,aAMgBC;MALdC,MAAM,EAAC,MAAM;kBACJC,UAAI;iEAAJA,UAAI;MACbC,KAAK,EAAC,iBAAiB;MACtBC,OAAK,EAAEC,iBAAQ;MAChBC,GAAG,EAAC;wDAENP,aAeiBQ;MAdEC,OAAO,WACtB,MAIQ,CAJRC,oBAIQ,gBAHNA,oBAEK,gCADHC,oBAA6DC,6BAAxCT,aAAO,EAAjBU,MAAM;6BAAjBF,oBAA6D;UAA9BG,GAAG,EAAED;QAAM,oBAAKA,MAAM;0CAGzDH,oBAMQ,mCALNC,oBAIKC,6BAJyBT,UAAI,GAAtBY,GAAG,EAAEC,QAAQ;6BAAzBL,oBAIK;UAJgCG,GAAG,EAAEE;QAAQ,uBAChDL,oBAEKC,6BAF8BG,GAAG,GAA1BE,KAAK,EAAEC,WAAW;+BAA9BP,oBAEK;YAFoCG,GAAG,EAAEI;UAAW,oBACpDD,KAAK","names":["_createBlock","_component_v_container","_createVNode","_component_v_file_input","accept","$data","label","onInput","$options","ref","_component_v_simple_table","default","_createElementVNode","_createElementBlock","_Fragment","header","key","row","rowIndex","value","columnIndex"],"sourceRoot":"","sources":["/Users/stlp/Desktop/Spring 2023/BIOEN 405/User Interface/MoHSES-Scenario-User-Interface/src/views/PlottingView.vue"],"sourcesContent":["<template>\n    <v-container>\n      <v-file-input\n        accept=\".csv\"\n        v-model=\"file\"\n        label=\"Upload CSV file\"\n        @input=\"parseCsv\"\n        ref=\"\"\n      ></v-file-input>\n      <v-simple-table>\n        <template v-slot:default>\n          <thead>\n            <tr>\n              <th v-for=\"header in headers\" :key=\"header\">{{ header }}</th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr v-for=\"(row, rowIndex) in rows\" :key=\"rowIndex\">\n              <td v-for=\"(value, columnIndex) in row\" :key=\"columnIndex\">\n                {{ value }}\n              </td>\n            </tr>\n          </tbody>\n        </template>\n      </v-simple-table>\n    </v-container>\n  </template>\n  \n  <script>\n  import * as d3 from 'd3';\n  \n  export default {\n    name: 'CsvParser',\n    data() {\n      return {\n        file: null,\n        headers: [],\n        rows: [],\n      };\n    },\n    methods: {\n      async parseCsv() {\n        const file = this.file;\n        if (!file) {\n          return;\n        }\n        try {\n          const text = await file.text();\n          const csv = d3.csvParse(text);\n          this.headers = Object.keys(csv[0]);\n          this.rows = csv;\n        } catch (error) {\n          console.error(error);\n        }\n      },\n    },\n  };\n  </script>\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}