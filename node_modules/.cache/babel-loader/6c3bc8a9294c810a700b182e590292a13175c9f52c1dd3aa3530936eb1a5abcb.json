{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as d3 from 'd3';\nexport default {\n  data: () => ({\n    chosenFile: null,\n    data: null,\n    columnData: [],\n    array2D: null\n  }),\n  methods: {\n    importFile() {\n      if (this.chosenFile === null) {\n        this.data = \"No File Chosen\";\n      } else {\n        var reader = new FileReader();\n        var file = this.chosenFile[0];\n        // Use the javascript reader object to load the contents\n        // of the file in the v-model prop\n        reader.readAsText(file);\n        reader.onload = () => {\n          this.data = reader.result;\n          const rows = this.data.split('\\n');\n          this.array2D = Array.from({\n            length: rows[0].split(',').length\n          }, () => []);\n          for (let i = 0; i < rows.length; i++) {\n            const columns = rows[i].split(',');\n            for (let j = 0; j < columns.length; j++) {\n              this.array2D[j].push(columns[j]);\n            }\n          }\n          console.log(this.array2D);\n        };\n      }\n    },\n    plotChart() {\n      // Create 2 datasets\n      // set the dimensions and margins of the graph\n      var margin = {\n          top: 10,\n          right: 100,\n          bottom: 30,\n          left: 30\n        },\n        width = 460 - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom;\n\n      // append the svg object to the body of the page\n      var svg = d3.select(\"#my_dataviz\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n      //Read the data\n      d3.csv(\"https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/data_connectedscatter.csv\", function (data) {\n        // List of groups (here I have one group per column)\n        var allGroup = [\"valueA\", \"valueB\", \"valueC\"];\n\n        // add the options to the button\n        d3.select(\"#selectButton\").selectAll('myOptions').data(allGroup).enter().append('option').text(function (d) {\n          return d;\n        }) // text showed in the menu\n        .attr(\"value\", function (d) {\n          return d;\n        }); // corresponding value returned by the button\n\n        // A color scale: one color for each group\n        var myColor = d3.scaleOrdinal().domain(allGroup).range(d3.schemeSet2);\n\n        // Add X axis --> it is a date format\n        var x = d3.scaleLinear().domain([0, 10]).range([0, width]);\n        svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x));\n\n        // Add Y axis\n        var y = d3.scaleLinear().domain([0, 20]).range([height, 0]);\n        svg.append(\"g\").call(d3.axisLeft(y));\n\n        // Initialize line with group a\n        var line = svg.append('g').append(\"path\").datum(data).attr(\"d\", d3.line().x(function (d) {\n          return x(+d.time);\n        }).y(function (d) {\n          return y(+d.valueA);\n        })).attr(\"stroke\", function (d) {\n          return myColor(\"valueA\");\n        }).style(\"stroke-width\", 4).style(\"fill\", \"none\");\n\n        // A function that update the chart\n        function update(selectedGroup) {\n          // Create new data with the selection?\n          var dataFilter = data.map(function (d) {\n            return {\n              time: d.time,\n              value: d[selectedGroup]\n            };\n          });\n\n          // Give these new data to update line\n          line.datum(dataFilter).transition().duration(1000).attr(\"d\", d3.line().x(function (d) {\n            return x(+d.time);\n          }).y(function (d) {\n            return y(+d.value);\n          })).attr(\"stroke\", function (d) {\n            return myColor(selectedGroup);\n          });\n        }\n\n        // When the button is changed, run the updateChart function\n        d3.select(\"#selectButton\").on(\"change\", function (d) {\n          // recover the option that has been chosen\n          var selectedOption = d3.select(this).property(\"value\");\n          // run the updateChart function with this selected option\n          update(selectedOption);\n        });\n      });\n    }\n  }\n};","map":{"version":3,"mappings":";AA6BA,OAAO,KAAKA,EAAC,MAAO,IAAI;AAExB,eAAe;EACTC,IAAI,EAAE,OAAO;IACXC,UAAU,EAAE,IAAI;IAChBD,IAAI,EAAE,IAAI;IACVE,UAAU,EAAC,EAAE;IACbC,OAAO,EAAE;EACX,CAAC,CAAC;EACFC,OAAO,EAAE;IACPC,UAAU,GAAG;MAEf,IAAI,IAAI,CAACJ,UAAS,KAAM,IAAI,EAAE;QAC5B,IAAI,CAACD,IAAG,GAAI,gBAAe;MAC7B,OAAO;QACL,IAAIM,MAAK,GAAI,IAAIC,UAAU,EAAE;QAC7B,IAAIC,IAAG,GAAI,IAAI,CAACP,UAAU,CAAC,CAAC;QAC5B;QACA;QACAK,MAAM,CAACG,UAAU,CAACD,IAAI,CAAC;QACvBF,MAAM,CAACI,MAAK,GAAI,MAAM;UACtB,IAAI,CAACV,IAAG,GAAIM,MAAM,CAACK,MAAM;UACzB,MAAMC,IAAG,GAAI,IAAI,CAACZ,IAAI,CAACa,KAAK,CAAC,IAAI;UACjC,IAAI,CAACV,OAAM,GAAIW,KAAK,CAACC,IAAI,CAAC;YAAEC,MAAM,EAAEJ,IAAI,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAACG;UAAO,CAAC,EAAE,MAAM,EAAE,CAAC;UAC1E,KAAK,IAAIC,CAAC,GAAC,CAAC,EAAEA,CAAC,GAACL,IAAI,CAACI,MAAM,EAACC,CAAC,EAAE,EAAE;YAC7B,MAAMC,OAAM,GAAIN,IAAI,CAACK,CAAC,CAAC,CAACJ,KAAK,CAAC,GAAG,CAAC;YAClC,KAAK,IAAIM,IAAG,CAAC,EAAEA,CAAC,GAACD,OAAO,CAACF,MAAM,EAACG,CAAC,EAAE,EAAE;cACjC,IAAI,CAAChB,OAAO,CAACgB,CAAC,CAAC,CAACC,IAAI,CAACF,OAAO,CAACC,CAAC,CAAC,CAAC;YACpC;UACJ;UACAE,OAAO,CAACC,GAAG,CAAC,IAAI,CAACnB,OAAO;QAC1B;MACF;IACJ,CAAC;IAEDoB,SAAQ,GAAK;MACT;MACJ;MACA,IAAIC,MAAK,GAAI;UAACC,GAAG,EAAE,EAAE;UAAEC,KAAK,EAAE,GAAG;UAAEC,MAAM,EAAE,EAAE;UAAEC,IAAI,EAAE;QAAE,CAAC;QACpDC,KAAI,GAAI,GAAE,GAAIL,MAAM,CAACI,IAAG,GAAIJ,MAAM,CAACE,KAAK;QACxCI,MAAK,GAAI,GAAE,GAAIN,MAAM,CAACC,GAAE,GAAID,MAAM,CAACG,MAAM;;MAE7C;MACA,IAAII,GAAE,GAAIhC,EAAE,CAACiC,MAAM,CAAC,aAAa,EAC9BC,MAAM,CAAC,KAAK,EACVC,IAAI,CAAC,OAAO,EAAEL,KAAI,GAAIL,MAAM,CAACI,IAAG,GAAIJ,MAAM,CAACE,KAAK,EAChDQ,IAAI,CAAC,QAAQ,EAAEJ,MAAK,GAAIN,MAAM,CAACC,GAAE,GAAID,MAAM,CAACG,MAAM,EACpDM,MAAM,CAAC,GAAG,EACRC,IAAI,CAAC,WAAW,EACX,YAAW,GAAIV,MAAM,CAACI,IAAG,GAAI,GAAE,GAAIJ,MAAM,CAACC,GAAE,GAAI,GAAG,CAAC;;MAE9D;MACA1B,EAAE,CAACoC,GAAG,CAAC,iGAAiG,EAAE,UAASnC,IAAI,EAAE;QAErH;QACA,IAAIoC,QAAO,GAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ;;QAE5C;QACArC,EAAE,CAACiC,MAAM,CAAC,eAAe,EACtBK,SAAS,CAAC,WAAW,EACrBrC,IAAI,CAACoC,QAAQ,EACbE,KAAK,EAAC,CACNL,MAAM,CAAC,QAAQ,EACfM,IAAI,CAAC,UAAUC,CAAC,EAAE;UAAE,OAAOA,CAAC;QAAE,CAAC,EAAE;QAAA,CACjCN,IAAI,CAAC,OAAO,EAAE,UAAUM,CAAC,EAAE;UAAE,OAAOA,CAAC;QAAE,CAAC,GAAE;;QAE7C;QACA,IAAIC,OAAM,GAAI1C,EAAE,CAAC2C,YAAY,EAAC,CAC3BC,MAAM,CAACP,QAAQ,EACfQ,KAAK,CAAC7C,EAAE,CAAC8C,UAAU,CAAC;;QAEvB;QACA,IAAIC,IAAI/C,EAAE,CAACgD,WAAW,EAAC,CACpBJ,MAAM,CAAC,CAAC,CAAC,EAAC,EAAE,CAAC,EACbC,KAAK,CAAC,CAAE,CAAC,EAAEf,KAAI,CAAG,CAAC;QACtBE,GAAG,CAACE,MAAM,CAAC,GAAG,EACXC,IAAI,CAAC,WAAW,EAAE,cAAa,GAAIJ,MAAK,GAAI,GAAG,EAC/CkB,IAAI,CAACjD,EAAE,CAACkD,UAAU,CAACH,CAAC,CAAC,CAAC;;QAEzB;QACA,IAAII,IAAInD,EAAE,CAACgD,WAAW,EAAC,CACpBJ,MAAM,CAAE,CAAC,CAAC,EAAC,EAAE,CAAC,EACdC,KAAK,CAAC,CAAEd,MAAM,EAAE,EAAG,CAAC;QACvBC,GAAG,CAACE,MAAM,CAAC,GAAG,EACXe,IAAI,CAACjD,EAAE,CAACoD,QAAQ,CAACD,CAAC,CAAC,CAAC;;QAEvB;QACA,IAAIE,IAAG,GAAIrB,GAAE,CACVE,MAAM,CAAC,GAAG,EACVA,MAAM,CAAC,MAAM,EACXoB,KAAK,CAACrD,IAAI,EACVkC,IAAI,CAAC,GAAG,EAAEnC,EAAE,CAACqD,IAAI,EAAC,CAChBN,CAAC,CAAC,UAASN,CAAC,EAAE;UAAE,OAAOM,CAAC,CAAC,CAACN,CAAC,CAACc,IAAI;QAAE,CAAC,EACnCJ,CAAC,CAAC,UAASV,CAAC,EAAE;UAAE,OAAOU,CAAC,CAAC,CAACV,CAAC,CAACe,MAAM;QAAE,CAAC,EACxC,CACCrB,IAAI,CAAC,QAAQ,EAAE,UAASM,CAAC,EAAC;UAAE,OAAOC,OAAO,CAAC,QAAQ;QAAE,CAAC,EACtDe,KAAK,CAAC,cAAc,EAAE,CAAC,EACvBA,KAAK,CAAC,MAAM,EAAE,MAAM;;QAEzB;QACA,SAASC,MAAM,CAACC,aAAa,EAAE;UAE7B;UACA,IAAIC,UAAS,GAAI3D,IAAI,CAAC4D,GAAG,CAAC,UAASpB,CAAC,EAAC;YAAC,OAAO;cAACc,IAAI,EAAEd,CAAC,CAACc,IAAI;cAAEO,KAAK,EAACrB,CAAC,CAACkB,aAAa;YAAC;UAAE,CAAC;;UAErF;UACAN,IAAG,CACEC,KAAK,CAACM,UAAU,EAChBG,UAAU,EAAC,CACXC,QAAQ,CAAC,IAAI,EACb7B,IAAI,CAAC,GAAG,EAAEnC,EAAE,CAACqD,IAAI,EAAC,CAChBN,CAAC,CAAC,UAASN,CAAC,EAAE;YAAE,OAAOM,CAAC,CAAC,CAACN,CAAC,CAACc,IAAI;UAAE,CAAC,EACnCJ,CAAC,CAAC,UAASV,CAAC,EAAE;YAAE,OAAOU,CAAC,CAAC,CAACV,CAAC,CAACqB,KAAK;UAAE,CAAC,EACvC,CACC3B,IAAI,CAAC,QAAQ,EAAE,UAASM,CAAC,EAAC;YAAE,OAAOC,OAAO,CAACiB,aAAa;UAAE,CAAC;QAClE;;QAEA;QACA3D,EAAE,CAACiC,MAAM,CAAC,eAAe,CAAC,CAACgC,EAAE,CAAC,QAAQ,EAAE,UAASxB,CAAC,EAAE;UAChD;UACA,IAAIyB,cAAa,GAAIlE,EAAE,CAACiC,MAAM,CAAC,IAAI,CAAC,CAACkC,QAAQ,CAAC,OAAO;UACrD;UACAT,MAAM,CAACQ,cAAc;QACzB,CAAC;MAEL,CAAC;IAGC;EAEA;AAIF","names":["d3","data","chosenFile","columnData","array2D","methods","importFile","reader","FileReader","file","readAsText","onload","result","rows","split","Array","from","length","i","columns","j","push","console","log","plotChart","margin","top","right","bottom","left","width","height","svg","select","append","attr","csv","allGroup","selectAll","enter","text","d","myColor","scaleOrdinal","domain","range","schemeSet2","x","scaleLinear","call","axisBottom","y","axisLeft","line","datum","time","valueA","style","update","selectedGroup","dataFilter","map","value","transition","duration","on","selectedOption","property"],"sourceRoot":"","sources":["/Users/stlp/Desktop/Spring 2023/BIOEN 405/User Interface/MoHSES-Scenario-User-Interface/src/views/PlottingView.vue"],"sourcesContent":["<template>\n    <v-toolbar style=\"color: white\" color=\"#4b0082\">\n      <v-toolbar-title>BioGears Plotting Tool</v-toolbar-title>\n    </v-toolbar>\n    <v-main class=\"bg-grey-lighten-3\">\n      <v-container>\n        <v-card class=\"mt-n12\">\n          <v-card-text>\n            <p style=\"font-size: 20px\">Please upload your .CSV:</p>\n            <br>\n            <v-file-input v-model=\"chosenFile\"></v-file-input>\n            <v-spacer></v-spacer>\n            <v-btn @click=\"importFile\">Import File</v-btn>\n            <v-spacer></v-spacer>\n            <br>\n            <v-btn @click=\"plotChart\">Plot Chart</v-btn>\n        </v-card-text>\n        <div ref=\"chart\"></div>\n        <!-- Initialize a select button -->\n<select id=\"selectButton\"></select>\n\n<!-- Create a div where the graph will take place -->\n<div id=\"my_dataviz\"></div>\n        </v-card>\n      </v-container>\n    </v-main>\n  </template>\n  \n<script>\nimport * as d3 from 'd3';\n\nexport default {\n      data: () => ({\n        chosenFile: null,\n        data: null,\n        columnData:[],\n        array2D: null\n      }),\n      methods: {\n        importFile() {\n      \n      if (this.chosenFile === null) {\n        this.data = \"No File Chosen\"\n      } else {\n        var reader = new FileReader();\n        var file = this.chosenFile[0]\n        // Use the javascript reader object to load the contents\n        // of the file in the v-model prop\n        reader.readAsText(file);\n        reader.onload = () => {\n        this.data = reader.result;\n        const rows = this.data.split('\\n')\n        this.array2D = Array.from({ length: rows[0].split(',').length }, () => []);\n        for (let i=0; i<rows.length;i++) {\n            const columns = rows[i].split(',');\n            for (let j =0; j<columns.length;j++) {\n                this.array2D[j].push(columns[j]);\n            }\n        }\n        console.log(this.array2D)\n      }\n    }\n},\n\nplotChart () {\n    // Create 2 datasets\n// set the dimensions and margins of the graph\nvar margin = {top: 10, right: 100, bottom: 30, left: 30},\n    width = 460 - margin.left - margin.right,\n    height = 400 - margin.top - margin.bottom;\n\n// append the svg object to the body of the page\nvar svg = d3.select(\"#my_dataviz\")\n  .append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n  .append(\"g\")\n    .attr(\"transform\",\n          \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n//Read the data\nd3.csv(\"https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/data_connectedscatter.csv\", function(data) {\n\n    // List of groups (here I have one group per column)\n    var allGroup = [\"valueA\", \"valueB\", \"valueC\"]\n\n    // add the options to the button\n    d3.select(\"#selectButton\")\n      .selectAll('myOptions')\n      .data(allGroup)\n      .enter()\n      .append('option')\n      .text(function (d) { return d; }) // text showed in the menu\n      .attr(\"value\", function (d) { return d; }) // corresponding value returned by the button\n\n    // A color scale: one color for each group\n    var myColor = d3.scaleOrdinal()\n      .domain(allGroup)\n      .range(d3.schemeSet2);\n\n    // Add X axis --> it is a date format\n    var x = d3.scaleLinear()\n      .domain([0,10])\n      .range([ 0, width ]);\n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n      .call(d3.axisBottom(x));\n\n    // Add Y axis\n    var y = d3.scaleLinear()\n      .domain( [0,20])\n      .range([ height, 0 ]);\n    svg.append(\"g\")\n      .call(d3.axisLeft(y));\n\n    // Initialize line with group a\n    var line = svg\n      .append('g')\n      .append(\"path\")\n        .datum(data)\n        .attr(\"d\", d3.line()\n          .x(function(d) { return x(+d.time) })\n          .y(function(d) { return y(+d.valueA) })\n        )\n        .attr(\"stroke\", function(d){ return myColor(\"valueA\") })\n        .style(\"stroke-width\", 4)\n        .style(\"fill\", \"none\")\n\n    // A function that update the chart\n    function update(selectedGroup) {\n\n      // Create new data with the selection?\n      var dataFilter = data.map(function(d){return {time: d.time, value:d[selectedGroup]} })\n\n      // Give these new data to update line\n      line\n          .datum(dataFilter)\n          .transition()\n          .duration(1000)\n          .attr(\"d\", d3.line()\n            .x(function(d) { return x(+d.time) })\n            .y(function(d) { return y(+d.value) })\n          )\n          .attr(\"stroke\", function(d){ return myColor(selectedGroup) })\n    }\n\n    // When the button is changed, run the updateChart function\n    d3.select(\"#selectButton\").on(\"change\", function(d) {\n        // recover the option that has been chosen\n        var selectedOption = d3.select(this).property(\"value\")\n        // run the updateChart function with this selected option\n        update(selectedOption)\n    })\n\n})\n\n\n  }\n\n  }\n,\n\n\n}\n\n</script>\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}