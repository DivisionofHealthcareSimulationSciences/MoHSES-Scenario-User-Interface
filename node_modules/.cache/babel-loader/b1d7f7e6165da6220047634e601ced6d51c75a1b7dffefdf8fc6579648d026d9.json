{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"p\", {\n  style: {\n    \"font-size\": \"20px\"\n  }\n}, \"Please upload your .CSV:\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_3 = {\n  ref: \"chart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_toolbar_title = _resolveComponent(\"v-toolbar-title\");\n  const _component_v_toolbar = _resolveComponent(\"v-toolbar\");\n  const _component_v_file_input = _resolveComponent(\"v-file-input\");\n  const _component_v_card_text = _resolveComponent(\"v-card-text\");\n  const _component_v_card = _resolveComponent(\"v-card\");\n  const _component_v_container = _resolveComponent(\"v-container\");\n  const _component_v_main = _resolveComponent(\"v-main\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_v_toolbar, {\n    style: {\n      \"color\": \"white\"\n    },\n    color: \"#4b0082\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_toolbar_title, null, {\n      default: _withCtx(() => [_createTextVNode(\"BioGears Plotting Tool\")]),\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_main, {\n    class: \"bg-grey-lighten-3\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_container, null, {\n      default: _withCtx(() => [_createVNode(_component_v_card, {\n        class: \"mt-n12\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_v_card_text, null, {\n          default: _withCtx(() => [_hoisted_1, _hoisted_2, _createVNode(_component_v_file_input, {\n            modelValue: $data.file,\n            \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.file = $event),\n            accept: \".csv\",\n            label: \"Upload CSV\",\n            onChange: $options.onFileSelected\n          }, null, 8 /* PROPS */, [\"modelValue\", \"onChange\"]), _createElementVNode(\"div\", _hoisted_3, null, 512 /* NEED_PATCH */)]),\n\n          _: 1 /* STABLE */\n        })]),\n\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  })], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";gCAQgBA,oBAAuD;EAApDC,KAAuB,EAAvB;IAAA;EAAA;AAAuB,GAAC,0BAAwB;gCACnDD,oBAAI;;EAOIE,GAAG,EAAC;AAAO;;;;;;;;;6DAf/BC,aAEYC;IAFDH,KAAoB,EAApB;MAAA;IAAA,CAAoB;IAACI,KAAK,EAAC;;sBACnC,MAAyD,CAAzDF,aAAyDG;wBAAxC,MAAsB,kBAAtB,wBAAsB;;;;;MAE1CH,aAgBSI;IAhBDC,KAAK,EAAC;EAAmB;sBAC9B,MAcc,CAddL,aAccM;wBAbX,MAYS,CAZTN,aAYSO;QAZDF,KAAK,EAAC;MAAQ;0BACnB,MAUc,CAVdL,aAUcQ;4BATX,MAAuD,CAAvDC,UAAuD,EACvDC,UAAI,EACJV,aAKmBW;wBAJPC,UAAI;uEAAJA,UAAI;YACbC,MAAM,EAAC,MAAM;YACbC,KAAK,EAAC,YAAY;YACjBC,QAAM,EAAEC;+DAETnB,oBAAuB,OAAvBoB,UAAuB","names":["_createElementVNode","style","ref","_createVNode","_component_v_toolbar","color","_component_v_toolbar_title","_component_v_main","class","_component_v_container","_component_v_card","_component_v_card_text","_hoisted_1","_hoisted_2","_component_v_file_input","$data","accept","label","onChange","$options","_hoisted_3"],"sourceRoot":"","sources":["/Users/stlp/Desktop/Spring 2023/BIOEN 405/User Interface/MoHSES-Scenario-User-Interface/src/views/PlottingView.vue"],"sourcesContent":["<template>\n    <v-toolbar style=\"color: white\" color=\"#4b0082\">\n       <v-toolbar-title>BioGears Plotting Tool</v-toolbar-title>\n    </v-toolbar>\n    <v-main class=\"bg-grey-lighten-3\">\n       <v-container>\n          <v-card class=\"mt-n12\">\n             <v-card-text>\n                <p style=\"font-size: 20px\">Please upload your .CSV:</p>\n                <br>\n                <v-file-input\n                   v-model=\"file\"\n                   accept=\".csv\"\n                   label=\"Upload CSV\"\n                   @change=\"onFileSelected\"\n                   ></v-file-input>\n                   <div ref=\"chart\"></div>\n             </v-card-text>\n          </v-card>\n       </v-container>\n    </v-main>\n </template>\n <script>\n    import * as d3 from 'd3';\n\nexport default {\n  data() {\n    return {\n      file: null,\n      data: null,\n      x: null,\n      y: null,\n    };\n  },\n  methods: {\n    onFileSelected() {\n      const fileReader = new FileReader();\n      fileReader.onload = () => {\n        const data = d3.csvParse(fileReader.result);\n        this.data = data;\n        this.x = Object.keys(data[0])[0];\n        this.y = Object.keys(data[0])[1];\n        this.renderChart();\n      };\n      fileReader.readAsText(this.file);\n    },\n    renderChart() {\n      const margin = { top: 10, right: 30, bottom: 30, left: 60 };\n      const width = 500 - margin.left - margin.right;\n      const height = 300 - margin.top - margin.bottom;\n\n      const svg = d3\n        .select(this.$refs.chart)\n        .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n\n      const xScale = d3\n        .scaleLinear()\n        .domain([\n          d3.min(this.data, d => Number(d[this.x])),\n          d3.max(this.data, d => Number(d[this.x])),\n        ])\n        .range([0, width]);\n\n      const yScale = d3\n        .scaleLinear()\n        .domain([\n          d3.min(this.data, d => Number(d[this.y])),\n          d3.max(this.data, d => Number(d[this.y])),\n        ])\n        .range([height, 0]);\n\n      const xAxis = d3.axisBottom(xScale);\n      const yAxis = d3.axisLeft(yScale);\n\n      svg\n        .append(\"g\")\n        .attr(\"transform\", `translate(0, ${height})`)\n        .call(xAxis);\n\n      svg.append(\"g\").call(yAxis);\n\n      svg\n        .selectAll(\"circle\")\n        .data(this.data)\n        .enter()\n        .append(\"circle\")\n        .attr(\"cx\", d => xScale(Number(d[this.x])))\n        .attr(\"cy\", d => yScale(Number(d[this.y])))\n        .attr(\"r\", 5);\n    },\n  },\n};\n\n </script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}