{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, Fragment as _Fragment, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-45730464\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", {\n  class: \"text-center\",\n  style: {\n    \"font-size\": \"20px\"\n  }\n}, \"Please upload a simulation .CSV to visualize your results:\", -1 /* HOISTED */));\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_5 = {\n  ref: \"chart\",\n  class: \"chart-container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_toolbar_title = _resolveComponent(\"v-toolbar-title\");\n  const _component_v_toolbar = _resolveComponent(\"v-toolbar\");\n  const _component_v_card_title = _resolveComponent(\"v-card-title\");\n  const _component_v_file_input = _resolveComponent(\"v-file-input\");\n  const _component_v_col = _resolveComponent(\"v-col\");\n  const _component_v_btn = _resolveComponent(\"v-btn\");\n  const _component_v_row = _resolveComponent(\"v-row\");\n  const _component_v_select = _resolveComponent(\"v-select\");\n  const _component_v_card_text = _resolveComponent(\"v-card-text\");\n  const _component_v_card = _resolveComponent(\"v-card\");\n  const _component_v_container = _resolveComponent(\"v-container\");\n  const _component_v_main = _resolveComponent(\"v-main\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_v_toolbar, {\n    style: {\n      \"color\": \"white\"\n    },\n    color: \"#3c2d70\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_toolbar_title, null, {\n      default: _withCtx(() => [_createTextVNode(\"BioGears Plotting Tool\")]),\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_main, {\n    class: \"bg-grey-lighten-3\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_container, null, {\n      default: _withCtx(() => [_createVNode(_component_v_card, {\n        class: \"mt-n12\"\n      }, {\n        default: _withCtx(() => [_hoisted_1, _createVNode(_component_v_card_title, {\n          class: \"text-center\",\n          style: {\n            \"font-size\": \"36px\"\n          }\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"Welcome to the BioGears Plotting Tool!\")]),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_v_card_text, null, {\n          default: _withCtx(() => [_hoisted_2, _hoisted_3, _hoisted_4, _createVNode(_component_v_row, null, {\n            default: _withCtx(() => [_createVNode(_component_v_col, {\n              cols: \"10\"\n            }, {\n              default: _withCtx(() => [_createVNode(_component_v_file_input, {\n                modelValue: _ctx.chosenFile,\n                \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.chosenFile = $event)\n              }, null, 8 /* PROPS */, [\"modelValue\"])]),\n              _: 1 /* STABLE */\n            }), _createVNode(_component_v_col, null, {\n              default: _withCtx(() => [_createVNode(_component_v_btn, {\n                style: {\n                  \"color\": \"white\"\n                },\n                color: \"#3c2d70\",\n                onClick: $options.importFile\n              }, {\n                default: _withCtx(() => [_createTextVNode(\"Import File\")]),\n                _: 1 /* STABLE */\n              }, 8 /* PROPS */, [\"onClick\"])]),\n              _: 1 /* STABLE */\n            })]),\n\n            _: 1 /* STABLE */\n          }), _createVNode(_component_v_row, null, {\n            default: _withCtx(() => [_createVNode(_component_v_col, {\n              cols: \"10\"\n            }, {\n              default: _withCtx(() => [_ctx.array2D ? (_openBlock(), _createBlock(_component_v_select, {\n                key: 0,\n                \"prepend-icon\": \"mdi-camera\",\n                label: \"Please select a variable to plot.\",\n                modelValue: _ctx.selectPlot,\n                \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.selectPlot = $event),\n                id: \"selectButton\",\n                items: _ctx.allGroup.slice(1)\n              }, null, 8 /* PROPS */, [\"modelValue\", \"items\"])) : _createCommentVNode(\"v-if\", true)]),\n              _: 1 /* STABLE */\n            }), _createVNode(_component_v_col, null, {\n              default: _withCtx(() => [_ctx.selectPlot ? (_openBlock(), _createBlock(_component_v_btn, {\n                key: 0,\n                style: {\n                  \"color\": \"white\"\n                },\n                color: \"#3c2d70\",\n                onClick: $options.plotSelectedChart\n              }, {\n                default: _withCtx(() => [_createTextVNode(\"Plot Chart\")]),\n                _: 1 /* STABLE */\n              }, 8 /* PROPS */, [\"onClick\"])) : _createCommentVNode(\"v-if\", true)]),\n              _: 1 /* STABLE */\n            })]),\n\n            _: 1 /* STABLE */\n          }), _ctx.selectPlot ? (_openBlock(), _createBlock(_component_v_btn, {\n            key: 0,\n            style: {\n              \"color\": \"white\"\n            },\n            color: \"#3c2d70\",\n            onClick: $options.downloadChart\n          }, {\n            default: _withCtx(() => [_createTextVNode(\"Download Chart\")]),\n            _: 1 /* STABLE */\n          }, 8 /* PROPS */, [\"onClick\"])) : _createCommentVNode(\"v-if\", true)]),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_v_row, {\n          justify: \"center\"\n        }, {\n          default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_5, null, 512 /* NEED_PATCH */)]),\n\n          _: 1 /* STABLE */\n        })]),\n\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  })], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;gEAOIA,oBAAI;gEAGHA,oBAAI;gEACJA,oBAA6G;EAA1GC,KAAK,EAAC,aAAa;EAACC,KAAuB,EAAvB;IAAA;EAAA;GAAwB,4DAA0D;gEACzGF,oBAAI;;EAqBCG,GAAG,EAAC,OAAO;EAACF,KAAK,EAAC;;;;;;;;;;;;;;;6DAhC3BG,aAEYC;IAFDH,KAAoB,EAApB;MAAA;IAAA,CAAoB;IAACI,KAAK,EAAC;;sBACrC,MAAyD,CAAzDF,aAAyDG;wBAAxC,MAAsB,kBAAtB,wBAAsB;;;;;MAExCH,aAiCSI;IAjCDP,KAAK,EAAC;EAAmB;sBAChC,MA+Bc,CA/BdG,aA+BcK;wBA9Bb,MA6BS,CA7BTL,aA6BSM;QA7BDT,KAAK,EAAC;MAAQ;0BACrB,MAAI,CAAJU,UAAI,EACJP,aAA+GQ;UAAjGX,KAAK,EAAC,aAAa;UAACC,KAAuB,EAAvB;YAAA;UAAA;;4BAAwB,MAAsC,kBAAtC,wCAAsC;;YAChGE,aAsBcS;4BArBb,MAAI,CAAJC,UAAI,EACJC,UAA6G,EAC7GC,UAAI,EACJZ,aAOQa;8BANR,MAEQ,CAFRb,aAEQc;cAFDC,IAAI,EAAC;YAAI;gCAChB,MAAkD,CAAlDf,aAAkDgB;4BAA3BC,eAAU;2EAAVA,eAAU;;;gBAEjCjB,aAEQc;gCADR,MAAmF,CAAnFd,aAAmFkB;gBAA5EpB,KAAoB,EAApB;kBAAA;gBAAA,CAAoB;gBAACI,KAAK,EAAC,SAAS;gBAAEiB,OAAK,EAAEC;;kCAAY,MAAW,kBAAX,aAAW;;;;;;;cAG3EpB,aAOQa;8BANR,MAEQ,CAFRb,aAEQc;cAFDC,IAAI,EAAC;YAAI;gCAChB,MAA4K,CAAhIE,YAAO,kBAAnDI,aAA4KC;;gBAAlK,cAAY,EAAG,YAAY;gBAAgBC,KAAK,EAAC,mCAAmC;4BAAUN,eAAU;2EAAVA,eAAU;gBAAEO,EAAE,EAAC,cAAc;gBAAEC,KAAK,EAAER,aAAQ,CAACS,KAAK;;;gBAE5J1B,aAEQc;gCADP,MAA2G,CAAzDG,eAAU,kBAA5DI,aAA2GH;;gBAApGpB,KAAoB,EAApB;kBAAA;gBAAA,CAAoB;gBAACI,KAAK,EAAC,SAAS;gBAAoBiB,OAAK,EAAEC;;kCAAmB,MAAU,kBAAV,YAAU;;;;;;;cAIlDH,eAAU,kBAA5DI,aAA2GH;;YAApGpB,KAAoB,EAApB;cAAA;YAAA,CAAoB;YAACI,KAAK,EAAC,SAAS;YAAoBiB,OAAK,EAAEC;;8BAAe,MAAc,kBAAd,gBAAc;;;;YAEpGpB,aAEQa;UAFDc,OAAO,EAAC;QAAQ;4BACtB,MAA+C,CAA/C/B,oBAA+C,OAA/CgC,UAA+C","names":["_createElementVNode","class","style","ref","_createVNode","_component_v_toolbar","color","_component_v_toolbar_title","_component_v_main","_component_v_container","_component_v_card","_hoisted_1","_component_v_card_title","_component_v_card_text","_hoisted_2","_hoisted_3","_hoisted_4","_component_v_row","_component_v_col","cols","_component_v_file_input","_ctx","_component_v_btn","onClick","$options","_createBlock","_component_v_select","label","id","items","slice","justify","_hoisted_5"],"sourceRoot":"","sources":["/Users/stlp/Desktop/Spring 2023/BIOEN 405/User Interface/MoHSES-Scenario-User-Interface/src/views/PlottingView.vue"],"sourcesContent":["<template>\n\t<v-toolbar style=\"color: white\" color=\"#3c2d70\">\n\t\t<v-toolbar-title>BioGears Plotting Tool</v-toolbar-title>\n\t</v-toolbar>\n\t<v-main class=\"bg-grey-lighten-3\">\n\t\t<v-container>\n\t\t\t<v-card class=\"mt-n12\">\n\t\t\t\t<br>\n\t\t\t\t<v-card-title class=\"text-center\" style=\"font-size: 36px\">Welcome to the BioGears Plotting Tool!</v-card-title>\n\t\t\t\t<v-card-text>\n\t\t\t\t\t<br>\n\t\t\t\t\t<p class=\"text-center\" style=\"font-size: 20px\">Please upload a simulation .CSV to visualize your results:</p>\n\t\t\t\t\t<br>\n\t\t\t\t\t<v-row>\n\t\t\t\t\t<v-col cols=\"10\">\n\t\t\t\t\t<v-file-input v-model=\"chosenFile\"></v-file-input>\n\t\t\t\t\t</v-col>\n\t\t\t\t\t<v-col>\n\t\t\t\t\t<v-btn style=\"color: white\" color=\"#3c2d70\" @click=\"importFile\">Import File</v-btn>\n\t\t\t\t\t</v-col>\n\t\t\t\t\t</v-row>\n\t\t\t\t\t<v-row>\n\t\t\t\t\t<v-col cols=\"10\">\n\t\t\t\t\t<v-select prepend-icon = \"mdi-camera\" v-if=\"array2D\" label=\"Please select a variable to plot.\" v-model=\"selectPlot\" id=\"selectButton\" :items=\"allGroup.slice(1)\"></v-select>\n\t\t\t\t\t</v-col>\n\t\t\t\t\t<v-col>\n\t\t\t\t\t\t<v-btn style=\"color: white\" color=\"#3c2d70\" v-if=\"selectPlot\" @click=\"plotSelectedChart\">Plot Chart</v-btn>\n\t\t\t\t\t</v-col>\n\t\t\t\t\t</v-row>\n\n\t\t\t\t\t<v-btn style=\"color: white\" color=\"#3c2d70\" v-if=\"selectPlot\" @click=\"downloadChart\">Download Chart</v-btn>\n\t\t\t\t</v-card-text>\n\t\t\t\t<v-row justify=\"center\">\n\t\t\t\t\t<div ref=\"chart\" class=\"chart-container\"></div>\n\t\t\t\t</v-row>\n\t\t\t</v-card>\n\t\t</v-container>\n\t</v-main>\n</template>\n<script>\nimport vegaEmbed from 'vega-embed';\nexport default {\n\tdata: () => ({\n\t\tcurrentSpec: null,\n\t\tchosenFile: null,\n\t\tdata: null,\n\t\tcolumnData: [],\n\t\tarray2D: null,\n\t\tallGroup: [],\n\t\tselectPlot: null\n\t}),\n\tmethods: {\n\t\tasync downloadChart() {\n\t\t\t\tif(!this.currentSpec) {\n\t\t\t\t\treturn; // Exit the method if no chart has been plotted\n\t\t\t\t}\n\t\t\t\t// Get the Vega view instance from the vegaEmbed function\n\t\t\t\tconst {\n\t\t\t\t\tview\n\t\t\t\t} = await vegaEmbed(this.$refs.chart, this.currentSpec, {\n\t\t\t\t\tactions: false,\n\t\t\t\t});\n\t\t\t\t// Generate the PNG image data URL\n\t\t\t\tconst dataUrl = await view.toImageURL('png');\n\t\t\t\t// Create a temporary link element for downloading the chart\n\t\t\t\tconst link = document.createElement('a');\n\t\t\t\tlink.href = dataUrl;\n\t\t\t\tlink.download = 'chart.png';\n\t\t\t\tlink.style.display = 'none';\n\t\t\t\t// Add the link to the DOM, click it, and remove it\n\t\t\t\tdocument.body.appendChild(link);\n\t\t\t\tlink.click();\n\t\t\t\tdocument.body.removeChild(link);\n\t\t\t},\n\t\t\timportFile() {\n\t\t\t\tif(this.chosenFile === null) {\n\t\t\t\t\tthis.data = \"No File Chosen\"\n\t\t\t\t} else {\n\t\t\t\t\tvar reader = new FileReader();\n\t\t\t\t\tvar file = this.chosenFile[0]\n\t\t\t\t\t\t// Use the javascript reader object to load the contents\n\t\t\t\t\t\t// of the file in the v-model prop\n\t\t\t\t\treader.readAsText(file);\n\t\t\t\t\treader.onload = () => {\n\t\t\t\t\t\tthis.data = reader.result;\n\t\t\t\t\t\tconst rows = this.data.split('\\n')\n\t\t\t\t\t\tthis.array2D = Array.from({\n\t\t\t\t\t\t\tlength: rows[0].split(',').length\n\t\t\t\t\t\t}, () => []);\n\t\t\t\t\t\tfor(let i = 0; i < rows.length; i++) {\n\t\t\t\t\t\t\tconst columns = rows[i].split(',');\n\t\t\t\t\t\t\tfor(let j = 0; j < columns.length; j++) {\n\t\t\t\t\t\t\t\tthis.array2D[j].push(columns[j]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor(let i = 0; i < this.array2D.length; i++) {\n\t\t\t\t\t\t\tthis.allGroup.push(this.array2D[i][0])\n\t\t\t\t\t\t\tthis.array2D[i] = this.array2D[i].slice(1).map(str => parseFloat(str));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconsole.log(this.allGroup)\n\t\t\t\t\t\tconsole.log(this.array2D)\n\t\t\t\t\t\tconsole.log(this.array2D)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tplotChart(data) {\n\t\t\t\tconst xAxisData = this.array2D[0];\n\t\t\t\tconst yAxisData = data;\n\t\t\t\tconst dataset = xAxisData.map((value, index) => ({\n\t\t\t\t\txValue: value,\n\t\t\t\t\tyValue: yAxisData[index]\n\t\t\t\t}));\n\t\t\t\tconst spec = {\n\t\t\t\t\t$schema: 'https://vega.github.io/schema/vega-lite/v5.json',\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tvalues: dataset\n\t\t\t\t\t},\n\t\t\t\t\tmark: 'line',\n\t\t\t\t\ttitle: {\n\t\t\t\t\t\ttext: this.selectPlot + ' Versus Time (s)', // Set the title text\n\t\t\t\t\t\tanchor: 'middle', // Position the title (start, middle, or end)\n\t\t\t\t\t\tfontSize: 16, // Set the font size\n\t\t\t\t\t\tfontWeight: 'bold', // Set the font weight\n\t\t\t\t\t\tdy: -10, // Adjust the vertical distance between the title and the chart\n\t\t\t\t\t},\n\t\t\t\t\tencoding: {\n\t\t\t\t\t\tx: {\n\t\t\t\t\t\t\tfield: 'xValue',\n\t\t\t\t\t\t\ttype: 'quantitative',\n\t\t\t\t\t\t\ttitle: 'Time (s)'\n\t\t\t\t\t\t},\n\t\t\t\t\t\ty: {\n\t\t\t\t\t\t\tfield: 'yValue',\n\t\t\t\t\t\t\ttype: 'quantitative',\n\t\t\t\t\t\t\ttitle: this.selectPlot\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttooltip: [{\n\t\t\t\t\t\t\tfield: 'xValue',\n\t\t\t\t\t\t\ttype: 'quantitative',\n\t\t\t\t\t\t\ttitle: 'Time (s)'\n\t\t\t\t\t\t}, {\n\t\t\t\t\t\t\tfield: 'yValue',\n\t\t\t\t\t\t\ttype: 'quantitative',\n\t\t\t\t\t\t\ttitle: this.selectPlot\n\t\t\t\t\t\t}, ],\n\t\t\t\t\t},\n\t\t\t\t\tselection: {\n\t\t\t\t\t\tmySelection: {\n\t\t\t\t\t\t\ttype: 'interval',\n\t\t\t\t\t\t\tbind: 'scales', // Bind the selection to the chart scales\n\t\t\t\t\t\t\tencodings: ['x', 'y'], // Apply the selection to both x and y axes\n\t\t\t\t\t\t\tzoom: true, // Enable zooming\n\t\t\t\t\t\t\ttranslate: true, // Enable panning\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\twidth: 700, // Add the desired width\n\t\t\t\t\theight: 550, // Add the desired height\n\t\t\t\t};\n\t\t\t\tvegaEmbed(this.$refs.chart, spec, {\n\t\t\t\t\tactions: false\n\t\t\t\t});\n\t\t\t\treturn spec\n\t\t\t},\n\t\t\tplotSelectedChart() {\n\t\t\t\tif(this.array2D && this.allGroup && this.selectPlot) {\n\t\t\t\t\tthis.currentSpec = this.plotChart(this.array2D[this.allGroup.indexOf(this.selectPlot)]);\n\t\t\t\t}\n\t\t\t},\n\t}\n}\n</script>\n<style scoped>\n.chart-container {\n\tpadding-bottom: 50px;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}