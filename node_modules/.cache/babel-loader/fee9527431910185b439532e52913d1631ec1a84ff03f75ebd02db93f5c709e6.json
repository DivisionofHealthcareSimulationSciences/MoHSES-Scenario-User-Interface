{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as d3 from 'd3';\nexport default {\n  data: () => ({\n    chosenFile: null,\n    data: null,\n    columnData: [],\n    array2D: null,\n    allGroup: [],\n    selectPlot: null\n  }),\n  methods: {\n    importFile() {\n      if (this.chosenFile === null) {\n        this.data = \"No File Chosen\";\n      } else {\n        var reader = new FileReader();\n        var file = this.chosenFile[0];\n        // Use the javascript reader object to load the contents\n        // of the file in the v-model prop\n        reader.readAsText(file);\n        reader.onload = () => {\n          this.data = reader.result;\n          const rows = this.data.split('\\n');\n          this.array2D = Array.from({\n            length: rows[0].split(',').length\n          }, () => []);\n          for (let i = 0; i < rows.length; i++) {\n            const columns = rows[i].split(',');\n            for (let j = 0; j < columns.length; j++) {\n              this.array2D[j].push(columns[j]);\n            }\n          }\n          for (let i = 0; i < this.array2D.length; i++) {\n            this.allGroup.push(this.array2D[i][0]);\n            this.array2D[i] = this.array2D[i].slice(1).map(str => parseInt(str));\n          }\n          console.log(this.allGroup);\n          console.log(this.array2D);\n          console.log(this.array2D);\n        };\n      }\n    },\n    plotChart(data) {\n      const margin = {\n        top: 20,\n        right: 20,\n        bottom: 30,\n        left: 50\n      };\n      const width = 600 - margin.left - margin.right;\n      const height = 400 - margin.top - margin.bottom;\n\n      // Define the scales for the X and Y axes\n      const xScale = d3.scaleLinear().domain([d3.min(this.array2D[0]), d3.max(this.array2D[0])]).range([0, width]);\n      const yScale = d3.scaleLinear().domain([0, d3.max(data)]).range([height, 0]);\n\n      // Define the line function\n      const line = d3.line().x((d, i) => xScale(this.array2D[0][i])).y((d, i) => yScale(data[i]));\n\n      // Create the SVG element\n      const svg = d3.select(this.$refs.chart).append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n      // Create the line path\n      svg.append('path').datum(this.array2D[0]).attr('d', line).attr('fill', 'none').attr('stroke', 'steelblue').attr('stroke-width', 2);\n\n      // Create the X and Y axes\n      const xAxis = d3.axisBottom(xScale);\n      const yAxis = d3.axisLeft(yScale);\n      svg.append('g').attr('transform', `translate(0, ${height})`).call(xAxis);\n      svg.append('g').call(yAxis);\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["d3","data","chosenFile","columnData","array2D","allGroup","selectPlot","methods","importFile","reader","FileReader","file","readAsText","onload","result","rows","split","Array","from","length","i","columns","j","push","slice","map","str","parseInt","console","log","plotChart","margin","top","right","bottom","left","width","height","xScale","scaleLinear","domain","min","max","range","yScale","line","x","d","y","svg","select","$refs","chart","append","attr","datum","xAxis","axisBottom","yAxis","axisLeft","call"],"sourceRoot":"","sources":["/Users/stlp/Desktop/Spring 2023/BIOEN 405/User Interface/MoHSES-Scenario-User-Interface/src/views/PlottingView.vue"],"sourcesContent":["<template>\n    <v-toolbar style=\"color: white\" color=\"#4b0082\">\n      <v-toolbar-title>BioGears Plotting Tool</v-toolbar-title>\n    </v-toolbar>\n    <v-main class=\"bg-grey-lighten-3\">\n      <v-container>\n        <v-card class=\"mt-n12\">\n          <v-card-text>\n            <p style=\"font-size: 20px\">Please upload your .CSV:</p>\n            <br>\n            <v-file-input v-model=\"chosenFile\"></v-file-input>\n            <v-spacer></v-spacer>\n\n            <v-btn @click=\"importFile\">Import File</v-btn>\n            \n\n    \n            <br>\n            <br>\n \n            <v-row v-if=\"array2D\">\n            \n                <v-col cols=\"6\">\n                    <v-select v-model=\"selectPlot\" id=\"selectButton\" :items=\"allGroup.slice(1)\"></v-select>\n                </v-col>\n                <v-col v-if=\"selectPlot\" cols=\"12\">\n                    <v-btn @click=\"plotChart()\">Plot Chart</v-btn>\n                </v-col>\n                \n            </v-row>\n        </v-card-text>\n        \n        <div ref=\"chart\"></div>\n        </v-card>\n      </v-container>\n    </v-main>\n  </template>\n  \n<script>\nimport * as d3 from 'd3';\n\nexport default {\n      data: () => ({\n        chosenFile: null,\n        data: null,\n        columnData:[],\n        array2D: null,\n        allGroup: [],\n        selectPlot: null\n      }),\n      methods: {\n        importFile() {\n      \n      if (this.chosenFile === null) {\n        this.data = \"No File Chosen\"\n      } else {\n        var reader = new FileReader();\n        var file = this.chosenFile[0]\n        // Use the javascript reader object to load the contents\n        // of the file in the v-model prop\n        reader.readAsText(file);\n        reader.onload = () => {\n        this.data = reader.result;\n        const rows = this.data.split('\\n')\n        this.array2D = Array.from({ length: rows[0].split(',').length }, () => []);\n        for (let i=0; i<rows.length;i++) {\n            const columns = rows[i].split(',');\n            for (let j =0; j<columns.length;j++) {\n                this.array2D[j].push(columns[j]);\n            }\n            \n        }\n        for (let i=0; i<this.array2D.length;i++) {\n        this.allGroup.push(this.array2D[i][0])\n        this.array2D[i] = this.array2D[i].slice(1).map(str => parseInt(str));\n    }\n    console.log(this.allGroup)\n    console.log(this.array2D)\n        console.log(this.array2D)\n\n      }\n    }\n},\n\nplotChart (data) {\n    const margin = { top: 20, right: 20, bottom: 30, left: 50 };\n    const width = 600 - margin.left - margin.right;\n    const height = 400 - margin.top - margin.bottom;\n\n\n    \n        \n\n\n    // Define the scales for the X and Y axes\n    const xScale = d3.scaleLinear()\n      .domain([d3.min(this.array2D[0]), d3.max(this.array2D[0])])\n      .range([0, width]);\n\n    const yScale = d3.scaleLinear()\n      .domain([0, d3.max(data)])\n      .range([height, 0]);\n\n    // Define the line function\n    const line = d3.line()\n      .x((d, i) => xScale(this.array2D[0][i]))\n      .y((d, i) => yScale(data[i]));\n\n    // Create the SVG element\n    const svg = d3.select(this.$refs.chart)\n      .append('svg')\n      .attr('width', width + margin.left + margin.right)\n      .attr('height', height + margin.top + margin.bottom)\n      .append('g')\n      .attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n    // Create the line path\n    svg.append('path')\n      .datum(this.array2D[0])\n      .attr('d', line)\n      .attr('fill', 'none')\n      .attr('stroke', 'steelblue')\n      .attr('stroke-width', 2);\n\n    // Create the X and Y axes\n    const xAxis = d3.axisBottom(xScale);\n    const yAxis = d3.axisLeft(yScale);\n\n    svg.append('g')\n      .attr('transform', `translate(0, ${height})`)\n      .call(xAxis);\n\n    svg.append('g')\n      .call(yAxis);\n  }\n\n  }\n,\n\n\n}\n\n</script>\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}