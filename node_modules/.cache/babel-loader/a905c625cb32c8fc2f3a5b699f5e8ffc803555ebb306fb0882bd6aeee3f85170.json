{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, Fragment as _Fragment, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"p\", {\n  style: {\n    \"font-size\": \"20px\"\n  }\n}, \"Please upload your .CSV:\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_5 = {\n  ref: \"chart\"\n};\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_toolbar_title = _resolveComponent(\"v-toolbar-title\");\n  const _component_v_toolbar = _resolveComponent(\"v-toolbar\");\n  const _component_v_file_input = _resolveComponent(\"v-file-input\");\n  const _component_v_spacer = _resolveComponent(\"v-spacer\");\n  const _component_v_btn = _resolveComponent(\"v-btn\");\n  const _component_v_select = _resolveComponent(\"v-select\");\n  const _component_v_col = _resolveComponent(\"v-col\");\n  const _component_v_row = _resolveComponent(\"v-row\");\n  const _component_v_card_text = _resolveComponent(\"v-card-text\");\n  const _component_v_card = _resolveComponent(\"v-card\");\n  const _component_v_container = _resolveComponent(\"v-container\");\n  const _component_v_main = _resolveComponent(\"v-main\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_v_toolbar, {\n    style: {\n      \"color\": \"white\"\n    },\n    color: \"#4b0082\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_toolbar_title, null, {\n      default: _withCtx(() => [_createTextVNode(\"BioGears Plotting Tool\")]),\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_main, {\n    class: \"bg-grey-lighten-3\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_container, null, {\n      default: _withCtx(() => [_createVNode(_component_v_card, {\n        class: \"mt-n12\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_v_card_text, null, {\n          default: _withCtx(() => [_hoisted_1, _hoisted_2, _createVNode(_component_v_file_input, {\n            modelValue: _ctx.chosenFile,\n            \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.chosenFile = $event)\n          }, null, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_v_spacer), _createVNode(_component_v_btn, {\n            onClick: $options.importFile\n          }, {\n            default: _withCtx(() => [_createTextVNode(\"Import File\")]),\n            _: 1 /* STABLE */\n          }, 8 /* PROPS */, [\"onClick\"]), _hoisted_3, _hoisted_4, _ctx.array2D ? (_openBlock(), _createBlock(_component_v_row, {\n            key: 0\n          }, {\n            default: _withCtx(() => [_createVNode(_component_v_col, {\n              cols: \"12\"\n            }, {\n              default: _withCtx(() => [_createVNode(_component_v_select, {\n                modelValue: _ctx.selectPlot,\n                \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.selectPlot = $event),\n                id: \"selectButton\",\n                items: _ctx.allGroup.slice(1)\n              }, null, 8 /* PROPS */, [\"modelValue\", \"items\"])]),\n              _: 1 /* STABLE */\n            }), _ctx.selectPlot ? (_openBlock(), _createBlock(_component_v_col, {\n              key: 0,\n              cols: \"12\"\n            }, {\n              default: _withCtx(() => [_createVNode(_component_v_btn, {\n                onClick: _cache[2] || (_cache[2] = $event => $options.plotChart(_ctx.array2D[_ctx.allGroup.indexOf(_ctx.selectPlot)]))\n              }, {\n                default: _withCtx(() => [_createTextVNode(\"Plot Chart\")]),\n                _: 1 /* STABLE */\n              })]),\n\n              _: 1 /* STABLE */\n            })) : _createCommentVNode(\"v-if\", true)]),\n            _: 1 /* STABLE */\n          })) : _createCommentVNode(\"v-if\", true)]),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_v_row, {\n          justify: \"center\"\n        }, {\n          default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_5, null, 512 /* NEED_PATCH */), _hoisted_6]),\n          _: 1 /* STABLE */\n        })]),\n\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  })], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";gCAQYA,oBAAuD;EAApDC,KAAuB,EAAvB;IAAA;EAAA;AAAuB,GAAC,0BAAwB;gCACnDD,oBAAI;gCAQJA,oBAAI;gCACJA,oBAAI;;EAcHE,GAAG,EAAC;AAAO;gCAChBF,oBAAI;;;;;;;;;;;;;;;6DAhCRG,aAEYC;IAFDH,KAAoB,EAApB;MAAA;IAAA,CAAoB;IAACI,KAAK,EAAC;;sBACpC,MAAyD,CAAzDF,aAAyDG;wBAAxC,MAAsB,kBAAtB,wBAAsB;;;;;MAEzCH,aAiCSI;IAjCDC,KAAK,EAAC;EAAmB;sBAC/B,MA+Bc,CA/BdL,aA+BcM;wBA9BZ,MA6BS,CA7BTN,aA6BSO;QA7BDF,KAAK,EAAC;MAAQ;0BACpB,MAuBY,CAvBZL,aAuBYQ;4BAtBV,MAAuD,CAAvDC,UAAuD,EACvDC,UAAI,EACJV,aAAkDW;wBAA3BC,eAAU;uEAAVA,eAAU;mDACjCZ,aAAqBa,sBAErBb,aAA8Cc;YAAtCC,OAAK,EAAEC;UAAU;8BAAE,MAAW,kBAAX,aAAW;;0CAItCC,UAAI,EACJC,UAAI,EAESN,YAAO,kBAApBO,aASQC;YAAAC;UAAA;8BAPJ,MAEQ,CAFRrB,aAEQsB;cAFDC,IAAI,EAAC;YAAI;gCACZ,MAAuF,CAAvFvB,aAAuFwB;4BAApEZ,eAAU;2EAAVA,eAAU;gBAAEa,EAAE,EAAC,cAAc;gBAAEC,KAAK,EAAEd,aAAQ,CAACe,KAAK;;;gBAE9Df,eAAU,kBAAvBO,aAEQG;;cAFiBC,IAAI,EAAC;;gCAC1B,MAAmF,CAAnFvB,aAAmFc;gBAA3EC,OAAK,sCAAEC,kBAAS,CAACJ,YAAO,CAACA,aAAQ,CAACgB,OAAO,CAAChB,eAAU;;kCAAK,MAAU,kBAAV,YAAU;;;;;;;;;YAKvFZ,aAGIoB;UAHGS,OAAO,EAAC;QAAQ;4BACvB,MAAuB,CAAvBhC,oBAAuB,OAAvBiC,UAAuB,+BACvBC,UAAI","names":["_createElementVNode","style","ref","_createVNode","_component_v_toolbar","color","_component_v_toolbar_title","_component_v_main","class","_component_v_container","_component_v_card","_component_v_card_text","_hoisted_1","_hoisted_2","_component_v_file_input","_ctx","_component_v_spacer","_component_v_btn","onClick","$options","_hoisted_3","_hoisted_4","_createBlock","_component_v_row","key","_component_v_col","cols","_component_v_select","id","items","slice","indexOf","justify","_hoisted_5","_hoisted_6"],"sourceRoot":"","sources":["/Users/stlp/Desktop/Spring 2023/BIOEN 405/User Interface/MoHSES-Scenario-User-Interface/src/views/PlottingView.vue"],"sourcesContent":["<template>\n    <v-toolbar style=\"color: white\" color=\"#4b0082\">\n      <v-toolbar-title>BioGears Plotting Tool</v-toolbar-title>\n    </v-toolbar>\n    <v-main class=\"bg-grey-lighten-3\">\n      <v-container>\n        <v-card class=\"mt-n12\">\n          <v-card-text>\n            <p style=\"font-size: 20px\">Please upload your .CSV:</p>\n            <br>\n            <v-file-input v-model=\"chosenFile\"></v-file-input>\n            <v-spacer></v-spacer>\n\n            <v-btn @click=\"importFile\">Import File</v-btn>\n            \n\n    \n            <br>\n            <br>\n \n            <v-row v-if=\"array2D\">\n            \n                <v-col cols=\"12\">\n                    <v-select v-model=\"selectPlot\" id=\"selectButton\" :items=\"allGroup.slice(1)\"></v-select>\n                </v-col>\n                <v-col v-if=\"selectPlot\" cols=\"12\">\n                    <v-btn @click=\"plotChart(array2D[allGroup.indexOf(selectPlot)])\">Plot Chart</v-btn>\n                </v-col>\n                \n            </v-row>\n        </v-card-text>\n        <v-row justify=\"center\">\n        <div ref=\"chart\"></div>\n        <br>\n    </v-row>\n        </v-card>\n      </v-container>\n    </v-main>\n  </template>\n  \n<script>\nimport * as d3 from 'd3';\n\nexport default {\n      data: () => ({\n        chosenFile: null,\n        data: null,\n        columnData:[],\n        array2D: null,\n        allGroup: [],\n        selectPlot: null\n      }),\n      methods: {\n        importFile() {\n      \n      if (this.chosenFile === null) {\n        this.data = \"No File Chosen\"\n      } else {\n        var reader = new FileReader();\n        var file = this.chosenFile[0]\n        // Use the javascript reader object to load the contents\n        // of the file in the v-model prop\n        reader.readAsText(file);\n        reader.onload = () => {\n        this.data = reader.result;\n        const rows = this.data.split('\\n')\n        this.array2D = Array.from({ length: rows[0].split(',').length }, () => []);\n        for (let i=0; i<rows.length;i++) {\n            const columns = rows[i].split(',');\n            for (let j =0; j<columns.length;j++) {\n                this.array2D[j].push(columns[j]);\n            }\n            \n        }\n        for (let i=0; i<this.array2D.length;i++) {\n        this.allGroup.push(this.array2D[i][0])\n        this.array2D[i] = this.array2D[i].slice(1).map(str => parseFloat(str));\n    }\n    console.log(this.allGroup)\n    console.log(this.array2D)\n        console.log(this.array2D)\n\n      }\n    }\n},\n\nplotChart (data) {\n    const margin = { top: 50, right: 50, bottom: 50, left: 50 };\n    const width = 800 - margin.left - margin.right;\n    const height = 500 - margin.top - margin.bottom;\n\n    console.log(data)\n    d3.select(this.$refs.chart).select('svg').remove();\n\n    \n        \n\n\n    // Define the scales for the X and Y axes\n    const xScale = d3.scaleLinear()\n      .domain([d3.min(this.array2D[0]), d3.max(this.array2D[0])])\n      .range([0, width]);\n\n    const yScale = d3.scaleLinear()\n      .domain([0, d3.max(data)])\n      .range([height, 0]);\n\n// This allows to find the closest X index of the mouse:\n  var bisect = d3.bisector(this.array2D[0]).left;\n\n  // Create the circle that travels along the curve of chart\n  var focus = svg\n    .append('g')\n    .append('circle')\n      .style(\"fill\", \"none\")\n      .attr(\"stroke\", \"black\")\n      .attr('r', 8.5)\n      .style(\"opacity\", 0)\n\n  // Create the text that travels along the curve of chart\n  var focusText = svg\n    .append('g')\n    .append('text')\n      .style(\"opacity\", 0)\n      .attr(\"text-anchor\", \"left\")\n      .attr(\"alignment-baseline\", \"middle\")\n\n    // Define the line function\n    const line = d3.line()\n      .x((d, i) => xScale(this.array2D[0][i]))\n      .y((d, i) => yScale(data[i]));\n\n    // Create the SVG element\n    const svg = d3.select(this.$refs.chart)\n      .append('svg')\n      .attr('width', width + margin.left + margin.right)\n      .attr('height', height + margin.top + margin.bottom)\n      .append('g')\n      .attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n  // Add the title\n  svg.append('text')\n    .attr('x', width / 2)\n    .attr('y', 0 - margin.top / 2)\n    .attr('text-anchor', 'middle')\n    .attr('font-size', '24px')\n    .text('My Chart Title');\n\n\n    // Create the line path\n    svg.append('path')\n      .datum(this.array2D[0])\n      .attr('d', line)\n      .attr('fill', 'none')\n      .attr('stroke', 'steelblue')\n      .attr('stroke-width', 2);\n\n      svg\n    .append('rect')\n    .style(\"fill\", \"none\")\n    .style(\"pointer-events\", \"all\")\n    .attr('width', width)\n    .attr('height', height)\n    .on('mouseover', mouseover)\n    // .on('mousemove', mousemove)\n    .on('mouseout', mouseout);\n\n    function mouseover() {\n    focus.style(\"opacity\", 1)\n    focusText.style(\"opacity\",1)\n  }\n\n//   function mousemove() {\n//     // recover coordinate we need\n//     var x0 = xScale.invert(d3.mouse(this)[0]);\n//     var i = bisect(this.array2D[0], data, x0, 1);\n//     focus\n//       .attr(\"cx\", xScale(this.array2D[0][i]))\n//       .attr(\"cy\", yScale(data[i]))\n//     focusText\n//       .html(\"x:\" + this.array2D[0][i] + \"  -  \" + \"y:\" + data[i])\n//       .attr(\"x\", xScale(this.array2D[0][i])+15)\n//       .attr(\"y\", yScale(data[i]))\n//     }\n//   function mouseout() {\n//     focus.style(\"opacity\", 0)\n//     focusText.style(\"opacity\", 0)\n//   }\n\n\n      // Add the X axis label\n  svg.append('text')\n    .attr('transform', `translate(${width / 2}, ${height + margin.bottom / 1.3})`)\n    .attr('text-anchor', 'middle')\n    .attr('font-size', '16px')\n    .text('X Axis Label');\n\n  // Add the Y axis label\n  svg.append('text')\n    .attr('transform', 'rotate(-90)')\n    .attr('x', 0 - height / 2)\n    .attr('y', 0 - margin.left)\n    .attr('dy', '1em')\n    .attr('text-anchor', 'middle')\n    .attr('font-size', '16px')\n    .text('Y Axis Label');\n\n\n    // Create the X and Y axes\n    const xAxis = d3.axisBottom(xScale);\n    const yAxis = d3.axisLeft(yScale);\n\n    svg.append('g')\n      .attr('transform', `translate(0, ${height})`)\n      .call(xAxis);\n\n    svg.append('g')\n      .call(yAxis);\n\n\n     // Add legend\nsvg.append('rect')\n  .attr('x', width - 100)\n  .attr('y', 50)\n  .attr('width', 10)\n  .attr('height', 10)\n  .style('fill', 'steelblue');\n\nsvg.append('text')\n  .attr('x', width - 85)\n  .attr('y', 60)\n  .text('Legend Label');\n\n\n\n  \n  }\n\n\n  \n\n  }\n,\n\n\n}\n\n</script>\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}