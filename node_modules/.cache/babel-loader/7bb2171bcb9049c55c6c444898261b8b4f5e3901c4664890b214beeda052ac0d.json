{"ast":null,"code":"\"use strict\";\n\n// Note: This regex matches even invalid JSON strings, but since we’re\n// working on the output of `JSON.stringify` we know that only valid strings\n// are present (unless the user supplied a weird `options.indent` but in\n// that case we don’t care since the output would be invalid anyway).\nrequire(\"core-js/modules/es.array.push.js\");\nvar stringOrChar = /(\"(?:[^\\\\\"]|\\\\.)*\")|[:,]/g;\nmodule.exports = function stringify(passedObj, options) {\n  var indent, maxLength, replacer;\n  options = options || {};\n  indent = JSON.stringify([1], undefined, options.indent === undefined ? 2 : options.indent).slice(2, -3);\n  maxLength = indent === \"\" ? Infinity : options.maxLength === undefined ? 80 : options.maxLength;\n  replacer = options.replacer;\n  return function _stringify(obj, currentIndent, reserved) {\n    // prettier-ignore\n    var end, index, items, key, keyPart, keys, length, nextIndent, prettified, start, string, value;\n    if (obj && typeof obj.toJSON === \"function\") {\n      obj = obj.toJSON();\n    }\n    string = JSON.stringify(obj, replacer);\n    if (string === undefined) {\n      return string;\n    }\n    length = maxLength - currentIndent.length - reserved;\n    if (string.length <= length) {\n      prettified = string.replace(stringOrChar, function (match, stringLiteral) {\n        return stringLiteral || match + \" \";\n      });\n      if (prettified.length <= length) {\n        return prettified;\n      }\n    }\n    if (replacer != null) {\n      obj = JSON.parse(string);\n      replacer = undefined;\n    }\n    if (typeof obj === \"object\" && obj !== null) {\n      nextIndent = currentIndent + indent;\n      items = [];\n      index = 0;\n      if (Array.isArray(obj)) {\n        start = \"[\";\n        end = \"]\";\n        length = obj.length;\n        for (; index < length; index++) {\n          items.push(_stringify(obj[index], nextIndent, index === length - 1 ? 0 : 1) || \"null\");\n        }\n      } else {\n        start = \"{\";\n        end = \"}\";\n        keys = Object.keys(obj);\n        length = keys.length;\n        for (; index < length; index++) {\n          key = keys[index];\n          keyPart = JSON.stringify(key) + \": \";\n          value = _stringify(obj[key], nextIndent, keyPart.length + (index === length - 1 ? 0 : 1));\n          if (value !== undefined) {\n            items.push(keyPart + value);\n          }\n        }\n      }\n      if (items.length > 0) {\n        return [start, indent + items.join(\",\\n\" + nextIndent), end].join(\"\\n\" + currentIndent);\n      }\n    }\n    return string;\n  }(passedObj, \"\", 0);\n};","map":{"version":3,"names":["stringOrChar","module","exports","stringify","passedObj","options","indent","maxLength","replacer","JSON","undefined","slice","Infinity","_stringify","obj","currentIndent","reserved","end","index","items","key","keyPart","keys","length","nextIndent","prettified","start","string","value","toJSON","replace","match","stringLiteral","parse","Array","isArray","push","Object","join"],"sources":["C:/Users/sanik/Downloads/capstone/MoHSES-Scenario-User-Interface/node_modules/json-stringify-pretty-compact/index.js"],"sourcesContent":["\"use strict\";\r\n\r\n// Note: This regex matches even invalid JSON strings, but since we’re\r\n// working on the output of `JSON.stringify` we know that only valid strings\r\n// are present (unless the user supplied a weird `options.indent` but in\r\n// that case we don’t care since the output would be invalid anyway).\r\nvar stringOrChar = /(\"(?:[^\\\\\"]|\\\\.)*\")|[:,]/g;\r\n\r\nmodule.exports = function stringify(passedObj, options) {\r\n  var indent, maxLength, replacer;\r\n\r\n  options = options || {};\r\n  indent = JSON.stringify(\r\n    [1],\r\n    undefined,\r\n    options.indent === undefined ? 2 : options.indent\r\n  ).slice(2, -3);\r\n  maxLength =\r\n    indent === \"\"\r\n      ? Infinity\r\n      : options.maxLength === undefined\r\n      ? 80\r\n      : options.maxLength;\r\n  replacer = options.replacer;\r\n\r\n  return (function _stringify(obj, currentIndent, reserved) {\r\n    // prettier-ignore\r\n    var end, index, items, key, keyPart, keys, length, nextIndent, prettified, start, string, value;\r\n\r\n    if (obj && typeof obj.toJSON === \"function\") {\r\n      obj = obj.toJSON();\r\n    }\r\n\r\n    string = JSON.stringify(obj, replacer);\r\n\r\n    if (string === undefined) {\r\n      return string;\r\n    }\r\n\r\n    length = maxLength - currentIndent.length - reserved;\r\n\r\n    if (string.length <= length) {\r\n      prettified = string.replace(\r\n        stringOrChar,\r\n        function (match, stringLiteral) {\r\n          return stringLiteral || match + \" \";\r\n        }\r\n      );\r\n      if (prettified.length <= length) {\r\n        return prettified;\r\n      }\r\n    }\r\n\r\n    if (replacer != null) {\r\n      obj = JSON.parse(string);\r\n      replacer = undefined;\r\n    }\r\n\r\n    if (typeof obj === \"object\" && obj !== null) {\r\n      nextIndent = currentIndent + indent;\r\n      items = [];\r\n      index = 0;\r\n\r\n      if (Array.isArray(obj)) {\r\n        start = \"[\";\r\n        end = \"]\";\r\n        length = obj.length;\r\n        for (; index < length; index++) {\r\n          items.push(\r\n            _stringify(obj[index], nextIndent, index === length - 1 ? 0 : 1) ||\r\n              \"null\"\r\n          );\r\n        }\r\n      } else {\r\n        start = \"{\";\r\n        end = \"}\";\r\n        keys = Object.keys(obj);\r\n        length = keys.length;\r\n        for (; index < length; index++) {\r\n          key = keys[index];\r\n          keyPart = JSON.stringify(key) + \": \";\r\n          value = _stringify(\r\n            obj[key],\r\n            nextIndent,\r\n            keyPart.length + (index === length - 1 ? 0 : 1)\r\n          );\r\n          if (value !== undefined) {\r\n            items.push(keyPart + value);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (items.length > 0) {\r\n        return [start, indent + items.join(\",\\n\" + nextIndent), end].join(\r\n          \"\\n\" + currentIndent\r\n        );\r\n      }\r\n    }\r\n\r\n    return string;\r\n  })(passedObj, \"\", 0);\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}