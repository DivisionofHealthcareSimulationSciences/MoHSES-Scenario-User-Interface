{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as d3 from 'd3';\nexport default {\n  data: () => ({\n    chosenFile: null,\n    data: null,\n    columnData: [],\n    array2D: null,\n    allGroup: [],\n    selectPlot: null\n  }),\n  methods: {\n    importFile() {\n      if (this.chosenFile === null) {\n        this.data = \"No File Chosen\";\n      } else {\n        var reader = new FileReader();\n        var file = this.chosenFile[0];\n        // Use the javascript reader object to load the contents\n        // of the file in the v-model prop\n        reader.readAsText(file);\n        reader.onload = () => {\n          this.data = reader.result;\n          const rows = this.data.split('\\n');\n          this.array2D = Array.from({\n            length: rows[0].split(',').length\n          }, () => []);\n          for (let i = 0; i < rows.length; i++) {\n            const columns = rows[i].split(',');\n            for (let j = 0; j < columns.length; j++) {\n              this.array2D[j].push(columns[j]);\n            }\n          }\n          for (let i = 0; i < this.array2D.length; i++) {\n            this.allGroup.push(this.array2D[i][0]);\n            this.array2D[i] = this.array2D[i].slice(1).map(str => parseInt(str));\n          }\n          console.log(this.allGroup);\n          console.log(this.array2D);\n          console.log(this.array2D);\n        };\n      }\n    }\n  }\n};\n\n// plotChart () {\n// set the dimensions and margins of the graph\nvar margin = {\n    top: 10,\n    right: 30,\n    bottom: 30,\n    left: 50\n  },\n  width = 460 - margin.left - margin.right,\n  height = 400 - margin.top - margin.bottom;\n\n// append the svg object to the body of the page\nvar svg = d3.select(this.$refs.chart).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n// Assume that `data` is a 2D array where the first row contains X-axis values and the second row contains Y-axis values\n// const data = [      [1, 2, 3, 4, 5], // X-axis values\n//   [1, 3, 2, 4, 5]  // Y-axis values\n// ];\n\n// var myColor = d3.scaleOrdinal()\n//   .domain(this.allGroup)\n//   .range(d3.schemeSet2);\n\n// Define the scales for the X and Y axes\n// Initialise a X axis:\nvar x = d3.scaleLinear().range([0, width]);\nvar xAxis = d3.axisBottom().scale(x);\nsvg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").attr(\"class\", \"myXaxis\");\n\n// Initialize an Y axis\nvar y = d3.scaleLinear().range([height, 0]);\nvar yAxis = d3.axisLeft().scale(y);\nsvg.append(\"g\").attr(\"class\", \"myYaxis\");\n\n// Create a function that takes a dataset as input and update the plot:\nfunction update(data1, data2) {\n  console.log('running update');\n  // Create the X axis:\n  x.domain([0, d3.max(data1)]);\n  svg.selectAll(\".myXaxis\").transition().duration(3000).call(xAxis);\n\n  // create the Y axis\n  y.domain([0, d3.max(data2)]);\n  svg.selectAll(\".myYaxis\").transition().duration(3000).call(yAxis);\n  const line = d3.line().x((d, i) => data1[i]).y((d, i) => data2[i]);\n\n  // Create the line path\n  svg.append('path').datum(data1).attr('d', line).attr('fill', 'none').attr('stroke', 'steelblue').attr('stroke-width', 2);\n\n  // Create the X and Y axes\n  // const xAxis = d3.axisBottom(xScale);\n  // const yAxis = d3.axisLeft(yScale);\n\n  svg.append('g').attr('transform', `translate(0, ${height})`).call(xAxis);\n  svg.append('g').call(yAxis);\n  update(this.array2D[0], this.array2D[1]);\n\n  // // Define the line function\n  // const line = d3.line()\n  //   .x((d, i) => xScale(this.array2D[0][i]))\n  //   .y((d, i) => yScale(this.array2D[1][i]));\n\n  // Create the line path\n  // svg.append('path')\n  //   .datum(this.array2D[0])\n  //   .attr('d', line)\n  //   .attr('fill', 'none')\n  //   .attr('stroke', 'steelblue')\n  //   .attr('stroke-width', 2);\n\n  // // Create the X and Y axes\n  // // const xAxis = d3.axisBottom(xScale);\n  // // const yAxis = d3.axisLeft(yScale);\n\n  // svg.append('g')\n  //   .attr('transform', `translate(0, ${height})`)\n  //   .call(xAxis);\n\n  // svg.append('g')\n  //   .call(yAxis);\n  //   }\n\n  //   }\n  // ,\n}","map":{"version":3,"mappings":"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","names":["d3","data","chosenFile","columnData","array2D","allGroup","selectPlot","methods","importFile","reader","FileReader","file","readAsText","onload","result","rows","split","Array","from","length","i","columns","j","push","slice","map","str","parseInt","console","log","margin","top","right","bottom","left","width","height","svg","select","$refs","chart","append","attr","x","scaleLinear","range","xAxis","axisBottom","scale","y","yAxis","axisLeft","update","data1","data2","domain","max","selectAll","transition","duration","call","line","d","datum"],"sourceRoot":"","sources":["/Users/stlp/Desktop/Spring 2023/BIOEN 405/User Interface/MoHSES-Scenario-User-Interface/src/views/PlottingView.vue"],"sourcesContent":["<template>\n    <v-toolbar style=\"color: white\" color=\"#4b0082\">\n      <v-toolbar-title>BioGears Plotting Tool</v-toolbar-title>\n    </v-toolbar>\n    <v-main class=\"bg-grey-lighten-3\">\n      <v-container>\n        <v-card class=\"mt-n12\">\n          <v-card-text>\n            <p style=\"font-size: 20px\">Please upload your .CSV:</p>\n            <br>\n            <v-file-input v-model=\"chosenFile\"></v-file-input>\n            <v-spacer></v-spacer>\n\n            <v-btn @click=\"importFile\">Import File</v-btn>\n            \n\n    \n            <br>\n            <br>\n \n            <v-row v-if=\"array2D\">\n            \n                <v-col cols=\"2\">\n                    <v-btn @click=\"plotChart\">Plot Chart</v-btn>\n                </v-col>\n                <v-col cols=\"10\">\n                    <v-select @change=\"update(array2D[0], array2D[allGroup.indexOf(selectPlot)])\" v-model=\"selectPlot\" id=\"selectButton\" :items=\"allGroup.slice(1)\"></v-select>\n                </v-col>\n                \n            </v-row>\n        </v-card-text>\n        \n        <div ref=\"chart\"></div>\n        </v-card>\n      </v-container>\n    </v-main>\n  </template>\n  \n<script>\nimport * as d3 from 'd3';\n\nexport default {\n      data: () => ({\n        chosenFile: null,\n        data: null,\n        columnData:[],\n        array2D: null,\n        allGroup: [],\n        selectPlot: null\n      }),\n      methods: {\n        importFile() {\n      \n      if (this.chosenFile === null) {\n        this.data = \"No File Chosen\"\n      } else {\n        var reader = new FileReader();\n        var file = this.chosenFile[0]\n        // Use the javascript reader object to load the contents\n        // of the file in the v-model prop\n        reader.readAsText(file);\n        reader.onload = () => {\n        this.data = reader.result;\n        const rows = this.data.split('\\n')\n        this.array2D = Array.from({ length: rows[0].split(',').length }, () => []);\n        for (let i=0; i<rows.length;i++) {\n            const columns = rows[i].split(',');\n            for (let j =0; j<columns.length;j++) {\n                this.array2D[j].push(columns[j]);\n            }\n            \n        }\n        for (let i=0; i<this.array2D.length;i++) {\n        this.allGroup.push(this.array2D[i][0])\n        this.array2D[i] = this.array2D[i].slice(1).map(str => parseInt(str));\n    }\n    console.log(this.allGroup)\n    console.log(this.array2D)\n        console.log(this.array2D)\n      }\n    }\n},\n      }\n    }\n\n// plotChart () {\n    // set the dimensions and margins of the graph\nvar margin = {top: 10, right: 30, bottom: 30, left: 50},\n    width = 460 - margin.left - margin.right,\n    height = 400 - margin.top - margin.bottom;\n\n// append the svg object to the body of the page\nvar svg = d3.select(this.$refs.chart)\n  .append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n  .append(\"g\")\n    .attr(\"transform\",\n          \"translate(\" + margin.left + \",\" + margin.top + \")\");\n    // Assume that `data` is a 2D array where the first row contains X-axis values and the second row contains Y-axis values\n    // const data = [      [1, 2, 3, 4, 5], // X-axis values\n    //   [1, 3, 2, 4, 5]  // Y-axis values\n    // ];\n\n    // var myColor = d3.scaleOrdinal()\n    //   .domain(this.allGroup)\n    //   .range(d3.schemeSet2);\n    \n        \n\n\n    // Define the scales for the X and Y axes\n// Initialise a X axis:\nvar x = d3.scaleLinear().range([0,width]);\nvar xAxis = d3.axisBottom().scale(x);\nsvg.append(\"g\")\n  .attr(\"transform\", \"translate(0,\" + height + \")\")\n  .attr(\"class\",\"myXaxis\")\n\n// Initialize an Y axis\nvar y = d3.scaleLinear().range([height, 0]);\nvar yAxis = d3.axisLeft().scale(y);\nsvg.append(\"g\")\n  .attr(\"class\",\"myYaxis\")\n\n\n// Create a function that takes a dataset as input and update the plot:\nfunction update(data1, data2) {\nconsole.log('running update')\n// Create the X axis:\nx.domain([0, d3.max(data1) ]);\nsvg.selectAll(\".myXaxis\").transition()\n  .duration(3000)\n  .call(xAxis);\n\n// create the Y axis\ny.domain([0, d3.max(data2) ]);\nsvg.selectAll(\".myYaxis\")\n  .transition()\n  .duration(3000)\n  .call(yAxis);\n\n\n  const line = d3.line()\n      .x((d, i) => (data1[i]))\n      .y((d, i) => (data2[i]));\n\n    // Create the line path\n    svg.append('path')\n      .datum(data1)\n      .attr('d', line)\n      .attr('fill', 'none')\n      .attr('stroke', 'steelblue')\n      .attr('stroke-width', 2);\n\n    // Create the X and Y axes\n    // const xAxis = d3.axisBottom(xScale);\n    // const yAxis = d3.axisLeft(yScale);\n\n    svg.append('g')\n      .attr('transform', `translate(0, ${height})`)\n      .call(xAxis);\n\n    svg.append('g')\n      .call(yAxis);\n\n\n\n\n\nupdate(this.array2D[0], this.array2D[1])\n\n\n    // // Define the line function\n    // const line = d3.line()\n    //   .x((d, i) => xScale(this.array2D[0][i]))\n    //   .y((d, i) => yScale(this.array2D[1][i]));\n\n    // Create the line path\n    // svg.append('path')\n    //   .datum(this.array2D[0])\n    //   .attr('d', line)\n    //   .attr('fill', 'none')\n    //   .attr('stroke', 'steelblue')\n    //   .attr('stroke-width', 2);\n\n    // // Create the X and Y axes\n    // // const xAxis = d3.axisBottom(xScale);\n    // // const yAxis = d3.axisLeft(yScale);\n\n    // svg.append('g')\n    //   .attr('transform', `translate(0, ${height})`)\n    //   .call(xAxis);\n\n    // svg.append('g')\n    //   .call(yAxis);\n//   }\n\n//   }\n// ,\n\n\n}\n\n</script>\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}