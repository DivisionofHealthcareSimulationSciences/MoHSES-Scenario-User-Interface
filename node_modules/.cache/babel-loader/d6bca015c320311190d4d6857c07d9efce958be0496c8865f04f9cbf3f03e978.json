{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createBlock as _createBlock, Fragment as _Fragment, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-45730464\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", {\n  style: {\n    \"font-size\": \"20px\"\n  }\n}, \"Please upload your .CSV:\", -1 /* HOISTED */));\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_5 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_7 = {\n  ref: \"chart\"\n};\nconst _hoisted_8 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_9 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_10 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_toolbar_title = _resolveComponent(\"v-toolbar-title\");\n  const _component_v_toolbar = _resolveComponent(\"v-toolbar\");\n  const _component_v_file_input = _resolveComponent(\"v-file-input\");\n  const _component_v_btn = _resolveComponent(\"v-btn\");\n  const _component_v_select = _resolveComponent(\"v-select\");\n  const _component_v_col = _resolveComponent(\"v-col\");\n  const _component_v_row = _resolveComponent(\"v-row\");\n  const _component_v_card_text = _resolveComponent(\"v-card-text\");\n  const _component_v_card = _resolveComponent(\"v-card\");\n  const _component_v_container = _resolveComponent(\"v-container\");\n  const _component_v_main = _resolveComponent(\"v-main\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_v_toolbar, {\n    style: {\n      \"color\": \"white\"\n    },\n    color: \"#3c2d70\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_toolbar_title, null, {\n      default: _withCtx(() => [_createTextVNode(\"BioGears Plotting Tool\")]),\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_main, {\n    class: \"bg-grey-lighten-3\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_container, null, {\n      default: _withCtx(() => [_createVNode(_component_v_card, {\n        class: \"mt-n12\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_v_card_text, null, {\n          default: _withCtx(() => [_hoisted_1, _hoisted_2, _createVNode(_component_v_file_input, {\n            modelValue: _ctx.chosenFile,\n            \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.chosenFile = $event)\n          }, null, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_v_btn, {\n            color: \"success\",\n            onClick: $options.importFile\n          }, {\n            default: _withCtx(() => [_createTextVNode(\"Import File\")]),\n            _: 1 /* STABLE */\n          }, 8 /* PROPS */, [\"onClick\"]), _hoisted_3, _hoisted_4, _ctx.array2D ? (_openBlock(), _createBlock(_component_v_row, {\n            key: 0\n          }, {\n            default: _withCtx(() => [_createVNode(_component_v_col, {\n              cols: \"12\"\n            }, {\n              default: _withCtx(() => [_createVNode(_component_v_select, {\n                label: \"Please select a variable.\",\n                modelValue: _ctx.selectPlot,\n                \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.selectPlot = $event),\n                id: \"selectButton\",\n                items: _ctx.allGroup.slice(1)\n              }, null, 8 /* PROPS */, [\"modelValue\", \"items\"])]),\n              _: 1 /* STABLE */\n            }), _createVNode(_component_v_row, null, {\n              default: _withCtx(() => [_ctx.selectPlot ? (_openBlock(), _createBlock(_component_v_col, {\n                key: 0,\n                cols: \"auto\"\n              }, {\n                default: _withCtx(() => [_createCommentVNode(\" Use cols=\\\"auto\\\" to make the column's width adjust to the content \"), _createVNode(_component_v_btn, {\n                  onClick: $options.plotSelectedChart\n                }, {\n                  default: _withCtx(() => [_createTextVNode(\"Plot Chart\")]),\n                  _: 1 /* STABLE */\n                }, 8 /* PROPS */, [\"onClick\"]), _hoisted_5]),\n                _: 1 /* STABLE */\n              })) : _createCommentVNode(\"v-if\", true), _ctx.selectPlot ? (_openBlock(), _createBlock(_component_v_col, {\n                key: 1,\n                cols: \"auto\"\n              }, {\n                default: _withCtx(() => [_createVNode(_component_v_btn, {\n                  onClick: $options.downloadChart\n                }, {\n                  default: _withCtx(() => [_createTextVNode(\"Download Chart\")]),\n                  _: 1 /* STABLE */\n                }, 8 /* PROPS */, [\"onClick\"]), _hoisted_6]),\n                _: 1 /* STABLE */\n              })) : _createCommentVNode(\"v-if\", true)]),\n              _: 1 /* STABLE */\n            })]),\n\n            _: 1 /* STABLE */\n          })) : _createCommentVNode(\"v-if\", true)]),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_v_row, {\n          justify: \"center\"\n        }, {\n          default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_7, null, 512 /* NEED_PATCH */), _hoisted_8, _hoisted_9]),\n          _: 1 /* STABLE */\n        }), _hoisted_10]),\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  })], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;gEAQUA,oBAAuD;EAApDC,KAAuB,EAAvB;IAAA;EAAA;AAAuB,GAAC,0BAAwB;gEACnDD,oBAAI;gEAGJA,oBAAI;gEACJA,oBAAI;gEAQZA,oBAAI;gEAKQA,oBAAI;;EAOHE,GAAG,EAAC;AAAO;gEAChBF,oBAAI;gEACJA,oBAAI;iEAENA,oBAAI;;;;;;;;;;;;;;6DApCVG,aAEYC;IAFDH,KAAoB,EAApB;MAAA;IAAA,CAAoB;IAACI,KAAK,EAAC;;sBACpC,MAAyD,CAAzDF,aAAyDG;wBAAxC,MAAsB,kBAAtB,wBAAsB;;;;;MAEzCH,aAoCSI;IApCDC,KAAK,EAAC;EAAmB;sBAC/B,MAkCc,CAlCdL,aAkCcM;wBAjCZ,MAgCS,CAhCTN,aAgCSO;QAhCDF,KAAK,EAAC;MAAQ;0BACpB,MAwBc,CAxBdL,aAwBcQ;4BAvBZ,MAAuD,CAAvDC,UAAuD,EACvDC,UAAI,EACJV,aAAkDW;wBAA3BC,eAAU;uEAAVA,eAAU;mDACjCZ,aAA8Da;YAAvDX,KAAK,EAAC,SAAS;YAAEY,OAAK,EAAEC;;8BAAY,MAAW,kBAAX,aAAW;;0CACtDC,UAAI,EACJC,UAAI,EACSL,YAAO,kBAApBM,aAgBQC;YAAAC;UAAA;8BAfN,MAEQ,CAFRpB,aAEQqB;cAFDC,IAAI,EAAC;YAAI;gCACd,MAAyH,CAAzHtB,aAAyHuB;gBAA/GC,KAAK,EAAC,2BAA2B;4BAAUZ,eAAU;2EAAVA,eAAU;gBAAEa,EAAE,EAAC,cAAc;gBAAEC,KAAK,EAAEd,aAAQ,CAACe,KAAK;;;gBAE7G3B,aAUFmB;gCATR,MAIQ,CAJKP,eAAU,kBAAvBM,aAIQG;;gBAJiBC,IAAI,EAAC;;kCAAQ,MAAyE,CAAzEM,2FAAyE,EAC7G5B,aAAoDa;kBAA5CC,OAAK,EAAEC;gBAAiB;oCAAE,MAAU,kBAAV,YAAU;;gDAC5Cc,UAAI;;uDAGOjB,eAAU,kBAAvBM,aAGQG;;gBAHiBC,IAAI,EAAC;;kCAChB,MAAoD,CAApDtB,aAAoDa;kBAA5CC,OAAK,EAAEC;gBAAa;oCAAE,MAAc,kBAAd,gBAAc;;gDAC5Ce,UAAI;;;;;;;;;YAMV9B,aAIQmB;UAJDY,OAAO,EAAC;QAAQ;4BACrB,MAAuB,CAAvBlC,oBAAuB,OAAvBmC,UAAuB,+BACvBC,UAAI,EACJC,UAAI;;YAENC,WAAI","names":["_createElementVNode","style","ref","_createVNode","_component_v_toolbar","color","_component_v_toolbar_title","_component_v_main","class","_component_v_container","_component_v_card","_component_v_card_text","_hoisted_1","_hoisted_2","_component_v_file_input","_ctx","_component_v_btn","onClick","$options","_hoisted_3","_hoisted_4","_createBlock","_component_v_row","key","_component_v_col","cols","_component_v_select","label","id","items","slice","_createCommentVNode","_hoisted_5","_hoisted_6","justify","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10"],"sourceRoot":"","sources":["/Users/meganluu/Desktop/Capstone/MoHSES-Scenario-User-Interface/src/views/PlottingView.vue"],"sourcesContent":["<template>\n  <v-toolbar style=\"color: white\" color=\"#3c2d70\">\n    <v-toolbar-title>BioGears Plotting Tool</v-toolbar-title>\n  </v-toolbar>\n  <v-main class=\"bg-grey-lighten-3\">\n    <v-container>\n      <v-card class=\"mt-n12\">\n        <v-card-text>\n          <p style=\"font-size: 20px\">Please upload your .CSV:</p>\n          <br>\n          <v-file-input v-model=\"chosenFile\"></v-file-input>\n          <v-btn color=\"success\" @click=\"importFile\">Import File</v-btn>\n          <br>\n          <br>\n          <v-row v-if=\"array2D\">\n            <v-col cols=\"12\">\n              <v-select label=\"Please select a variable.\" v-model=\"selectPlot\" id=\"selectButton\" :items=\"allGroup.slice(1)\"></v-select>\n            </v-col>\n          <v-row>\n<v-col v-if=\"selectPlot\" cols=\"auto\"> <!-- Use cols=\"auto\" to make the column's width adjust to the content -->\n  <v-btn @click=\"plotSelectedChart\">Plot Chart</v-btn>\n  <br>\n              \n</v-col>\n<v-col v-if=\"selectPlot\" cols=\"auto\">\n              <v-btn @click=\"downloadChart\">Download Chart</v-btn>\n              <br>\n</v-col>\n</v-row>\n\n          </v-row>\n        </v-card-text>\n        <v-row justify=\"center\">\n          <div ref=\"chart\"></div>\n          <br>\n          <br>\n        </v-row>\n        <br>\n      </v-card>\n    </v-container>\n  </v-main>\n</template>\n<script>\n  // import * as d3 from 'd3';\n  import vegaEmbed from 'vega-embed';\n  export default {\n    data: () => ({\n      currentSpec: null,\n      chosenFile: null,\n      data: null,\n      columnData: [],\n      array2D: null,\n      allGroup: [],\n      selectPlot: null\n    }),\n    methods: {\n      async downloadChart() {\n          if (!this.currentSpec) {\n  return; // Exit the method if no chart has been plotted\n}\n\n// Get the Vega view instance from the vegaEmbed function\nconst { view } = await vegaEmbed(this.$refs.chart, this.currentSpec, {\n  actions: false,\n});\n\n// Generate the PNG image data URL\nconst dataUrl = await view.toImageURL('png');\n\n// Create a temporary link element for downloading the chart\nconst link = document.createElement('a');\nlink.href = dataUrl;\nlink.download = 'chart.png';\nlink.style.display = 'none';\n\n// Add the link to the DOM, click it, and remove it\ndocument.body.appendChild(link);\nlink.click();\ndocument.body.removeChild(link);\n},\n      importFile() {\n        if (this.chosenFile === null) {\n          this.data = \"No File Chosen\"\n        } else {\n          var reader = new FileReader();\n          var file = this.chosenFile[0]\n          // Use the javascript reader object to load the contents\n          // of the file in the v-model prop\n          reader.readAsText(file);\n          reader.onload = () => {\n            this.data = reader.result;\n            const rows = this.data.split('\\n')\n            this.array2D = Array.from({\n              length: rows[0].split(',').length\n            }, () => []);\n            for (let i = 0; i < rows.length; i++) {\n              const columns = rows[i].split(',');\n              for (let j = 0; j < columns.length; j++) {\n                this.array2D[j].push(columns[j]);\n              }\n            }\n            for (let i = 0; i < this.array2D.length; i++) {\n              this.allGroup.push(this.array2D[i][0])\n              this.array2D[i] = this.array2D[i].slice(1).map(str => parseFloat(str));\n            }\n            console.log(this.allGroup)\n            console.log(this.array2D)\n            console.log(this.array2D)\n          }\n        }\n      },\n      plotChart(data) {\n          const xAxisData = this.array2D[0];\n  const yAxisData = data;\n  \n  const dataset = xAxisData.map((value, index) => ({\n    xValue: value,\n    yValue: yAxisData[index]\n  }));\n\n  const spec = {\n    $schema: 'https://vega.github.io/schema/vega-lite/v5.json',\n    data: { values: dataset },\n    mark: 'line',\n    title: {\n  text: this.selectPlot + ' Versus Time (s)', // Set the title text\n  anchor: 'middle', // Position the title (start, middle, or end)\n  fontSize: 16, // Set the font size\n  fontWeight: 'bold', // Set the font weight\n  dy: -10, // Adjust the vertical distance between the title and the chart\n},\n    encoding: {\n      x: { field: 'xValue', type: 'quantitative', title: 'Time (s)' },\n      y: { field: 'yValue', type: 'quantitative', title: this.selectPlot },\n      tooltip: [\n        { field: 'xValue', type: 'quantitative', title: 'Time (s)' },\n        { field: 'yValue', type: 'quantitative', title: this.selectPlot },\n      ],\n    },\n    selection: {\n  mySelection: {\n    type: 'interval',\n    bind: 'scales', // Bind the selection to the chart scales\n    encodings: ['x', 'y'], // Apply the selection to both x and y axes\n    zoom: true, // Enable zooming\n    translate: true, // Enable panning\n  },\n},\n    width: 700, // Add the desired width\nheight: 550, // Add the desired height\n  };\n    vegaEmbed(this.$refs.chart, spec, { actions: false });\n    return spec\n},\n\n\n  plotSelectedChart() {\n    if (this.array2D && this.allGroup && this.selectPlot) {\n      this.currentSpec = this.plotChart(this.array2D[this.allGroup.indexOf(this.selectPlot)]);\n    }\n  },\n     \n      }\n  }\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}