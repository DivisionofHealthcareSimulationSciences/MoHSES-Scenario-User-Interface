{"ast":null,"code":"import * as d3 from 'd3';\nexport default {\n  data() {\n    return {\n      file: null,\n      data: null,\n      x: 'time',\n      y: null,\n      valueKeys: null\n    };\n  },\n  methods: {\n    onFileSelected() {\n      const fileReader = new FileReader();\n      fileReader.onload = () => {\n        const csv = d3.csvParse(fileReader.result);\n\n        // Extract value keys from header row\n        this.valueKeys = Object.keys(csv[0]).slice(1);\n\n        // Map data rows to objects with numeric values\n        this.data = csv.map(row => {\n          const obj = {\n            time: row['time']\n          };\n          this.valueKeys.forEach(key => obj[key] = Number(row[key]));\n          return obj;\n        });\n\n        // Set initial y-axis value to first value key\n        this.y = this.valueKeys[0];\n\n        // Render the chart\n        this.renderChart();\n      };\n      fileReader.readAsText(this.file);\n    },\n    renderChart() {\n      const margin = {\n        top: 10,\n        right: 30,\n        bottom: 30,\n        left: 60\n      };\n      const width = 500 - margin.left - margin.right;\n      const height = 300 - margin.top - margin.bottom;\n      const svg = d3.select(this.$refs.chart).append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n      const xScale = d3.scaleTime().domain(d3.extent(this.data, d => new Date(d['time']))).range([0, width]);\n      const yScale = d3.scaleLinear().domain([d3.min(this.data, d => d[this.y]), d3.max(this.data, d => d[this.y])]).range([height, 0]);\n      const xAxis = d3.axisBottom(xScale);\n      const yAxis = d3.axisLeft(yScale);\n      svg.append(\"g\").attr(\"transform\", `translate(0, ${height})`).call(xAxis);\n      svg.append(\"g\").call(yAxis);\n      svg.selectAll(\"circle\").data(this.data).enter().append(\"circle\").attr(\"cx\", d => xScale(new Date(d['time']))).attr(\"cy\", d => yScale(d[this.y])).attr(\"r\", 5);\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["d3","data","file","x","y","valueKeys","methods","onFileSelected","fileReader","FileReader","onload","csv","csvParse","result","Object","keys","slice","map","row","obj","time","forEach","key","Number","renderChart","readAsText","margin","top","right","bottom","left","width","height","svg","select","$refs","chart","append","attr","xScale","scaleTime","domain","extent","d","Date","range","yScale","scaleLinear","min","max","xAxis","axisBottom","yAxis","axisLeft","call","selectAll","enter"],"sourceRoot":"","sources":["/Users/stlp/Desktop/Spring 2023/BIOEN 405/User Interface/MoHSES-Scenario-User-Interface/src/views/PlottingView.vue"],"sourcesContent":["<template>\n    <v-toolbar style=\"color: white\" color=\"#4b0082\">\n       <v-toolbar-title>BioGears Plotting Tool</v-toolbar-title>\n    </v-toolbar>\n    <v-main class=\"bg-grey-lighten-3\">\n       <v-container>\n          <v-card class=\"mt-n12\">\n             <v-card-text>\n                <p style=\"font-size: 20px\">Please upload your .CSV:</p>\n                <br>\n                <v-file-input\n                   v-model=\"file\"\n                   accept=\".csv\"\n                   label=\"Upload CSV\"\n                   @change=\"onFileSelected\"\n                   ></v-file-input>\n                   <div ref=\"chart\"></div>\n             </v-card-text>\n          </v-card>\n       </v-container>\n    </v-main>\n </template>\n <script>\nimport * as d3 from 'd3';\n\nexport default {\n  data() {\n    return {\n      file: null,\n      data: null,\n      x: 'time',\n      y: null,\n      valueKeys: null,\n    };\n  },\n  methods: {\n    onFileSelected() {\n      const fileReader = new FileReader();\n      fileReader.onload = () => {\n        const csv = d3.csvParse(fileReader.result);\n\n        // Extract value keys from header row\n        this.valueKeys = Object.keys(csv[0]).slice(1);\n\n        // Map data rows to objects with numeric values\n        this.data = csv.map(row => {\n          const obj = { time: row['time'] };\n          this.valueKeys.forEach(key => obj[key] = Number(row[key]));\n          return obj;\n        });\n\n        // Set initial y-axis value to first value key\n        this.y = this.valueKeys[0];\n\n        // Render the chart\n        this.renderChart();\n      };\n      fileReader.readAsText(this.file);\n    },\n    renderChart() {\n      const margin = { top: 10, right: 30, bottom: 30, left: 60 };\n      const width = 500 - margin.left - margin.right;\n      const height = 300 - margin.top - margin.bottom;\n\n      const svg = d3\n        .select(this.$refs.chart)\n        .append(\"svg\")\n        .attr(\"width\", width + margin.left + margin.right)\n        .attr(\"height\", height + margin.top + margin.bottom)\n        .append(\"g\")\n        .attr(\"transform\", `translate(${margin.left}, ${margin.top})`);\n\n      const xScale = d3\n        .scaleTime()\n        .domain(d3.extent(this.data, d => new Date(d['time'])))\n        .range([0, width]);\n\n      const yScale = d3\n        .scaleLinear()\n        .domain([\n          d3.min(this.data, d => d[this.y]),\n          d3.max(this.data, d => d[this.y]),\n        ])\n        .range([height, 0]);\n\n      const xAxis = d3.axisBottom(xScale);\n      const yAxis = d3.axisLeft(yScale);\n\n      svg\n        .append(\"g\")\n        .attr(\"transform\", `translate(0, ${height})`)\n        .call(xAxis);\n\n      svg.append(\"g\").call(yAxis);\n\n      svg\n        .selectAll(\"circle\")\n        .data(this.data)\n        .enter()\n        .append(\"circle\")\n        .attr(\"cx\", d => xScale(new Date(d['time'])))\n        .attr(\"cy\", d => yScale(d[this.y]))\n        .attr(\"r\", 5);\n    },\n  },\n};\n\n </script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}