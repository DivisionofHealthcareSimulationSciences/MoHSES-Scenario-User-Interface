{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as d3 from 'd3';\nexport default {\n  data: () => ({\n    chosenFile: null,\n    data: null,\n    columnData: [],\n    array2D: null\n  }),\n  methods: {\n    importFile() {\n      if (this.chosenFile === null) {\n        this.data = \"No File Chosen\";\n      } else {\n        var reader = new FileReader();\n        var file = this.chosenFile[0];\n        // Use the javascript reader object to load the contents\n        // of the file in the v-model prop\n        reader.readAsText(file);\n        reader.onload = () => {\n          this.data = reader.result;\n          const rows = this.data.split('\\n');\n          this.array2D = Array.from({\n            length: rows[0].split(',').length\n          }, () => []);\n          for (let i = 0; i < rows.length; i++) {\n            const columns = rows[i].split(',');\n            for (let j = 0; j < columns.length; j++) {\n              this.array2D[j].push(columns[j]);\n            }\n          }\n          console.log(this.array2D);\n        };\n      }\n    }\n  },\n  mounted() {\n    const margin = {\n      top: 20,\n      right: 20,\n      bottom: 30,\n      left: 50\n    };\n    const width = 600 - margin.left - margin.right;\n    const height = 400 - margin.top - margin.bottom;\n\n    // Assume that `data` is a 2D array where the first row contains X-axis values and the second row contains Y-axis values\n    // const data = [      [1, 2, 3, 4, 5], // X-axis values\n    //   [1, 3, 2, 4, 5]  // Y-axis values\n    // ];\n\n    // Define the scales for the X and Y axes\n    const xScale = d3.scaleLinear().domain([d3.min(this.array2D[0].slice(1)), d3.max(this.array2D[0].slice(1))]).range([0, width]);\n    const yScale = d3.scaleLinear().domain([d3.min(this.array2D[1].slice(1)), d3.max(this.array2D[1].slice(1))]).range([height, 0]);\n\n    // Define the line function\n    const line = d3.line().x((d, i) => xScale(this.array2D[0].slice(1)[i])).y((d, i) => yScale(this.array2D[1].slice(1)[i]));\n\n    // Create the SVG element\n    const svg = d3.select(this.$refs.chart).append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n    // Create the line path\n    svg.append('path').datum(this.array2D[0].slice(1)).attr('d', line).attr('fill', 'none').attr('stroke', 'steelblue').attr('stroke-width', 2);\n\n    // Create the X and Y axes\n    const xAxis = d3.axisBottom(xScale);\n    const yAxis = d3.axisLeft(yScale);\n    svg.append('g').attr('transform', `translate(0, ${height})`).call(xAxis);\n    svg.append('g').call(yAxis);\n  }\n};","map":{"version":3,"mappings":"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","names":["d3","data","chosenFile","columnData","array2D","methods","importFile","reader","FileReader","file","readAsText","onload","result","rows","split","Array","from","length","i","columns","j","push","console","log","mounted","margin","top","right","bottom","left","width","height","xScale","scaleLinear","domain","min","slice","max","range","yScale","line","x","d","y","svg","select","$refs","chart","append","attr","datum","xAxis","axisBottom","yAxis","axisLeft","call"],"sourceRoot":"","sources":["/Users/stlp/Desktop/Spring 2023/BIOEN 405/User Interface/MoHSES-Scenario-User-Interface/src/views/PlottingView.vue"],"sourcesContent":["<template>\n    <v-toolbar style=\"color: white\" color=\"#4b0082\">\n      <v-toolbar-title>BioGears Plotting Tool</v-toolbar-title>\n    </v-toolbar>\n    <v-main class=\"bg-grey-lighten-3\">\n      <v-container>\n        <v-card class=\"mt-n12\">\n          <v-card-text>\n            <p style=\"font-size: 20px\">Please upload your .CSV:</p>\n            <br>\n            <v-file-input v-model=\"chosenFile\"></v-file-input>\n            <v-spacer></v-spacer>\n            <v-btn @click=\"importFile\">Import File</v-btn>\n        </v-card-text>\n        </v-card>\n        <div> {{ this.array2D }} </div>\n        <div ref=\"chart\"></div>\n      </v-container>\n    </v-main>\n  </template>\n  \n<script>\nimport * as d3 from 'd3';\n\nexport default {\n      data: () => ({\n        chosenFile: null,\n        data: null,\n        columnData:[],\n        array2D: null\n      }),\n      methods: {\n        importFile() {\n      \n      if (this.chosenFile === null) {\n        this.data = \"No File Chosen\"\n      } else {\n        var reader = new FileReader();\n        var file = this.chosenFile[0]\n        // Use the javascript reader object to load the contents\n        // of the file in the v-model prop\n        reader.readAsText(file);\n        reader.onload = () => {\n        this.data = reader.result;\n        const rows = this.data.split('\\n')\n        this.array2D = Array.from({ length: rows[0].split(',').length }, () => []);\n        for (let i=0; i<rows.length;i++) {\n            const columns = rows[i].split(',');\n            for (let j =0; j<columns.length;j++) {\n                this.array2D[j].push(columns[j]);\n            }\n        }\n        console.log(this.array2D)\n      }\n    }\n}\n  }\n,\n\nmounted() {\n    const margin = { top: 20, right: 20, bottom: 30, left: 50 };\n    const width = 600 - margin.left - margin.right;\n    const height = 400 - margin.top - margin.bottom;\n\n    // Assume that `data` is a 2D array where the first row contains X-axis values and the second row contains Y-axis values\n    // const data = [      [1, 2, 3, 4, 5], // X-axis values\n    //   [1, 3, 2, 4, 5]  // Y-axis values\n    // ];\n\n    // Define the scales for the X and Y axes\n    const xScale = d3.scaleLinear()\n      .domain([d3.min(this.array2D[0].slice(1)), d3.max(this.array2D[0].slice(1))])\n      .range([0, width]);\n\n    const yScale = d3.scaleLinear()\n      .domain([d3.min(this.array2D[1].slice(1)), d3.max(this.array2D[1].slice(1))])\n      .range([height, 0]);\n\n    // Define the line function\n    const line = d3.line()\n      .x((d, i) => xScale(this.array2D[0].slice(1)[i]))\n      .y((d, i) => yScale(this.array2D[1].slice(1)[i]));\n\n    // Create the SVG element\n    const svg = d3.select(this.$refs.chart)\n      .append('svg')\n      .attr('width', width + margin.left + margin.right)\n      .attr('height', height + margin.top + margin.bottom)\n      .append('g')\n      .attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n    // Create the line path\n    svg.append('path')\n      .datum(this.array2D[0].slice(1))\n      .attr('d', line)\n      .attr('fill', 'none')\n      .attr('stroke', 'steelblue')\n      .attr('stroke-width', 2);\n\n    // Create the X and Y axes\n    const xAxis = d3.axisBottom(xScale);\n    const yAxis = d3.axisLeft(yScale);\n\n    svg.append('g')\n      .attr('transform', `translate(0, ${height})`)\n      .call(xAxis);\n\n    svg.append('g')\n      .call(yAxis);\n  }\n}\n\n</script>\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}