{"ast":null,"code":"import { isArray } from 'vega-util';\nimport { isConditionalAxisValue } from '../axis';\nimport { GEOPOSITION_CHANNELS, NONPOSITION_SCALE_CHANNELS, POSITION_SCALE_CHANNELS, SCALE_CHANNELS, supportLegend, X, Y } from '../channel';\nimport { getFieldDef, getFieldOrDatumDef, isFieldOrDatumDef, isTypedFieldDef } from '../channeldef';\nimport { isGraticuleGenerator } from '../data';\nimport * as vlEncoding from '../encoding';\nimport { initEncoding } from '../encoding';\nimport { replaceExprRef } from '../expr';\nimport { GEOSHAPE, isMarkDef } from '../mark';\nimport { isSelectionParameter } from '../selection';\nimport { isFrameMixins } from '../spec/base';\nimport { stack } from '../stack';\nimport { keys } from '../util';\nimport { assembleAxisSignals } from './axis/assemble';\nimport { parseUnitAxes } from './axis/parse';\nimport { signalOrValueRefWithCondition, signalRefOrValue } from './common';\nimport { parseData } from './data/parse';\nimport { assembleLayoutSignals } from './layoutsize/assemble';\nimport { initLayoutSize } from './layoutsize/init';\nimport { parseUnitLayoutSize } from './layoutsize/parse';\nimport { defaultFilled, initMarkdef } from './mark/init';\nimport { parseMarkGroups } from './mark/mark';\nimport { isLayerModel, ModelWithField } from './model';\nimport { assembleTopLevelSignals, assembleUnitSelectionData, assembleUnitSelectionMarks, assembleUnitSelectionSignals } from './selection/assemble';\nimport { parseUnitSelection } from './selection/parse';\n/**\r\n * Internal model of Vega-Lite specification for the compiler.\r\n */\nexport class UnitModel extends ModelWithField {\n  constructor(spec, parent, parentGivenName, parentGivenSize = {}, config) {\n    super(spec, 'unit', parent, parentGivenName, config, undefined, isFrameMixins(spec) ? spec.view : undefined);\n    this.specifiedScales = {};\n    this.specifiedAxes = {};\n    this.specifiedLegends = {};\n    this.specifiedProjection = {};\n    this.selection = [];\n    this.children = [];\n    const markDef = isMarkDef(spec.mark) ? {\n      ...spec.mark\n    } : {\n      type: spec.mark\n    };\n    const mark = markDef.type;\n    // Need to init filled before other mark properties because encoding depends on filled but other mark properties depend on types inside encoding\n    if (markDef.filled === undefined) {\n      markDef.filled = defaultFilled(markDef, config, {\n        graticule: spec.data && isGraticuleGenerator(spec.data)\n      });\n    }\n    const encoding = this.encoding = initEncoding(spec.encoding || {}, mark, markDef.filled, config);\n    this.markDef = initMarkdef(markDef, encoding, config);\n    this.size = initLayoutSize({\n      encoding,\n      size: isFrameMixins(spec) ? {\n        ...parentGivenSize,\n        ...(spec.width ? {\n          width: spec.width\n        } : {}),\n        ...(spec.height ? {\n          height: spec.height\n        } : {})\n      } : parentGivenSize\n    });\n    // calculate stack properties\n    this.stack = stack(this.markDef, encoding);\n    this.specifiedScales = this.initScales(mark, encoding);\n    this.specifiedAxes = this.initAxes(encoding);\n    this.specifiedLegends = this.initLegends(encoding);\n    this.specifiedProjection = spec.projection;\n    // Selections will be initialized upon parse.\n    this.selection = (spec.params ?? []).filter(p => isSelectionParameter(p));\n  }\n  get hasProjection() {\n    const {\n      encoding\n    } = this;\n    const isGeoShapeMark = this.mark === GEOSHAPE;\n    const hasGeoPosition = encoding && GEOPOSITION_CHANNELS.some(channel => isFieldOrDatumDef(encoding[channel]));\n    return isGeoShapeMark || hasGeoPosition;\n  }\n  /**\r\n   * Return specified Vega-Lite scale domain for a particular channel\r\n   * @param channel\r\n   */\n  scaleDomain(channel) {\n    const scale = this.specifiedScales[channel];\n    return scale ? scale.domain : undefined;\n  }\n  axis(channel) {\n    return this.specifiedAxes[channel];\n  }\n  legend(channel) {\n    return this.specifiedLegends[channel];\n  }\n  initScales(mark, encoding) {\n    return SCALE_CHANNELS.reduce((scales, channel) => {\n      const fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);\n      if (fieldOrDatumDef) {\n        scales[channel] = this.initScale(fieldOrDatumDef.scale ?? {});\n      }\n      return scales;\n    }, {});\n  }\n  initScale(scale) {\n    const {\n      domain,\n      range\n    } = scale;\n    // TODO: we could simplify this function if we had a recursive replace function\n    const scaleInternal = replaceExprRef(scale);\n    if (isArray(domain)) {\n      scaleInternal.domain = domain.map(signalRefOrValue);\n    }\n    if (isArray(range)) {\n      scaleInternal.range = range.map(signalRefOrValue);\n    }\n    return scaleInternal;\n  }\n  initAxes(encoding) {\n    return POSITION_SCALE_CHANNELS.reduce((_axis, channel) => {\n      // Position Axis\n      // TODO: handle ConditionFieldDef\n      const channelDef = encoding[channel];\n      if (isFieldOrDatumDef(channelDef) || channel === X && isFieldOrDatumDef(encoding.x2) || channel === Y && isFieldOrDatumDef(encoding.y2)) {\n        const axisSpec = isFieldOrDatumDef(channelDef) ? channelDef.axis : undefined;\n        _axis[channel] = axisSpec ? this.initAxis({\n          ...axisSpec\n        }) // convert truthy value to object\n        : axisSpec;\n      }\n      return _axis;\n    }, {});\n  }\n  initAxis(axis) {\n    const props = keys(axis);\n    const axisInternal = {};\n    for (const prop of props) {\n      const val = axis[prop];\n      axisInternal[prop] = isConditionalAxisValue(val) ? signalOrValueRefWithCondition(val) : signalRefOrValue(val);\n    }\n    return axisInternal;\n  }\n  initLegends(encoding) {\n    return NONPOSITION_SCALE_CHANNELS.reduce((_legend, channel) => {\n      const fieldOrDatumDef = getFieldOrDatumDef(encoding[channel]);\n      if (fieldOrDatumDef && supportLegend(channel)) {\n        const legend = fieldOrDatumDef.legend;\n        _legend[channel] = legend ? replaceExprRef(legend) // convert truthy value to object\n        : legend;\n      }\n      return _legend;\n    }, {});\n  }\n  parseData() {\n    this.component.data = parseData(this);\n  }\n  parseLayoutSize() {\n    parseUnitLayoutSize(this);\n  }\n  parseSelections() {\n    this.component.selection = parseUnitSelection(this, this.selection);\n  }\n  parseMarkGroup() {\n    this.component.mark = parseMarkGroups(this);\n  }\n  parseAxesAndHeaders() {\n    this.component.axes = parseUnitAxes(this);\n  }\n  assembleSelectionTopLevelSignals(signals) {\n    return assembleTopLevelSignals(this, signals);\n  }\n  assembleSignals() {\n    return [...assembleAxisSignals(this), ...assembleUnitSelectionSignals(this, [])];\n  }\n  assembleSelectionData(data) {\n    return assembleUnitSelectionData(this, data);\n  }\n  assembleLayout() {\n    return null;\n  }\n  assembleLayoutSignals() {\n    return assembleLayoutSignals(this);\n  }\n  assembleMarks() {\n    let marks = this.component.mark ?? [];\n    // If this unit is part of a layer, selections should augment\n    // all in concert rather than each unit individually. This\n    // ensures correct interleaving of clipping and brushed marks.\n    if (!this.parent || !isLayerModel(this.parent)) {\n      marks = assembleUnitSelectionMarks(this, marks);\n    }\n    return marks.map(this.correctDataNames);\n  }\n  assembleGroupStyle() {\n    const {\n      style\n    } = this.view || {};\n    if (style !== undefined) {\n      return style;\n    }\n    if (this.encoding.x || this.encoding.y) {\n      return 'cell';\n    } else {\n      return 'view';\n    }\n  }\n  getMapping() {\n    return this.encoding;\n  }\n  get mark() {\n    return this.markDef.type;\n  }\n  channelHasField(channel) {\n    return vlEncoding.channelHasField(this.encoding, channel);\n  }\n  fieldDef(channel) {\n    const channelDef = this.encoding[channel];\n    return getFieldDef(channelDef);\n  }\n  typedFieldDef(channel) {\n    const fieldDef = this.fieldDef(channel);\n    if (isTypedFieldDef(fieldDef)) {\n      return fieldDef;\n    }\n    return null;\n  }\n}","map":{"version":3,"mappings":"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","names":["isArray","isConditionalAxisValue","GEOPOSITION_CHANNELS","NONPOSITION_SCALE_CHANNELS","POSITION_SCALE_CHANNELS","SCALE_CHANNELS","supportLegend","X","Y","getFieldDef","getFieldOrDatumDef","isFieldOrDatumDef","isTypedFieldDef","isGraticuleGenerator","vlEncoding","initEncoding","replaceExprRef","GEOSHAPE","isMarkDef","isSelectionParameter","isFrameMixins","stack","keys","assembleAxisSignals","parseUnitAxes","signalOrValueRefWithCondition","signalRefOrValue","parseData","assembleLayoutSignals","initLayoutSize","parseUnitLayoutSize","defaultFilled","initMarkdef","parseMarkGroups","isLayerModel","ModelWithField","assembleTopLevelSignals","assembleUnitSelectionData","assembleUnitSelectionMarks","assembleUnitSelectionSignals","parseUnitSelection","UnitModel","constructor","spec","parent","parentGivenName","parentGivenSize","config","undefined","view","markDef","mark","type","filled","graticule","data","encoding","size","width","height","specifiedScales","initScales","specifiedAxes","initAxes","specifiedLegends","initLegends","specifiedProjection","projection","selection","params","filter","p","hasProjection","isGeoShapeMark","hasGeoPosition","some","channel","scaleDomain","scale","domain","axis","legend","reduce","scales","fieldOrDatumDef","initScale","range","scaleInternal","map","_axis","channelDef","x2","y2","axisSpec","initAxis","props","axisInternal","prop","val","_legend","component","parseLayoutSize","parseSelections","parseMarkGroup","parseAxesAndHeaders","axes","assembleSelectionTopLevelSignals","signals","assembleSignals","assembleSelectionData","assembleLayout","assembleMarks","marks","correctDataNames","assembleGroupStyle","style","x","y","getMapping","channelHasField","fieldDef","typedFieldDef"],"sourceRoot":"","sources":["../../../src/compile/unit.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}