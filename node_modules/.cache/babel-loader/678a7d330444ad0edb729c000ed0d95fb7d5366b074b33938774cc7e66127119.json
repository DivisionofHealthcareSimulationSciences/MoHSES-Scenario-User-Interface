{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { abs, cos, halfPi, pi, sign, sin, sqrt } from \"./math.js\";\nimport { solve } from \"./newton.js\";\n\n// Based on Torben Jansen's implementation\n// https://beta.observablehq.com/@toja/nicolosi-globular-projection\n// https://beta.observablehq.com/@toja/nicolosi-globular-inverse\n\nexport function nicolosiRaw(lambda, phi) {\n  var sinPhi = sin(phi),\n    q = cos(phi),\n    s = sign(lambda);\n  if (lambda === 0 || abs(phi) === halfPi) return [0, phi];else if (phi === 0) return [lambda, 0];else if (abs(lambda) === halfPi) return [lambda * q, halfPi * sinPhi];\n  var b = pi / (2 * lambda) - 2 * lambda / pi,\n    c = 2 * phi / pi,\n    d = (1 - c * c) / (sinPhi - c);\n  var b2 = b * b,\n    d2 = d * d,\n    b2d2 = 1 + b2 / d2,\n    d2b2 = 1 + d2 / b2;\n  var M = (b * sinPhi / d - b / 2) / b2d2,\n    N = (d2 * sinPhi / b2 + d / 2) / d2b2,\n    m = M * M + q * q / b2d2,\n    n = N * N - (d2 * sinPhi * sinPhi / b2 + d * sinPhi - 1) / d2b2;\n  return [halfPi * (M + sqrt(m) * s), halfPi * (N + sqrt(n < 0 ? 0 : n) * sign(-phi * b) * s)];\n}\nnicolosiRaw.invert = function (x, y) {\n  x /= halfPi;\n  y /= halfPi;\n  var x2 = x * x,\n    y2 = y * y,\n    x2y2 = x2 + y2,\n    pi2 = pi * pi;\n  return [x ? (x2y2 - 1 + sqrt((1 - x2y2) * (1 - x2y2) + 4 * x2)) / (2 * x) * halfPi : 0, solve(function (phi) {\n    return x2y2 * (pi * sin(phi) - 2 * phi) * pi + 4 * phi * phi * (y - sin(phi)) + 2 * pi * phi - pi2 * y;\n  }, 0)];\n};\nexport default function () {\n  return projection(nicolosiRaw).scale(127.267);\n}","map":{"version":3,"names":["geoProjection","projection","abs","cos","halfPi","pi","sign","sin","sqrt","solve","nicolosiRaw","lambda","phi","sinPhi","q","s","b","c","d","b2","d2","b2d2","d2b2","M","N","m","n","invert","x","y","x2","y2","x2y2","pi2","scale"],"sources":["C:/Users/sanik/Downloads/capstone/MoHSES-Scenario-User-Interface/node_modules/d3-geo-projection/src/nicolosi.js"],"sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\r\nimport {abs, cos, halfPi, pi, sign, sin, sqrt} from \"./math.js\";\r\nimport {solve} from \"./newton.js\";\r\n\r\n// Based on Torben Jansen's implementation\r\n// https://beta.observablehq.com/@toja/nicolosi-globular-projection\r\n// https://beta.observablehq.com/@toja/nicolosi-globular-inverse\r\n\r\nexport function nicolosiRaw(lambda, phi) {\r\n  var sinPhi = sin(phi),\r\n    q = cos(phi),\r\n    s = sign(lambda);\r\n\r\n  if (lambda === 0 || abs(phi) === halfPi) return [0, phi];\r\n  else if (phi === 0) return [lambda, 0];\r\n  else if (abs(lambda) === halfPi) return [lambda * q, halfPi * sinPhi];\r\n\r\n  var b = pi / (2 * lambda) - (2 * lambda) / pi,\r\n    c = (2 * phi) / pi,\r\n    d = (1 - c * c) / (sinPhi - c);\r\n\r\n  var b2 = b * b,\r\n    d2 = d * d,\r\n    b2d2 = 1 + b2 / d2,\r\n    d2b2 = 1 + d2 / b2;\r\n\r\n  var M = ((b * sinPhi) / d - b / 2) / b2d2,\r\n    N = ((d2 * sinPhi) / b2 + d / 2) / d2b2,\r\n    m = M * M + (q * q) / b2d2,\r\n    n = N * N - ((d2 * sinPhi * sinPhi) / b2 + d * sinPhi - 1) / d2b2;\r\n\r\n  return [\r\n    halfPi * (M + sqrt(m) * s),\r\n    halfPi * (N + sqrt(n < 0 ? 0 : n) * sign(-phi * b) * s)\r\n  ];\r\n}\r\n\r\nnicolosiRaw.invert = function(x, y) {\r\n\r\n  x /= halfPi;\r\n  y /= halfPi;\r\n\r\n  var x2 = x * x,\r\n    y2 = y * y,\r\n    x2y2 = x2 + y2,\r\n    pi2 = pi * pi;\r\n\r\n  return [\r\n    x ? (x2y2 -1 + sqrt((1 - x2y2) * (1 - x2y2) + 4 * x2)) / (2 * x) * halfPi : 0,\r\n    solve(function(phi) {\r\n      return (\r\n        x2y2 * (pi * sin(phi) - 2 * phi) * pi +\r\n        4 * phi * phi * (y - sin(phi)) +\r\n        2 * pi * phi -\r\n        pi2 * y\r\n      );\r\n    }, 0)\r\n  ];\r\n};\r\n\r\nexport default function() {\r\n  return projection(nicolosiRaw)\r\n    .scale(127.267);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}