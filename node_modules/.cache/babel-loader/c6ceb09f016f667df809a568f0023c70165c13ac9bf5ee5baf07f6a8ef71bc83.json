{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"p\", {\n  style: {\n    \"font-size\": \"20px\"\n  }\n}, \"Please upload your .CSV:\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_3 = {\n  ref: \"chart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_toolbar_title = _resolveComponent(\"v-toolbar-title\");\n  const _component_v_toolbar = _resolveComponent(\"v-toolbar\");\n  const _component_v_file_input = _resolveComponent(\"v-file-input\");\n  const _component_v_spacer = _resolveComponent(\"v-spacer\");\n  const _component_v_btn = _resolveComponent(\"v-btn\");\n  const _component_v_row = _resolveComponent(\"v-row\");\n  const _component_v_card_text = _resolveComponent(\"v-card-text\");\n  const _component_v_select = _resolveComponent(\"v-select\");\n  const _component_v_card = _resolveComponent(\"v-card\");\n  const _component_v_container = _resolveComponent(\"v-container\");\n  const _component_v_main = _resolveComponent(\"v-main\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_v_toolbar, {\n    style: {\n      \"color\": \"white\"\n    },\n    color: \"#4b0082\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_toolbar_title, null, {\n      default: _withCtx(() => [_createTextVNode(\"BioGears Plotting Tool\")]),\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_main, {\n    class: \"bg-grey-lighten-3\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_container, null, {\n      default: _withCtx(() => [_createVNode(_component_v_card, {\n        class: \"mt-n12\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_v_card_text, null, {\n          default: _withCtx(() => [_hoisted_1, _hoisted_2, _createVNode(_component_v_file_input, {\n            modelValue: _ctx.chosenFile,\n            \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.chosenFile = $event)\n          }, null, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_v_spacer), _createVNode(_component_v_row, null, {\n            default: _withCtx(() => [_createVNode(_component_v_btn, {\n              onClick: $options.importFile\n            }, {\n              default: _withCtx(() => [_createTextVNode(\"Import File\")]),\n              _: 1 /* STABLE */\n            }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_v_btn, {\n              onClick: $options.plotChart\n            }, {\n              default: _withCtx(() => [_createTextVNode(\"Plot Chart\")]),\n              _: 1 /* STABLE */\n            }, 8 /* PROPS */, [\"onClick\"])]),\n            _: 1 /* STABLE */\n          })]),\n\n          _: 1 /* STABLE */\n        }), _createVNode(_component_v_select, {\n          id: \"selectButton\",\n          items: _ctx.allGroup.slice(1)\n        }, null, 8 /* PROPS */, [\"items\"]), _createElementVNode(\"div\", _hoisted_3, null, 512 /* NEED_PATCH */)]),\n\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  })], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";gCAQYA,oBAAuD;EAApDC,KAAuB,EAAvB;IAAA;EAAA;AAAuB,GAAC,0BAAwB;gCACnDD,oBAAI;;EASHE,GAAG,EAAC;AAAO;;;;;;;;;;;;;6DAjBpBC,aAEYC;IAFDH,KAAoB,EAApB;MAAA;IAAA,CAAoB;IAACI,KAAK,EAAC;;sBACpC,MAAyD,CAAzDF,aAAyDG;wBAAxC,MAAsB,kBAAtB,wBAAsB;;;;;MAEzCH,aAiBSI;IAjBDC,KAAK,EAAC;EAAmB;sBAC/B,MAec,CAfdL,aAecM;wBAdZ,MAaS,CAbTN,aAaSO;QAbDF,KAAK,EAAC;MAAQ;0BACpB,MASY,CATZL,aASYQ;4BARV,MAAuD,CAAvDC,UAAuD,EACvDC,UAAI,EACJV,aAAkDW;wBAA3BC,eAAU;uEAAVA,eAAU;mDACjCZ,aAAqBa,sBACrBb,aAGQc;8BAFR,MAA8C,CAA9Cd,aAA8Ce;cAAtCC,OAAK,EAAEC;YAAU;gCAAE,MAAW,kBAAX,aAAW;;4CACtCjB,aAA4Ce;cAApCC,OAAK,EAAEC;YAAS;gCAAE,MAAU,kBAAV,YAAU;;;;;;;YAGxCjB,aAAkEkB;UAAxDC,EAAE,EAAC,cAAc;UAAEC,KAAK,EAAER,aAAQ,CAACS,KAAK;4CAClDxB,oBAAuB,OAAvByB,UAAuB","names":["_createElementVNode","style","ref","_createVNode","_component_v_toolbar","color","_component_v_toolbar_title","_component_v_main","class","_component_v_container","_component_v_card","_component_v_card_text","_hoisted_1","_hoisted_2","_component_v_file_input","_ctx","_component_v_spacer","_component_v_row","_component_v_btn","onClick","$options","_component_v_select","id","items","slice","_hoisted_3"],"sourceRoot":"","sources":["/Users/stlp/Desktop/Spring 2023/BIOEN 405/User Interface/MoHSES-Scenario-User-Interface/src/views/PlottingView.vue"],"sourcesContent":["<template>\n    <v-toolbar style=\"color: white\" color=\"#4b0082\">\n      <v-toolbar-title>BioGears Plotting Tool</v-toolbar-title>\n    </v-toolbar>\n    <v-main class=\"bg-grey-lighten-3\">\n      <v-container>\n        <v-card class=\"mt-n12\">\n          <v-card-text>\n            <p style=\"font-size: 20px\">Please upload your .CSV:</p>\n            <br>\n            <v-file-input v-model=\"chosenFile\"></v-file-input>\n            <v-spacer></v-spacer>\n            <v-row>\n            <v-btn @click=\"importFile\">Import File</v-btn>\n            <v-btn @click=\"plotChart\">Plot Chart</v-btn>\n            </v-row>\n        </v-card-text>\n        <v-select id=\"selectButton\" :items=\"allGroup.slice(1)\"></v-select>\n        <div ref=\"chart\"></div>\n        </v-card>\n      </v-container>\n    </v-main>\n  </template>\n  \n<script>\nimport * as d3 from 'd3';\n\nexport default {\n      data: () => ({\n        chosenFile: null,\n        data: null,\n        columnData:[],\n        array2D: null,\n        allGroup: []\n      }),\n      methods: {\n        importFile() {\n      \n      if (this.chosenFile === null) {\n        this.data = \"No File Chosen\"\n      } else {\n        var reader = new FileReader();\n        var file = this.chosenFile[0]\n        // Use the javascript reader object to load the contents\n        // of the file in the v-model prop\n        reader.readAsText(file);\n        reader.onload = () => {\n        this.data = reader.result;\n        const rows = this.data.split('\\n')\n        this.array2D = Array.from({ length: rows[0].split(',').length }, () => []);\n        for (let i=0; i<rows.length;i++) {\n            const columns = rows[i].split(',');\n            for (let j =0; j<columns.length;j++) {\n                this.array2D[j].push(columns[j]);\n            }\n        }\n        console.log(this.array2D)\n      }\n    }\n},\n\nplotChart () {\n    const margin = { top: 20, right: 20, bottom: 30, left: 50 };\n    const width = 600 - margin.left - margin.right;\n    const height = 400 - margin.top - margin.bottom;\n    for (let i=0; i<this.array2D.length;i++) {\n        this.allGroup.push(this.array2D[i][0])\n        this.array2D[i] = this.array2D[i].slice(1).map(str => parseInt(str));\n    }\n    console.log(this.allGroup)\n    console.log(this.array2D)\n    // Assume that `data` is a 2D array where the first row contains X-axis values and the second row contains Y-axis values\n    // const data = [      [1, 2, 3, 4, 5], // X-axis values\n    //   [1, 3, 2, 4, 5]  // Y-axis values\n    // ];\n    \n        \n\n\n    // Define the scales for the X and Y axes\n    const xScale = d3.scaleLinear()\n      .domain([d3.min(this.array2D[0]), d3.max(this.array2D[0])])\n      .range([0, width]);\n\n    const yScale = d3.scaleLinear()\n      .domain([0, d3.max(this.array2D[1])])\n      .range([height, 0]);\n\n    // Define the line function\n    const line = d3.line()\n      .x((d, i) => xScale(this.array2D[0][i]))\n      .y((d, i) => yScale(this.array2D[1][i]));\n\n    // Create the SVG element\n    const svg = d3.select(this.$refs.chart)\n      .append('svg')\n      .attr('width', width + margin.left + margin.right)\n      .attr('height', height + margin.top + margin.bottom)\n      .append('g')\n      .attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n    // Create the line path\n    svg.append('path')\n      .datum(this.array2D[0])\n      .attr('d', line)\n      .attr('fill', 'none')\n      .attr('stroke', 'steelblue')\n      .attr('stroke-width', 2);\n\n    // Create the X and Y axes\n    const xAxis = d3.axisBottom(xScale);\n    const yAxis = d3.axisLeft(yScale);\n\n    svg.append('g')\n      .attr('transform', `translate(0, ${height})`)\n      .call(xAxis);\n\n    svg.append('g')\n      .call(yAxis);\n  }\n\n  }\n,\n\n\n}\n\n</script>\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}