{"ast":null,"code":"import { isArray, isNumber } from 'vega-util';\nimport { isBinned, isBinning, isBinParams } from '../../../bin';\nimport { getOffsetChannel, getSecondaryRangeChannel, getSizeChannel, getVgPositionChannel, isPolarPositionChannel, isXorY } from '../../../channel';\nimport { getBandSize, isFieldDef, isFieldOrDatumDef, vgField } from '../../../channeldef';\nimport { getViewConfigDiscreteStep } from '../../../config';\nimport * as log from '../../../log';\nimport { isRelativeBandSize } from '../../../mark';\nimport { hasDiscreteDomain } from '../../../scale';\nimport { isSignalRef, isVgRangeStep } from '../../../vega.schema';\nimport { getMarkPropOrConfig, signalOrStringValue, signalOrValueRef } from '../../common';\nimport { nonPosition } from './nonposition';\nimport { positionOffset } from './offset';\nimport { vgAlignedPositionChannel } from './position-align';\nimport { pointPositionDefaultRef } from './position-point';\nimport { rangePosition } from './position-range';\nimport * as ref from './valueref';\nexport function rectPosition(model, channel) {\n  const {\n    config,\n    encoding,\n    markDef\n  } = model;\n  const mark = markDef.type;\n  const channel2 = getSecondaryRangeChannel(channel);\n  const sizeChannel = getSizeChannel(channel);\n  const channelDef = encoding[channel];\n  const channelDef2 = encoding[channel2];\n  const scale = model.getScaleComponent(channel);\n  const scaleType = scale ? scale.get('type') : undefined;\n  const orient = markDef.orient;\n  const hasSizeDef = encoding[sizeChannel] ?? encoding.size ?? getMarkPropOrConfig('size', markDef, config, {\n    vgChannel: sizeChannel\n  });\n  const isBarBand = mark === 'bar' && (channel === 'x' ? orient === 'vertical' : orient === 'horizontal');\n  // x, x2, and width -- we must specify two of these in all conditions\n  if (isFieldDef(channelDef) && (isBinning(channelDef.bin) || isBinned(channelDef.bin) || channelDef.timeUnit && !channelDef2) && !(hasSizeDef && !isRelativeBandSize(hasSizeDef)) && !hasDiscreteDomain(scaleType)) {\n    return rectBinPosition({\n      fieldDef: channelDef,\n      fieldDef2: channelDef2,\n      channel,\n      model\n    });\n  } else if ((isFieldOrDatumDef(channelDef) && hasDiscreteDomain(scaleType) || isBarBand) && !channelDef2) {\n    return positionAndSize(channelDef, channel, model);\n  } else {\n    return rangePosition(channel, model, {\n      defaultPos: 'zeroOrMax',\n      defaultPos2: 'zeroOrMin'\n    });\n  }\n}\nfunction defaultSizeRef(sizeChannel, scaleName, scale, config, bandSize) {\n  if (isRelativeBandSize(bandSize)) {\n    if (scale) {\n      const scaleType = scale.get('type');\n      if (scaleType === 'band') {\n        let bandWidth = `bandwidth('${scaleName}')`;\n        if (bandSize.band !== 1) {\n          bandWidth = `${bandSize.band} * ${bandWidth}`;\n        }\n        // TODO(#8351): make 0.25 here configurable\n        return {\n          signal: `max(0.25, ${bandWidth})`\n        };\n      } else if (bandSize.band !== 1) {\n        log.warn(log.message.cannotUseRelativeBandSizeWithNonBandScale(scaleType));\n        bandSize = undefined;\n      }\n    } else {\n      return {\n        mult: bandSize.band,\n        field: {\n          group: sizeChannel\n        }\n      };\n    }\n  } else if (isSignalRef(bandSize)) {\n    return bandSize;\n  } else if (bandSize) {\n    return {\n      value: bandSize\n    };\n  }\n  // no valid band size\n  if (scale) {\n    const scaleRange = scale.get('range');\n    if (isVgRangeStep(scaleRange) && isNumber(scaleRange.step)) {\n      return {\n        value: scaleRange.step - 2\n      };\n    }\n  }\n  const defaultStep = getViewConfigDiscreteStep(config.view, sizeChannel);\n  return {\n    value: defaultStep - 2\n  };\n}\n/**\n * Output position encoding and its size encoding for continuous, point, and band scales.\n */\nfunction positionAndSize(fieldDef, channel, model) {\n  const {\n    markDef,\n    encoding,\n    config,\n    stack\n  } = model;\n  const orient = markDef.orient;\n  const scaleName = model.scaleName(channel);\n  const scale = model.getScaleComponent(channel);\n  const vgSizeChannel = getSizeChannel(channel);\n  const channel2 = getSecondaryRangeChannel(channel);\n  const offsetScaleChannel = getOffsetChannel(channel);\n  const offsetScaleName = model.scaleName(offsetScaleChannel);\n  // use \"size\" channel for bars, if there is orient and the channel matches the right orientation\n  const useVlSizeChannel = orient === 'horizontal' && channel === 'y' || orient === 'vertical' && channel === 'x';\n  // Use size encoding / mark property / config if it exists\n  let sizeMixins;\n  if (encoding.size || markDef.size) {\n    if (useVlSizeChannel) {\n      sizeMixins = nonPosition('size', model, {\n        vgChannel: vgSizeChannel,\n        defaultRef: signalOrValueRef(markDef.size)\n      });\n    } else {\n      log.warn(log.message.cannotApplySizeToNonOrientedMark(markDef.type));\n    }\n  }\n  const hasSizeFromMarkOrEncoding = !!sizeMixins;\n  // Otherwise, apply default value\n  const bandSize = getBandSize({\n    channel,\n    fieldDef,\n    markDef,\n    config,\n    scaleType: scale?.get('type'),\n    useVlSizeChannel\n  });\n  sizeMixins = sizeMixins || {\n    [vgSizeChannel]: defaultSizeRef(vgSizeChannel, offsetScaleName || scaleName, scale, config, bandSize)\n  };\n  /*\n    Band scales with size value and all point scales, use xc/yc + band=0.5\n       Otherwise (band scales that has size based on a band ref), use x/y with position band = (1 - size_band) / 2.\n    In this case, size_band is the band specified in the x/y-encoding.\n    By default band is 1, so `(1 - band) / 2` = 0.\n    If band is 0.6, the the x/y position in such case should be `(1 - band) / 2` = 0.2\n   */\n  const defaultBandAlign = scale?.get('type') === 'band' && isRelativeBandSize(bandSize) && !hasSizeFromMarkOrEncoding ? 'top' : 'middle';\n  const vgChannel = vgAlignedPositionChannel(channel, markDef, config, defaultBandAlign);\n  const center = vgChannel === 'xc' || vgChannel === 'yc';\n  const {\n    offset,\n    offsetType\n  } = positionOffset({\n    channel,\n    markDef,\n    encoding,\n    model,\n    bandPosition: center ? 0.5 : 0\n  });\n  const posRef = ref.midPointRefWithPositionInvalidTest({\n    channel,\n    channelDef: fieldDef,\n    markDef,\n    config,\n    scaleName,\n    scale,\n    stack,\n    offset,\n    defaultRef: pointPositionDefaultRef({\n      model,\n      defaultPos: 'mid',\n      channel,\n      scaleName,\n      scale\n    }),\n    bandPosition: center ? offsetType === 'encoding' ? 0 : 0.5 : isSignalRef(bandSize) ? {\n      signal: `(1-${bandSize})/2`\n    } : isRelativeBandSize(bandSize) ? (1 - bandSize.band) / 2 : 0\n  });\n  if (vgSizeChannel) {\n    return {\n      [vgChannel]: posRef,\n      ...sizeMixins\n    };\n  } else {\n    // otherwise, we must simulate size by setting position2 = position + size\n    // (for theta/radius since Vega doesn't have thetaWidth/radiusWidth)\n    const vgChannel2 = getVgPositionChannel(channel2);\n    const sizeRef = sizeMixins[vgSizeChannel];\n    const sizeOffset = offset ? {\n      ...sizeRef,\n      offset\n    } : sizeRef;\n    return {\n      [vgChannel]: posRef,\n      // posRef might be an array that wraps position invalid test\n      [vgChannel2]: isArray(posRef) ? [posRef[0], {\n        ...posRef[1],\n        offset: sizeOffset\n      }] : {\n        ...posRef,\n        offset: sizeOffset\n      }\n    };\n  }\n}\nfunction getBinSpacing(channel, spacing, reverse, translate, offset) {\n  if (isPolarPositionChannel(channel)) {\n    return 0;\n  }\n  const spacingOffset = channel === 'x' || channel === 'y2' ? -spacing / 2 : spacing / 2;\n  if (isSignalRef(reverse) || isSignalRef(offset) || isSignalRef(translate)) {\n    const reverseExpr = signalOrStringValue(reverse);\n    const offsetExpr = signalOrStringValue(offset);\n    const translateExpr = signalOrStringValue(translate);\n    const t = translateExpr ? `${translateExpr} + ` : '';\n    const r = reverseExpr ? `(${reverseExpr} ? -1 : 1) * ` : '';\n    const o = offsetExpr ? `(${offsetExpr} + ${spacingOffset})` : spacingOffset;\n    return {\n      signal: t + r + o\n    };\n  } else {\n    offset = offset || 0;\n    return translate + (reverse ? -offset - spacingOffset : +offset + spacingOffset);\n  }\n}\nfunction rectBinPosition({\n  fieldDef,\n  fieldDef2,\n  channel,\n  model\n}) {\n  const {\n    config,\n    markDef,\n    encoding\n  } = model;\n  const scale = model.getScaleComponent(channel);\n  const scaleName = model.scaleName(channel);\n  const scaleType = scale ? scale.get('type') : undefined;\n  const reverse = scale.get('reverse');\n  const bandSize = getBandSize({\n    channel,\n    fieldDef,\n    markDef,\n    config,\n    scaleType\n  });\n  const axis = model.component.axes[channel]?.[0];\n  const axisTranslate = axis?.get('translate') ?? 0.5; // vega default is 0.5\n  const spacing = isXorY(channel) ? getMarkPropOrConfig('binSpacing', markDef, config) ?? 0 : 0;\n  const channel2 = getSecondaryRangeChannel(channel);\n  const vgChannel = getVgPositionChannel(channel);\n  const vgChannel2 = getVgPositionChannel(channel2);\n  const {\n    offset\n  } = positionOffset({\n    channel,\n    markDef,\n    encoding,\n    model,\n    bandPosition: 0\n  });\n  const bandPosition = isSignalRef(bandSize) ? {\n    signal: `(1-${bandSize.signal})/2`\n  } : isRelativeBandSize(bandSize) ? (1 - bandSize.band) / 2 : 0.5;\n  if (isBinning(fieldDef.bin) || fieldDef.timeUnit) {\n    return {\n      [vgChannel2]: rectBinRef({\n        fieldDef,\n        scaleName,\n        bandPosition,\n        offset: getBinSpacing(channel2, spacing, reverse, axisTranslate, offset)\n      }),\n      [vgChannel]: rectBinRef({\n        fieldDef,\n        scaleName,\n        bandPosition: isSignalRef(bandPosition) ? {\n          signal: `1-${bandPosition.signal}`\n        } : 1 - bandPosition,\n        offset: getBinSpacing(channel, spacing, reverse, axisTranslate, offset)\n      })\n    };\n  } else if (isBinned(fieldDef.bin)) {\n    const startRef = ref.valueRefForFieldOrDatumDef(fieldDef, scaleName, {}, {\n      offset: getBinSpacing(channel2, spacing, reverse, axisTranslate, offset)\n    });\n    if (isFieldDef(fieldDef2)) {\n      return {\n        [vgChannel2]: startRef,\n        [vgChannel]: ref.valueRefForFieldOrDatumDef(fieldDef2, scaleName, {}, {\n          offset: getBinSpacing(channel, spacing, reverse, axisTranslate, offset)\n        })\n      };\n    } else if (isBinParams(fieldDef.bin) && fieldDef.bin.step) {\n      return {\n        [vgChannel2]: startRef,\n        [vgChannel]: {\n          signal: `scale(\"${scaleName}\", ${vgField(fieldDef, {\n            expr: 'datum'\n          })} + ${fieldDef.bin.step})`,\n          offset: getBinSpacing(channel, spacing, reverse, axisTranslate, offset)\n        }\n      };\n    }\n  }\n  log.warn(log.message.channelRequiredForBinned(channel2));\n  return undefined;\n}\n/**\n * Value Ref for binned fields\n */\nexport function rectBinRef({\n  fieldDef,\n  scaleName,\n  bandPosition,\n  offset\n}) {\n  return ref.interpolatedSignalRef({\n    scaleName,\n    fieldOrDatumDef: fieldDef,\n    bandPosition,\n    offset\n  });\n}","map":{"version":3,"mappings":"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","names":["isArray","isNumber","isBinned","isBinning","isBinParams","getOffsetChannel","getSecondaryRangeChannel","getSizeChannel","getVgPositionChannel","isPolarPositionChannel","isXorY","getBandSize","isFieldDef","isFieldOrDatumDef","vgField","getViewConfigDiscreteStep","log","isRelativeBandSize","hasDiscreteDomain","isSignalRef","isVgRangeStep","getMarkPropOrConfig","signalOrStringValue","signalOrValueRef","nonPosition","positionOffset","vgAlignedPositionChannel","pointPositionDefaultRef","rangePosition","ref","rectPosition","model","channel","config","encoding","markDef","mark","type","channel2","sizeChannel","channelDef","channelDef2","scale","getScaleComponent","scaleType","get","undefined","orient","hasSizeDef","size","vgChannel","isBarBand","bin","timeUnit","rectBinPosition","fieldDef","fieldDef2","positionAndSize","defaultPos","defaultPos2","defaultSizeRef","scaleName","bandSize","bandWidth","band","signal","warn","message","cannotUseRelativeBandSizeWithNonBandScale","mult","field","group","value","scaleRange","step","defaultStep","view","stack","vgSizeChannel","offsetScaleChannel","offsetScaleName","useVlSizeChannel","sizeMixins","defaultRef","cannotApplySizeToNonOrientedMark","hasSizeFromMarkOrEncoding","defaultBandAlign","center","offset","offsetType","bandPosition","posRef","midPointRefWithPositionInvalidTest","vgChannel2","sizeRef","sizeOffset","getBinSpacing","spacing","reverse","translate","spacingOffset","reverseExpr","offsetExpr","translateExpr","t","r","o","axis","component","axes","axisTranslate","rectBinRef","startRef","valueRefForFieldOrDatumDef","expr","channelRequiredForBinned","interpolatedSignalRef","fieldOrDatumDef"],"sourceRoot":"","sources":["../../../../../src/compile/mark/encode/position-rect.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}