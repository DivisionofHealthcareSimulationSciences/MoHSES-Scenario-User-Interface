{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport vegaEmbed from 'vega-embed';\nexport default {\n  data: () => ({\n    currentSpec: null,\n    chosenFile: null,\n    data: null,\n    columnData: [],\n    array2D: null,\n    allGroup: [],\n    selectPlot: null\n  }),\n  methods: {\n    async downloadChart() {\n      if (!this.currentSpec) {\n        return; // Exit the method if no chart has been plotted\n      }\n      // Get the Vega view instance from the vegaEmbed function\n      const {\n        view\n      } = await vegaEmbed(this.$refs.chart, this.currentSpec, {\n        actions: false\n      });\n      // Generate the PNG image data URL\n      const dataUrl = await view.toImageURL('png');\n      // Create a temporary link element for downloading the chart\n      const link = document.createElement('a');\n      link.href = dataUrl;\n      link.download = 'chart.png';\n      link.style.display = 'none';\n      // Add the link to the DOM, click it, and remove it\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    },\n    importFile() {\n      if (this.chosenFile === null) {\n        this.data = \"No File Chosen\";\n      } else {\n        var reader = new FileReader();\n        var file = this.chosenFile[0];\n        // Use the javascript reader object to load the contents\n        // of the file in the v-model prop\n        reader.readAsText(file);\n        reader.onload = () => {\n          this.data = reader.result;\n          const rows = this.data.split('\\n');\n          this.array2D = Array.from({\n            length: rows[0].split(',').length\n          }, () => []);\n          for (let i = 0; i < rows.length; i++) {\n            const columns = rows[i].split(',');\n            for (let j = 0; j < columns.length; j++) {\n              this.array2D[j].push(columns[j]);\n            }\n          }\n          for (let i = 0; i < this.array2D.length; i++) {\n            this.allGroup.push(this.array2D[i][0]);\n            this.array2D[i] = this.array2D[i].slice(1).map(str => parseFloat(str));\n          }\n          console.log(this.allGroup);\n          console.log(this.array2D);\n          console.log(this.array2D);\n        };\n      }\n    },\n    plotChart(data) {\n      const xAxisData = this.array2D[0];\n      const yAxisData = data;\n      const dataset = xAxisData.map((value, index) => ({\n        xValue: value,\n        yValue: yAxisData[index]\n      }));\n      const spec = {\n        $schema: 'https://vega.github.io/schema/vega-lite/v5.json',\n        data: {\n          values: dataset\n        },\n        mark: 'line',\n        title: {\n          text: this.selectPlot + ' Versus Time (s)',\n          // Set the title text\n          anchor: 'middle',\n          // Position the title (start, middle, or end)\n          fontSize: 16,\n          // Set the font size\n          fontWeight: 'bold',\n          // Set the font weight\n          dy: -10 // Adjust the vertical distance between the title and the chart\n        },\n\n        encoding: {\n          x: {\n            field: 'xValue',\n            type: 'quantitative',\n            title: 'Time (s)'\n          },\n          y: {\n            field: 'yValue',\n            type: 'quantitative',\n            title: this.selectPlot\n          },\n          tooltip: [{\n            field: 'xValue',\n            type: 'quantitative',\n            title: 'Time (s)'\n          }, {\n            field: 'yValue',\n            type: 'quantitative',\n            title: this.selectPlot\n          }]\n        },\n        selection: {\n          mySelection: {\n            type: 'interval',\n            bind: 'scales',\n            // Bind the selection to the chart scales\n            encodings: ['x', 'y'],\n            // Apply the selection to both x and y axes\n            zoom: true,\n            // Enable zooming\n            translate: true // Enable panning\n          }\n        },\n\n        width: 700,\n        // Add the desired width\n        height: 550 // Add the desired height\n      };\n\n      vegaEmbed(this.$refs.chart, spec, {\n        actions: false\n      });\n      return spec;\n    },\n    plotSelectedChart() {\n      if (this.array2D && this.allGroup && this.selectPlot) {\n        this.currentSpec = this.plotChart(this.array2D[this.allGroup.indexOf(this.selectPlot)]);\n      }\n    }\n  }\n};","map":{"version":3,"mappings":";AAuCA,OAAOA,SAAQ,MAAO,YAAY;AAClC,eAAe;EACdC,IAAI,EAAE,OAAO;IACZC,WAAW,EAAE,IAAI;IACjBC,UAAU,EAAE,IAAI;IAChBF,IAAI,EAAE,IAAI;IACVG,UAAU,EAAE,EAAE;IACdC,OAAO,EAAE,IAAI;IACbC,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE;EACb,CAAC,CAAC;EACFC,OAAO,EAAE;IACR,MAAMC,aAAa,GAAG;MACpB,IAAG,CAAC,IAAI,CAACP,WAAW,EAAE;QACrB,OAAM,CAAE;MACT;MACA;MACA,MAAM;QACLQ;MACD,IAAI,MAAMV,SAAS,CAAC,IAAI,CAACW,KAAK,CAACC,KAAK,EAAE,IAAI,CAACV,WAAW,EAAE;QACvDW,OAAO,EAAE;MACV,CAAC,CAAC;MACF;MACA,MAAMC,OAAM,GAAI,MAAMJ,IAAI,CAACK,UAAU,CAAC,KAAK,CAAC;MAC5C;MACA,MAAMC,IAAG,GAAIC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;MACxCF,IAAI,CAACG,IAAG,GAAIL,OAAO;MACnBE,IAAI,CAACI,QAAO,GAAI,WAAW;MAC3BJ,IAAI,CAACK,KAAK,CAACC,OAAM,GAAI,MAAM;MAC3B;MACAL,QAAQ,CAACM,IAAI,CAACC,WAAW,CAACR,IAAI,CAAC;MAC/BA,IAAI,CAACS,KAAK,EAAE;MACZR,QAAQ,CAACM,IAAI,CAACG,WAAW,CAACV,IAAI,CAAC;IAChC,CAAC;IACDW,UAAU,GAAG;MACZ,IAAG,IAAI,CAACxB,UAAS,KAAM,IAAI,EAAE;QAC5B,IAAI,CAACF,IAAG,GAAI,gBAAe;MAC5B,OAAO;QACN,IAAI2B,MAAK,GAAI,IAAIC,UAAU,EAAE;QAC7B,IAAIC,IAAG,GAAI,IAAI,CAAC3B,UAAU,CAAC,CAAC;QAC3B;QACA;QACDyB,MAAM,CAACG,UAAU,CAACD,IAAI,CAAC;QACvBF,MAAM,CAACI,MAAK,GAAI,MAAM;UACrB,IAAI,CAAC/B,IAAG,GAAI2B,MAAM,CAACK,MAAM;UACzB,MAAMC,IAAG,GAAI,IAAI,CAACjC,IAAI,CAACkC,KAAK,CAAC,IAAI;UACjC,IAAI,CAAC9B,OAAM,GAAI+B,KAAK,CAACC,IAAI,CAAC;YACzBC,MAAM,EAAEJ,IAAI,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAACG;UAC5B,CAAC,EAAE,MAAM,EAAE,CAAC;UACZ,KAAI,IAAIC,IAAI,CAAC,EAAEA,IAAIL,IAAI,CAACI,MAAM,EAAEC,CAAC,EAAE,EAAE;YACpC,MAAMC,OAAM,GAAIN,IAAI,CAACK,CAAC,CAAC,CAACJ,KAAK,CAAC,GAAG,CAAC;YAClC,KAAI,IAAIM,IAAI,CAAC,EAAEA,IAAID,OAAO,CAACF,MAAM,EAAEG,CAAC,EAAE,EAAE;cACvC,IAAI,CAACpC,OAAO,CAACoC,CAAC,CAAC,CAACC,IAAI,CAACF,OAAO,CAACC,CAAC,CAAC,CAAC;YACjC;UACD;UACA,KAAI,IAAIF,IAAI,CAAC,EAAEA,IAAI,IAAI,CAAClC,OAAO,CAACiC,MAAM,EAAEC,CAAC,EAAE,EAAE;YAC5C,IAAI,CAACjC,QAAQ,CAACoC,IAAI,CAAC,IAAI,CAACrC,OAAO,CAACkC,CAAC,CAAC,CAAC,CAAC,CAAC;YACrC,IAAI,CAAClC,OAAO,CAACkC,CAAC,IAAI,IAAI,CAAClC,OAAO,CAACkC,CAAC,CAAC,CAACI,KAAK,CAAC,CAAC,CAAC,CAACC,GAAG,CAACC,GAAE,IAAKC,UAAU,CAACD,GAAG,CAAC,CAAC;UACvE;UACAE,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC1C,QAAQ;UACzByC,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC3C,OAAO;UACxB0C,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC3C,OAAO;QACzB;MACD;IACD,CAAC;IACD4C,SAAS,CAAChD,IAAI,EAAE;MACf,MAAMiD,SAAQ,GAAI,IAAI,CAAC7C,OAAO,CAAC,CAAC,CAAC;MACjC,MAAM8C,SAAQ,GAAIlD,IAAI;MACtB,MAAMmD,OAAM,GAAIF,SAAS,CAACN,GAAG,CAAC,CAACS,KAAK,EAAEC,KAAK,MAAM;QAChDC,MAAM,EAAEF,KAAK;QACbG,MAAM,EAAEL,SAAS,CAACG,KAAK;MACxB,CAAC,CAAC,CAAC;MACH,MAAMG,IAAG,GAAI;QACZC,OAAO,EAAE,iDAAiD;QAC1DzD,IAAI,EAAE;UACL0D,MAAM,EAAEP;QACT,CAAC;QACDQ,IAAI,EAAE,MAAM;QACZC,KAAK,EAAE;UACNC,IAAI,EAAE,IAAI,CAACvD,UAAS,GAAI,kBAAkB;UAAE;UAC5CwD,MAAM,EAAE,QAAQ;UAAE;UAClBC,QAAQ,EAAE,EAAE;UAAE;UACdC,UAAU,EAAE,MAAM;UAAE;UACpBC,EAAE,EAAE,CAAC,EAAE,CAAE;QACV,CAAC;;QACDC,QAAQ,EAAE;UACTC,CAAC,EAAE;YACFC,KAAK,EAAE,QAAQ;YACfC,IAAI,EAAE,cAAc;YACpBT,KAAK,EAAE;UACR,CAAC;UACDU,CAAC,EAAE;YACFF,KAAK,EAAE,QAAQ;YACfC,IAAI,EAAE,cAAc;YACpBT,KAAK,EAAE,IAAI,CAACtD;UACb,CAAC;UACDiE,OAAO,EAAE,CAAC;YACTH,KAAK,EAAE,QAAQ;YACfC,IAAI,EAAE,cAAc;YACpBT,KAAK,EAAE;UACR,CAAC,EAAE;YACFQ,KAAK,EAAE,QAAQ;YACfC,IAAI,EAAE,cAAc;YACpBT,KAAK,EAAE,IAAI,CAACtD;UACb,CAAC;QACF,CAAC;QACDkE,SAAS,EAAE;UACVC,WAAW,EAAE;YACZJ,IAAI,EAAE,UAAU;YAChBK,IAAI,EAAE,QAAQ;YAAE;YAChBC,SAAS,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;YAAE;YACvBC,IAAI,EAAE,IAAI;YAAE;YACZC,SAAS,EAAE,IAAI,CAAE;UAClB;QACD,CAAC;;QACDC,KAAK,EAAE,GAAG;QAAE;QACZC,MAAM,EAAE,GAAG,CAAE;MACd,CAAC;;MACDhF,SAAS,CAAC,IAAI,CAACW,KAAK,CAACC,KAAK,EAAE6C,IAAI,EAAE;QACjC5C,OAAO,EAAE;MACV,CAAC,CAAC;MACF,OAAO4C,IAAG;IACX,CAAC;IACDwB,iBAAiB,GAAG;MACnB,IAAG,IAAI,CAAC5E,OAAM,IAAK,IAAI,CAACC,QAAO,IAAK,IAAI,CAACC,UAAU,EAAE;QACpD,IAAI,CAACL,WAAU,GAAI,IAAI,CAAC+C,SAAS,CAAC,IAAI,CAAC5C,OAAO,CAAC,IAAI,CAACC,QAAQ,CAAC4E,OAAO,CAAC,IAAI,CAAC3E,UAAU,CAAC,CAAC,CAAC;MACxF;IACD;EACF;AACD","names":["vegaEmbed","data","currentSpec","chosenFile","columnData","array2D","allGroup","selectPlot","methods","downloadChart","view","$refs","chart","actions","dataUrl","toImageURL","link","document","createElement","href","download","style","display","body","appendChild","click","removeChild","importFile","reader","FileReader","file","readAsText","onload","result","rows","split","Array","from","length","i","columns","j","push","slice","map","str","parseFloat","console","log","plotChart","xAxisData","yAxisData","dataset","value","index","xValue","yValue","spec","$schema","values","mark","title","text","anchor","fontSize","fontWeight","dy","encoding","x","field","type","y","tooltip","selection","mySelection","bind","encodings","zoom","translate","width","height","plotSelectedChart","indexOf"],"sourceRoot":"","sources":["/Users/stlp/Desktop/Spring 2023/BIOEN 405/User Interface/MoHSES-Scenario-User-Interface/src/views/PlottingView.vue"],"sourcesContent":["<template>\n\t<v-toolbar style=\"color: white\" color=\"#3c2d70\">\n\t\t<v-toolbar-title>BioGears Plotting Tool</v-toolbar-title>\n\t</v-toolbar>\n\t<v-main class=\"bg-grey-lighten-3\">\n\t\t<v-container>\n\t\t\t<v-card class=\"mt-n12\">\n\t\t\t\t<br>\n\t\t\t\t<v-card-title class=\"text-center\" style=\"font-size: 36px\">Welcome to the BioGears Plotting Tool!</v-card-title>\n\t\t\t\t<v-card-text>\n\t\t\t\t\t<br>\n\t\t\t\t\t<p style=\"font-size: 20px\">Please upload a simulation .CSV to visualize your results:</p>\n\t\t\t\t\t<br>\n\t\t\t\t\t<v-file-input v-model=\"chosenFile\"></v-file-input>\n\t\t\t\t\t<v-row>\n\t\t\t\t\t<v-col cols=\"2\">\n\t\t\t\t\t<v-btn style=\"color: white\" color=\"#3c2d70\" @click=\"importFile\">Import File</v-btn>\n\t\t\t\t\t</v-col>\n\t\t\t\t\t<v-col cols=\"9\">\n\t\t\t\t\t<v-select v-if=\"array2D\" label=\"Please select a variable to plot.\" v-model=\"selectPlot\" id=\"selectButton\" :items=\"allGroup.slice(1)\"></v-select>\n\t\t\t\t\t</v-col>\n\t\t\t\t\t</v-row>\n\t\t\t\t\t<v-row>\n\t\t\t\t\t\t<v-col cols=\"auto\" class=\"mr-2\">\n\t\t\t\t\t\t\t<v-btn style=\"color: white\" color=\"#3c2d70\" v-if=\"selectPlot\" @click=\"plotSelectedChart\">Plot Chart</v-btn>\n\t\t\t\t\t\t</v-col>\n\t\t\t\t\t\t<v-col cols=\"auto\">\n\t\t\t\t\t\t\t<v-btn style=\"color: white\" color=\"#3c2d70\" v-if=\"selectPlot\" @click=\"downloadChart\">Download Chart</v-btn>\n\t\t\t\t\t\t</v-col>\n\t\t\t\t\t</v-row>\n\t\t\t\t</v-card-text>\n\t\t\t\t<v-row justify=\"center\">\n\t\t\t\t\t<div ref=\"chart\" class=\"chart-container\"></div>\n\t\t\t\t</v-row>\n\t\t\t</v-card>\n\t\t</v-container>\n\t</v-main>\n</template>\n<script>\nimport vegaEmbed from 'vega-embed';\nexport default {\n\tdata: () => ({\n\t\tcurrentSpec: null,\n\t\tchosenFile: null,\n\t\tdata: null,\n\t\tcolumnData: [],\n\t\tarray2D: null,\n\t\tallGroup: [],\n\t\tselectPlot: null\n\t}),\n\tmethods: {\n\t\tasync downloadChart() {\n\t\t\t\tif(!this.currentSpec) {\n\t\t\t\t\treturn; // Exit the method if no chart has been plotted\n\t\t\t\t}\n\t\t\t\t// Get the Vega view instance from the vegaEmbed function\n\t\t\t\tconst {\n\t\t\t\t\tview\n\t\t\t\t} = await vegaEmbed(this.$refs.chart, this.currentSpec, {\n\t\t\t\t\tactions: false,\n\t\t\t\t});\n\t\t\t\t// Generate the PNG image data URL\n\t\t\t\tconst dataUrl = await view.toImageURL('png');\n\t\t\t\t// Create a temporary link element for downloading the chart\n\t\t\t\tconst link = document.createElement('a');\n\t\t\t\tlink.href = dataUrl;\n\t\t\t\tlink.download = 'chart.png';\n\t\t\t\tlink.style.display = 'none';\n\t\t\t\t// Add the link to the DOM, click it, and remove it\n\t\t\t\tdocument.body.appendChild(link);\n\t\t\t\tlink.click();\n\t\t\t\tdocument.body.removeChild(link);\n\t\t\t},\n\t\t\timportFile() {\n\t\t\t\tif(this.chosenFile === null) {\n\t\t\t\t\tthis.data = \"No File Chosen\"\n\t\t\t\t} else {\n\t\t\t\t\tvar reader = new FileReader();\n\t\t\t\t\tvar file = this.chosenFile[0]\n\t\t\t\t\t\t// Use the javascript reader object to load the contents\n\t\t\t\t\t\t// of the file in the v-model prop\n\t\t\t\t\treader.readAsText(file);\n\t\t\t\t\treader.onload = () => {\n\t\t\t\t\t\tthis.data = reader.result;\n\t\t\t\t\t\tconst rows = this.data.split('\\n')\n\t\t\t\t\t\tthis.array2D = Array.from({\n\t\t\t\t\t\t\tlength: rows[0].split(',').length\n\t\t\t\t\t\t}, () => []);\n\t\t\t\t\t\tfor(let i = 0; i < rows.length; i++) {\n\t\t\t\t\t\t\tconst columns = rows[i].split(',');\n\t\t\t\t\t\t\tfor(let j = 0; j < columns.length; j++) {\n\t\t\t\t\t\t\t\tthis.array2D[j].push(columns[j]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor(let i = 0; i < this.array2D.length; i++) {\n\t\t\t\t\t\t\tthis.allGroup.push(this.array2D[i][0])\n\t\t\t\t\t\t\tthis.array2D[i] = this.array2D[i].slice(1).map(str => parseFloat(str));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconsole.log(this.allGroup)\n\t\t\t\t\t\tconsole.log(this.array2D)\n\t\t\t\t\t\tconsole.log(this.array2D)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\tplotChart(data) {\n\t\t\t\tconst xAxisData = this.array2D[0];\n\t\t\t\tconst yAxisData = data;\n\t\t\t\tconst dataset = xAxisData.map((value, index) => ({\n\t\t\t\t\txValue: value,\n\t\t\t\t\tyValue: yAxisData[index]\n\t\t\t\t}));\n\t\t\t\tconst spec = {\n\t\t\t\t\t$schema: 'https://vega.github.io/schema/vega-lite/v5.json',\n\t\t\t\t\tdata: {\n\t\t\t\t\t\tvalues: dataset\n\t\t\t\t\t},\n\t\t\t\t\tmark: 'line',\n\t\t\t\t\ttitle: {\n\t\t\t\t\t\ttext: this.selectPlot + ' Versus Time (s)', // Set the title text\n\t\t\t\t\t\tanchor: 'middle', // Position the title (start, middle, or end)\n\t\t\t\t\t\tfontSize: 16, // Set the font size\n\t\t\t\t\t\tfontWeight: 'bold', // Set the font weight\n\t\t\t\t\t\tdy: -10, // Adjust the vertical distance between the title and the chart\n\t\t\t\t\t},\n\t\t\t\t\tencoding: {\n\t\t\t\t\t\tx: {\n\t\t\t\t\t\t\tfield: 'xValue',\n\t\t\t\t\t\t\ttype: 'quantitative',\n\t\t\t\t\t\t\ttitle: 'Time (s)'\n\t\t\t\t\t\t},\n\t\t\t\t\t\ty: {\n\t\t\t\t\t\t\tfield: 'yValue',\n\t\t\t\t\t\t\ttype: 'quantitative',\n\t\t\t\t\t\t\ttitle: this.selectPlot\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttooltip: [{\n\t\t\t\t\t\t\tfield: 'xValue',\n\t\t\t\t\t\t\ttype: 'quantitative',\n\t\t\t\t\t\t\ttitle: 'Time (s)'\n\t\t\t\t\t\t}, {\n\t\t\t\t\t\t\tfield: 'yValue',\n\t\t\t\t\t\t\ttype: 'quantitative',\n\t\t\t\t\t\t\ttitle: this.selectPlot\n\t\t\t\t\t\t}, ],\n\t\t\t\t\t},\n\t\t\t\t\tselection: {\n\t\t\t\t\t\tmySelection: {\n\t\t\t\t\t\t\ttype: 'interval',\n\t\t\t\t\t\t\tbind: 'scales', // Bind the selection to the chart scales\n\t\t\t\t\t\t\tencodings: ['x', 'y'], // Apply the selection to both x and y axes\n\t\t\t\t\t\t\tzoom: true, // Enable zooming\n\t\t\t\t\t\t\ttranslate: true, // Enable panning\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\twidth: 700, // Add the desired width\n\t\t\t\t\theight: 550, // Add the desired height\n\t\t\t\t};\n\t\t\t\tvegaEmbed(this.$refs.chart, spec, {\n\t\t\t\t\tactions: false\n\t\t\t\t});\n\t\t\t\treturn spec\n\t\t\t},\n\t\t\tplotSelectedChart() {\n\t\t\t\tif(this.array2D && this.allGroup && this.selectPlot) {\n\t\t\t\t\tthis.currentSpec = this.plotChart(this.array2D[this.allGroup.indexOf(this.selectPlot)]);\n\t\t\t\t}\n\t\t\t},\n\t}\n}\n</script>\n<style scoped>\n.chart-container {\n\tpadding-bottom: 50px;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}