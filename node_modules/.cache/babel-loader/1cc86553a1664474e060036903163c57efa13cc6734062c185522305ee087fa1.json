{"ast":null,"code":"import { geoProjection as projection } from \"d3-geo\";\nimport { mollweideBromleyTheta } from \"./mollweide.js\";\nimport { abs, cos, epsilon, pi, quarterPi, sin, sqrt2 } from \"./math.js\";\nvar k = 2.00276,\n  w = 1.11072;\nexport function boggsRaw(lambda, phi) {\n  var theta = mollweideBromleyTheta(pi, phi);\n  return [k * lambda / (1 / cos(phi) + w / cos(theta)), (phi + sqrt2 * sin(theta)) / k];\n}\nboggsRaw.invert = function (x, y) {\n  var ky = k * y,\n    theta = y < 0 ? -quarterPi : quarterPi,\n    i = 25,\n    delta,\n    phi;\n  do {\n    phi = ky - sqrt2 * sin(theta);\n    theta -= delta = (sin(2 * theta) + 2 * theta - pi * sin(phi)) / (2 * cos(2 * theta) + 2 + pi * cos(phi) * sqrt2 * cos(theta));\n  } while (abs(delta) > epsilon && --i > 0);\n  phi = ky - sqrt2 * sin(theta);\n  return [x * (1 / cos(phi) + w / cos(theta)) / k, phi];\n};\nexport default function () {\n  return projection(boggsRaw).scale(160.857);\n}","map":{"version":3,"names":["geoProjection","projection","mollweideBromleyTheta","abs","cos","epsilon","pi","quarterPi","sin","sqrt2","k","w","boggsRaw","lambda","phi","theta","invert","x","y","ky","i","delta","scale"],"sources":["C:/Users/sanik/Downloads/capstone/MoHSES-Scenario-User-Interface/node_modules/d3-geo-projection/src/boggs.js"],"sourcesContent":["import {geoProjection as projection} from \"d3-geo\";\r\nimport {mollweideBromleyTheta} from \"./mollweide.js\";\r\nimport {abs, cos, epsilon, pi, quarterPi, sin, sqrt2} from \"./math.js\";\r\n\r\nvar k = 2.00276,\r\n    w = 1.11072;\r\n\r\nexport function boggsRaw(lambda, phi) {\r\n  var theta = mollweideBromleyTheta(pi, phi);\r\n  return [k * lambda / (1 / cos(phi) + w / cos(theta)), (phi + sqrt2 * sin(theta)) / k];\r\n}\r\n\r\nboggsRaw.invert = function(x, y) {\r\n  var ky = k * y, theta = y < 0 ? -quarterPi : quarterPi, i = 25, delta, phi;\r\n  do {\r\n    phi = ky - sqrt2 * sin(theta);\r\n    theta -= delta = (sin(2 * theta) + 2 * theta - pi * sin(phi)) / (2 * cos(2 * theta) + 2 + pi * cos(phi) * sqrt2 * cos(theta));\r\n  } while (abs(delta) > epsilon && --i > 0);\r\n  phi = ky - sqrt2 * sin(theta);\r\n  return [x * (1 / cos(phi) + w / cos(theta)) / k, phi];\r\n};\r\n\r\nexport default function() {\r\n  return projection(boggsRaw)\r\n      .scale(160.857);\r\n}\r\n"],"mappings":"AAAA,SAAQA,aAAa,IAAIC,UAAU,QAAO,QAAQ;AAClD,SAAQC,qBAAqB,QAAO,gBAAgB;AACpD,SAAQC,GAAG,EAAEC,GAAG,EAAEC,OAAO,EAAEC,EAAE,EAAEC,SAAS,EAAEC,GAAG,EAAEC,KAAK,QAAO,WAAW;AAEtE,IAAIC,CAAC,GAAG,OAAO;EACXC,CAAC,GAAG,OAAO;AAEf,OAAO,SAASC,QAAQ,CAACC,MAAM,EAAEC,GAAG,EAAE;EACpC,IAAIC,KAAK,GAAGb,qBAAqB,CAACI,EAAE,EAAEQ,GAAG,CAAC;EAC1C,OAAO,CAACJ,CAAC,GAAGG,MAAM,IAAI,CAAC,GAAGT,GAAG,CAACU,GAAG,CAAC,GAAGH,CAAC,GAAGP,GAAG,CAACW,KAAK,CAAC,CAAC,EAAE,CAACD,GAAG,GAAGL,KAAK,GAAGD,GAAG,CAACO,KAAK,CAAC,IAAIL,CAAC,CAAC;AACvF;AAEAE,QAAQ,CAACI,MAAM,GAAG,UAASC,CAAC,EAAEC,CAAC,EAAE;EAC/B,IAAIC,EAAE,GAAGT,CAAC,GAAGQ,CAAC;IAAEH,KAAK,GAAGG,CAAC,GAAG,CAAC,GAAG,CAACX,SAAS,GAAGA,SAAS;IAAEa,CAAC,GAAG,EAAE;IAAEC,KAAK;IAAEP,GAAG;EAC1E,GAAG;IACDA,GAAG,GAAGK,EAAE,GAAGV,KAAK,GAAGD,GAAG,CAACO,KAAK,CAAC;IAC7BA,KAAK,IAAIM,KAAK,GAAG,CAACb,GAAG,CAAC,CAAC,GAAGO,KAAK,CAAC,GAAG,CAAC,GAAGA,KAAK,GAAGT,EAAE,GAAGE,GAAG,CAACM,GAAG,CAAC,KAAK,CAAC,GAAGV,GAAG,CAAC,CAAC,GAAGW,KAAK,CAAC,GAAG,CAAC,GAAGT,EAAE,GAAGF,GAAG,CAACU,GAAG,CAAC,GAAGL,KAAK,GAAGL,GAAG,CAACW,KAAK,CAAC,CAAC;EAC/H,CAAC,QAAQZ,GAAG,CAACkB,KAAK,CAAC,GAAGhB,OAAO,IAAI,EAAEe,CAAC,GAAG,CAAC;EACxCN,GAAG,GAAGK,EAAE,GAAGV,KAAK,GAAGD,GAAG,CAACO,KAAK,CAAC;EAC7B,OAAO,CAACE,CAAC,IAAI,CAAC,GAAGb,GAAG,CAACU,GAAG,CAAC,GAAGH,CAAC,GAAGP,GAAG,CAACW,KAAK,CAAC,CAAC,GAAGL,CAAC,EAAEI,GAAG,CAAC;AACvD,CAAC;AAED,eAAe,YAAW;EACxB,OAAOb,UAAU,CAACW,QAAQ,CAAC,CACtBU,KAAK,CAAC,OAAO,CAAC;AACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}