{"ast":null,"code":"import { geoProjectionMutator as projectionMutator } from \"d3-geo\";\nimport { atan2, cos, halfPi, sin, sqrt } from \"./math.js\";\nexport function bottomleyRaw(sinPsi) {\n  function forward(lambda, phi) {\n    var rho = halfPi - phi,\n      eta = rho ? lambda * sinPsi * sin(rho) / rho : rho;\n    return [rho * sin(eta) / sinPsi, halfPi - rho * cos(eta)];\n  }\n  forward.invert = function (x, y) {\n    var x1 = x * sinPsi,\n      y1 = halfPi - y,\n      rho = sqrt(x1 * x1 + y1 * y1),\n      eta = atan2(x1, y1);\n    return [(rho ? rho / sin(rho) : 1) * eta / sinPsi, halfPi - rho];\n  };\n  return forward;\n}\nexport default function () {\n  var sinPsi = 0.5,\n    m = projectionMutator(bottomleyRaw),\n    p = m(sinPsi);\n  p.fraction = function (_) {\n    return arguments.length ? m(sinPsi = +_) : sinPsi;\n  };\n  return p.scale(158.837);\n}","map":{"version":3,"names":["geoProjectionMutator","projectionMutator","atan2","cos","halfPi","sin","sqrt","bottomleyRaw","sinPsi","forward","lambda","phi","rho","eta","invert","x","y","x1","y1","m","p","fraction","_","arguments","length","scale"],"sources":["C:/Users/sanik/Downloads/capstone/MoHSES-Scenario-User-Interface/node_modules/d3-geo-projection/src/bottomley.js"],"sourcesContent":["import {geoProjectionMutator as projectionMutator} from \"d3-geo\";\r\nimport {atan2, cos, halfPi, sin, sqrt} from \"./math.js\";\r\n\r\nexport function bottomleyRaw(sinPsi) {\r\n\r\n  function forward(lambda, phi) {\r\n    var rho = halfPi - phi,\r\n        eta = rho ? lambda * sinPsi * sin(rho) / rho : rho;\r\n    return [rho * sin(eta) / sinPsi, halfPi - rho * cos(eta)];\r\n  }\r\n\r\n  forward.invert = function(x, y) {\r\n    var x1 = x * sinPsi,\r\n        y1 = halfPi - y,\r\n        rho = sqrt(x1 * x1 + y1 * y1),\r\n        eta = atan2(x1, y1);\r\n    return [(rho ? rho / sin(rho) : 1) * eta / sinPsi, halfPi - rho];\r\n  };\r\n\r\n  return forward;\r\n}\r\n\r\nexport default function() {\r\n  var sinPsi = 0.5,\r\n      m = projectionMutator(bottomleyRaw),\r\n      p = m(sinPsi);\r\n\r\n  p.fraction = function(_) {\r\n    return arguments.length ? m(sinPsi = +_) : sinPsi;\r\n  };\r\n\r\n  return p\r\n      .scale(158.837);\r\n}\r\n"],"mappings":"AAAA,SAAQA,oBAAoB,IAAIC,iBAAiB,QAAO,QAAQ;AAChE,SAAQC,KAAK,EAAEC,GAAG,EAAEC,MAAM,EAAEC,GAAG,EAAEC,IAAI,QAAO,WAAW;AAEvD,OAAO,SAASC,YAAY,CAACC,MAAM,EAAE;EAEnC,SAASC,OAAO,CAACC,MAAM,EAAEC,GAAG,EAAE;IAC5B,IAAIC,GAAG,GAAGR,MAAM,GAAGO,GAAG;MAClBE,GAAG,GAAGD,GAAG,GAAGF,MAAM,GAAGF,MAAM,GAAGH,GAAG,CAACO,GAAG,CAAC,GAAGA,GAAG,GAAGA,GAAG;IACtD,OAAO,CAACA,GAAG,GAAGP,GAAG,CAACQ,GAAG,CAAC,GAAGL,MAAM,EAAEJ,MAAM,GAAGQ,GAAG,GAAGT,GAAG,CAACU,GAAG,CAAC,CAAC;EAC3D;EAEAJ,OAAO,CAACK,MAAM,GAAG,UAASC,CAAC,EAAEC,CAAC,EAAE;IAC9B,IAAIC,EAAE,GAAGF,CAAC,GAAGP,MAAM;MACfU,EAAE,GAAGd,MAAM,GAAGY,CAAC;MACfJ,GAAG,GAAGN,IAAI,CAACW,EAAE,GAAGA,EAAE,GAAGC,EAAE,GAAGA,EAAE,CAAC;MAC7BL,GAAG,GAAGX,KAAK,CAACe,EAAE,EAAEC,EAAE,CAAC;IACvB,OAAO,CAAC,CAACN,GAAG,GAAGA,GAAG,GAAGP,GAAG,CAACO,GAAG,CAAC,GAAG,CAAC,IAAIC,GAAG,GAAGL,MAAM,EAAEJ,MAAM,GAAGQ,GAAG,CAAC;EAClE,CAAC;EAED,OAAOH,OAAO;AAChB;AAEA,eAAe,YAAW;EACxB,IAAID,MAAM,GAAG,GAAG;IACZW,CAAC,GAAGlB,iBAAiB,CAACM,YAAY,CAAC;IACnCa,CAAC,GAAGD,CAAC,CAACX,MAAM,CAAC;EAEjBY,CAAC,CAACC,QAAQ,GAAG,UAASC,CAAC,EAAE;IACvB,OAAOC,SAAS,CAACC,MAAM,GAAGL,CAAC,CAACX,MAAM,GAAG,CAACc,CAAC,CAAC,GAAGd,MAAM;EACnD,CAAC;EAED,OAAOY,CAAC,CACHK,KAAK,CAAC,OAAO,CAAC;AACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}