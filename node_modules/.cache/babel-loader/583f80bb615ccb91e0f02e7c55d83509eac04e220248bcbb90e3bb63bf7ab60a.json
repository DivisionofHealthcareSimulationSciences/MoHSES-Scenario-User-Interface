{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as d3 from 'd3';\nexport default {\n  data: () => ({\n    chosenFile: null,\n    data: null,\n    columnData: [],\n    array2D: null,\n    allGroup: [],\n    selectPlot: null\n  }),\n  methods: {\n    importFile() {\n      if (this.chosenFile === null) {\n        this.data = \"No File Chosen\";\n      } else {\n        var reader = new FileReader();\n        var file = this.chosenFile[0];\n        // Use the javascript reader object to load the contents\n        // of the file in the v-model prop\n        reader.readAsText(file);\n        reader.onload = () => {\n          this.data = reader.result;\n          const rows = this.data.split('\\n');\n          this.array2D = Array.from({\n            length: rows[0].split(',').length\n          }, () => []);\n          for (let i = 0; i < rows.length; i++) {\n            const columns = rows[i].split(',');\n            for (let j = 0; j < columns.length; j++) {\n              this.array2D[j].push(columns[j]);\n            }\n          }\n          for (let i = 0; i < this.array2D.length; i++) {\n            this.allGroup.push(this.array2D[i][0]);\n            this.array2D[i] = this.array2D[i].slice(1).map(str => parseFloat(str));\n          }\n          console.log(this.allGroup);\n          console.log(this.array2D);\n          console.log(this.array2D);\n        };\n      }\n    },\n    plotChart(data) {\n      const margin = {\n        top: 50,\n        right: 50,\n        bottom: 50,\n        left: 50\n      };\n      const width = 800 - margin.left - margin.right;\n      const height = 500 - margin.top - margin.bottom;\n      console.log(data);\n      d3.select(this.$refs.chart).select('svg').remove();\n      // Define the scales for the X and Y axes\n      const xScale = d3.scaleLinear().domain([d3.min(this.array2D[0]), d3.max(this.array2D[0])]).range([0, width]);\n      const yScale = d3.scaleLinear().domain([0, d3.max(data)]).range([height, 0]);\n      // Create the SVG element\n      const svg = d3.select(this.$refs.chart).append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', `translate(${margin.left}, ${margin.top})`);\n      // Define the line function\n      const line = d3.line().x((d, i) => xScale(this.array2D[0][i])).y((d, i) => yScale(data[i]));\n      // Add the title\n      let title = this.selectPlot + \" versus Time (s)\";\n      svg.append('text').attr('x', width / 2).attr('y', 0 - margin.top / 2).attr('text-anchor', 'middle').attr('font-size', '24px').text(title);\n      // Create the line path\n      svg.append('path').datum(this.array2D[0]).attr('d', line).attr('fill', 'none').attr('stroke', 'steelblue').attr('stroke-width', 2);\n      // Add the X axis label\n      svg.append('text').attr('transform', `translate(${width / 2}, ${height + margin.bottom / 1.3})`).attr('text-anchor', 'middle').attr('font-size', '16px').text('Time (s)');\n      // Add the Y axis label\n      svg.append('text').attr('transform', 'rotate(-90)').attr('x', 0 - height / 2).attr('y', 0 - margin.left).attr('dy', '1em').attr('text-anchor', 'middle').attr('font-size', '16px').text(this.selectPlot);\n      // Create the X and Y axes\n      const xAxis = d3.axisBottom(xScale);\n      const yAxis = d3.axisLeft(yScale);\n      svg.append('g').attr('transform', `translate(0, ${height})`).call(xAxis);\n      svg.append('g').call(yAxis);\n      // Add legend\n      svg.append('rect').attr('x', width - 100).attr('y', 50).attr('width', 10).attr('height', 10).style('fill', 'steelblue');\n      svg.append('text').attr('x', width - 85).attr('y', 60).text(this.selectPlot);\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["d3","data","chosenFile","columnData","array2D","allGroup","selectPlot","methods","importFile","reader","FileReader","file","readAsText","onload","result","rows","split","Array","from","length","i","columns","j","push","slice","map","str","parseFloat","console","log","plotChart","margin","top","right","bottom","left","width","height","select","$refs","chart","remove","xScale","scaleLinear","domain","min","max","range","yScale","svg","append","attr","line","x","d","y","title","text","datum","xAxis","axisBottom","yAxis","axisLeft","call","style"],"sourceRoot":"","sources":["/Users/stlp/Desktop/Spring 2023/BIOEN 405/User Interface/MoHSES-Scenario-User-Interface/src/views/PlottingView.vue"],"sourcesContent":["<template>\n    <v-toolbar style=\"color: white\" color=\"#4b0082\">\n      <v-toolbar-title>BioGears Plotting Tool</v-toolbar-title>\n    </v-toolbar>\n    <v-main class=\"bg-grey-lighten-3\">\n      <v-container>\n        <v-card class=\"mt-n12\">\n          <v-card-text>\n            <p style=\"font-size: 20px\">Please upload your .CSV:</p>\n            <br>\n            <v-file-input v-model=\"chosenFile\"></v-file-input>\n            <v-spacer></v-spacer>\n            <v-btn @click=\"importFile\">Import File</v-btn>\n            <br>\n            <br>\n            <v-row v-if=\"array2D\">\n              <v-col cols=\"12\">\n                <v-select v-model=\"selectPlot\" id=\"selectButton\" :items=\"allGroup.slice(1)\"></v-select>\n              </v-col>\n              <v-col v-if=\"selectPlot\" cols=\"12\">\n                <v-btn @click=\"plotChart(array2D[allGroup.indexOf(selectPlot)])\">Plot Chart</v-btn>\n              </v-col>\n            </v-row>\n          </v-card-text>\n          <v-row justify=\"center\">\n            <div ref=\"chart\"></div>\n            <br>\n          </v-row>\n        </v-card>\n      </v-container>\n    </v-main>\n  </template>\n  <script>\n    import * as d3 from 'd3';\n    export default {\n      data: () => ({\n        chosenFile: null,\n        data: null,\n        columnData: [],\n        array2D: null,\n        allGroup: [],\n        selectPlot: null\n      }),\n      methods: {\n        importFile() {\n          if (this.chosenFile === null) {\n            this.data = \"No File Chosen\"\n          } else {\n            var reader = new FileReader();\n            var file = this.chosenFile[0]\n            // Use the javascript reader object to load the contents\n            // of the file in the v-model prop\n            reader.readAsText(file);\n            reader.onload = () => {\n              this.data = reader.result;\n              const rows = this.data.split('\\n')\n              this.array2D = Array.from({\n                length: rows[0].split(',').length\n              }, () => []);\n              for (let i = 0; i < rows.length; i++) {\n                const columns = rows[i].split(',');\n                for (let j = 0; j < columns.length; j++) {\n                  this.array2D[j].push(columns[j]);\n                }\n              }\n              for (let i = 0; i < this.array2D.length; i++) {\n                this.allGroup.push(this.array2D[i][0])\n                this.array2D[i] = this.array2D[i].slice(1).map(str => parseFloat(str));\n              }\n              console.log(this.allGroup)\n              console.log(this.array2D)\n              console.log(this.array2D)\n            }\n          }\n        },\n        plotChart(data) {\n          const margin = {\n            top: 50,\n            right: 50,\n            bottom: 50,\n            left: 50\n          };\n          const width = 800 - margin.left - margin.right;\n          const height = 500 - margin.top - margin.bottom;\n          console.log(data)\n          d3.select(this.$refs.chart).select('svg').remove();\n          // Define the scales for the X and Y axes\n          const xScale = d3.scaleLinear().domain([d3.min(this.array2D[0]), d3.max(this.array2D[0])]).range([0, width]);\n          const yScale = d3.scaleLinear().domain([0, d3.max(data)]).range([height, 0]);\n          // Create the SVG element\n          const svg = d3.select(this.$refs.chart).append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', `translate(${margin.left}, ${margin.top})`);\n          // Define the line function\n          const line = d3.line().x((d, i) => xScale(this.array2D[0][i])).y((d, i) => yScale(data[i]));\n          // Add the title\n          let title = this.selectPlot + \" versus Time (s)\"\n          svg.append('text').attr('x', width / 2).attr('y', 0 - margin.top / 2).attr('text-anchor', 'middle').attr('font-size', '24px').text(title);\n          // Create the line path\n          svg.append('path').datum(this.array2D[0]).attr('d', line).attr('fill', 'none').attr('stroke', 'steelblue').attr('stroke-width', 2);\n          // Add the X axis label\n          svg.append('text').attr('transform', `translate(${width / 2}, ${height + margin.bottom / 1.3})`).attr('text-anchor', 'middle').attr('font-size', '16px').text('Time (s)');\n          // Add the Y axis label\n          svg.append('text').attr('transform', 'rotate(-90)').attr('x', 0 - height / 2).attr('y', 0 - margin.left).attr('dy', '1em').attr('text-anchor', 'middle').attr('font-size', '16px').text(this.selectPlot);\n          // Create the X and Y axes\n          const xAxis = d3.axisBottom(xScale);\n          const yAxis = d3.axisLeft(yScale);\n          svg.append('g').attr('transform', `translate(0, ${height})`).call(xAxis);\n          svg.append('g').call(yAxis);\n          // Add legend\n          svg.append('rect').attr('x', width - 100).attr('y', 50).attr('width', 10).attr('height', 10).style('fill', 'steelblue');\n          svg.append('text').attr('x', width - 85).attr('y', 60).text(this.selectPlot);\n        }\n      },\n    }\n  </script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}