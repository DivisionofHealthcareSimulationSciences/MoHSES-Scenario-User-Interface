{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as d3 from 'd3';\nexport default {\n  data: () => ({\n    chosenFile: null,\n    data: null,\n    columnData: [],\n    array2D: null,\n    allGroup: [],\n    selectPlot: null\n  }),\n  methods: {\n    importFile() {\n      if (this.chosenFile === null) {\n        this.data = \"No File Chosen\";\n      } else {\n        var reader = new FileReader();\n        var file = this.chosenFile[0];\n        // Use the javascript reader object to load the contents\n        // of the file in the v-model prop\n        reader.readAsText(file);\n        reader.onload = () => {\n          this.data = reader.result;\n          const rows = this.data.split('\\n');\n          this.array2D = Array.from({\n            length: rows[0].split(',').length\n          }, () => []);\n          for (let i = 0; i < rows.length; i++) {\n            const columns = rows[i].split(',');\n            for (let j = 0; j < columns.length; j++) {\n              this.array2D[j].push(columns[j]);\n            }\n          }\n          for (let i = 0; i < this.array2D.length; i++) {\n            this.allGroup.push(this.array2D[i][0]);\n            this.array2D[i] = this.array2D[i].slice(1).map(str => parseFloat(str));\n          }\n          console.log(this.allGroup);\n          console.log(this.array2D);\n          console.log(this.array2D);\n        };\n      }\n    },\n    plotChart(data) {\n      const margin = {\n        top: 50,\n        right: 50,\n        bottom: 50,\n        left: 50\n      };\n      const width = 800 - margin.left - margin.right;\n      const height = 500 - margin.top - margin.bottom;\n      console.log(data);\n      d3.select(this.$refs.chart).select('svg').remove();\n\n      // Define the scales for the X and Y axes\n      const xScale = d3.scaleLinear().domain([d3.min(this.array2D[0]), d3.max(this.array2D[0])]).range([0, width]);\n      const yScale = d3.scaleLinear().domain([0, d3.max(data)]).range([height, 0]);\n\n      // This allows to find the closest X index of the mouse:\n      var bisect = d3.bisector(function (d) {\n        return d.x;\n      }).left;\n\n      // Create the circle that travels along the curve of chart\n      var focus = svg.append('g').append('circle').style(\"fill\", \"none\").attr(\"stroke\", \"black\").attr('r', 8.5).style(\"opacity\", 0);\n\n      // Create the text that travels along the curve of chart\n      var focusText = svg.append('g').append('text').style(\"opacity\", 0).attr(\"text-anchor\", \"left\").attr(\"alignment-baseline\", \"middle\");\n\n      // Define the line function\n      const line = d3.line().x((d, i) => xScale(this.array2D[0][i])).y((d, i) => yScale(data[i]));\n\n      // Create the SVG element\n      const svg = d3.select(this.$refs.chart).append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n      // Add the title\n      svg.append('text').attr('x', width / 2).attr('y', 0 - margin.top / 2).attr('text-anchor', 'middle').attr('font-size', '24px').text('My Chart Title');\n\n      // Create the line path\n      svg.append('path').datum(this.array2D[0]).attr('d', line).attr('fill', 'none').attr('stroke', 'steelblue').attr('stroke-width', 2);\n      svg.append('rect').style(\"fill\", \"none\").style(\"pointer-events\", \"all\").attr('width', width).attr('height', height).on('mouseover', mouseover).on('mousemove', mousemove).on('mouseout', mouseout);\n      function mouseover() {\n        focus.style(\"opacity\", 1);\n        focusText.style(\"opacity\", 1);\n      }\n      function mousemove() {\n        // recover coordinate we need\n        var x0 = xScale.invert(d3.mouse(this)[0]);\n        var i = bisect(this.array2D[0], data, x0, 1);\n        focus.attr(\"cx\", xScale(this.array2D[0][i])).attr(\"cy\", yScale(data));\n        focusText.html(\"x:\" + this.array2D[0][i] + \"  -  \" + \"y:\" + data[i]).attr(\"x\", xScale(this.array2D[0]) + 15).attr(\"y\", yScale(data));\n      }\n      function mouseout() {\n        focus.style(\"opacity\", 0);\n        focusText.style(\"opacity\", 0);\n      }\n\n      // Add the X axis label\n      svg.append('text').attr('transform', `translate(${width / 2}, ${height + margin.bottom / 1.3})`).attr('text-anchor', 'middle').attr('font-size', '16px').text('X Axis Label');\n\n      // Add the Y axis label\n      svg.append('text').attr('transform', 'rotate(-90)').attr('x', 0 - height / 2).attr('y', 0 - margin.left).attr('dy', '1em').attr('text-anchor', 'middle').attr('font-size', '16px').text('Y Axis Label');\n\n      // Create the X and Y axes\n      const xAxis = d3.axisBottom(xScale);\n      const yAxis = d3.axisLeft(yScale);\n      svg.append('g').attr('transform', `translate(0, ${height})`).call(xAxis);\n      svg.append('g').call(yAxis);\n\n      // Add legend\n      svg.append('rect').attr('x', width - 100).attr('y', 50).attr('width', 10).attr('height', 10).style('fill', 'steelblue');\n      svg.append('text').attr('x', width - 85).attr('y', 60).text('Legend Label');\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["d3","data","chosenFile","columnData","array2D","allGroup","selectPlot","methods","importFile","reader","FileReader","file","readAsText","onload","result","rows","split","Array","from","length","i","columns","j","push","slice","map","str","parseFloat","console","log","plotChart","margin","top","right","bottom","left","width","height","select","$refs","chart","remove","xScale","scaleLinear","domain","min","max","range","yScale","bisect","bisector","d","x","focus","svg","append","style","attr","focusText","line","y","text","datum","on","mouseover","mousemove","mouseout","x0","invert","mouse","html","xAxis","axisBottom","yAxis","axisLeft","call"],"sourceRoot":"","sources":["/Users/stlp/Desktop/Spring 2023/BIOEN 405/User Interface/MoHSES-Scenario-User-Interface/src/views/PlottingView.vue"],"sourcesContent":["<template>\n    <v-toolbar style=\"color: white\" color=\"#4b0082\">\n      <v-toolbar-title>BioGears Plotting Tool</v-toolbar-title>\n    </v-toolbar>\n    <v-main class=\"bg-grey-lighten-3\">\n      <v-container>\n        <v-card class=\"mt-n12\">\n          <v-card-text>\n            <p style=\"font-size: 20px\">Please upload your .CSV:</p>\n            <br>\n            <v-file-input v-model=\"chosenFile\"></v-file-input>\n            <v-spacer></v-spacer>\n\n            <v-btn @click=\"importFile\">Import File</v-btn>\n            \n\n    \n            <br>\n            <br>\n \n            <v-row v-if=\"array2D\">\n            \n                <v-col cols=\"12\">\n                    <v-select v-model=\"selectPlot\" id=\"selectButton\" :items=\"allGroup.slice(1)\"></v-select>\n                </v-col>\n                <v-col v-if=\"selectPlot\" cols=\"12\">\n                    <v-btn @click=\"plotChart(array2D[allGroup.indexOf(selectPlot)])\">Plot Chart</v-btn>\n                </v-col>\n                \n            </v-row>\n        </v-card-text>\n        <v-row justify=\"center\">\n        <div ref=\"chart\"></div>\n        <br>\n    </v-row>\n        </v-card>\n      </v-container>\n    </v-main>\n  </template>\n  \n<script>\nimport * as d3 from 'd3';\n\nexport default {\n      data: () => ({\n        chosenFile: null,\n        data: null,\n        columnData:[],\n        array2D: null,\n        allGroup: [],\n        selectPlot: null\n      }),\n      methods: {\n        importFile() {\n      \n      if (this.chosenFile === null) {\n        this.data = \"No File Chosen\"\n      } else {\n        var reader = new FileReader();\n        var file = this.chosenFile[0]\n        // Use the javascript reader object to load the contents\n        // of the file in the v-model prop\n        reader.readAsText(file);\n        reader.onload = () => {\n        this.data = reader.result;\n        const rows = this.data.split('\\n')\n        this.array2D = Array.from({ length: rows[0].split(',').length }, () => []);\n        for (let i=0; i<rows.length;i++) {\n            const columns = rows[i].split(',');\n            for (let j =0; j<columns.length;j++) {\n                this.array2D[j].push(columns[j]);\n            }\n            \n        }\n        for (let i=0; i<this.array2D.length;i++) {\n        this.allGroup.push(this.array2D[i][0])\n        this.array2D[i] = this.array2D[i].slice(1).map(str => parseFloat(str));\n    }\n    console.log(this.allGroup)\n    console.log(this.array2D)\n        console.log(this.array2D)\n\n      }\n    }\n},\n\nplotChart (data) {\n    const margin = { top: 50, right: 50, bottom: 50, left: 50 };\n    const width = 800 - margin.left - margin.right;\n    const height = 500 - margin.top - margin.bottom;\n\n    console.log(data)\n    d3.select(this.$refs.chart).select('svg').remove();\n\n    \n        \n\n\n    // Define the scales for the X and Y axes\n    const xScale = d3.scaleLinear()\n      .domain([d3.min(this.array2D[0]), d3.max(this.array2D[0])])\n      .range([0, width]);\n\n    const yScale = d3.scaleLinear()\n      .domain([0, d3.max(data)])\n      .range([height, 0]);\n\n// This allows to find the closest X index of the mouse:\n  var bisect = d3.bisector(function(d) { return d.x; }).left;\n\n  // Create the circle that travels along the curve of chart\n  var focus = svg\n    .append('g')\n    .append('circle')\n      .style(\"fill\", \"none\")\n      .attr(\"stroke\", \"black\")\n      .attr('r', 8.5)\n      .style(\"opacity\", 0)\n\n  // Create the text that travels along the curve of chart\n  var focusText = svg\n    .append('g')\n    .append('text')\n      .style(\"opacity\", 0)\n      .attr(\"text-anchor\", \"left\")\n      .attr(\"alignment-baseline\", \"middle\")\n\n    // Define the line function\n    const line = d3.line()\n      .x((d, i) => xScale(this.array2D[0][i]))\n      .y((d, i) => yScale(data[i]));\n\n    // Create the SVG element\n    const svg = d3.select(this.$refs.chart)\n      .append('svg')\n      .attr('width', width + margin.left + margin.right)\n      .attr('height', height + margin.top + margin.bottom)\n      .append('g')\n      .attr('transform', `translate(${margin.left}, ${margin.top})`);\n\n  // Add the title\n  svg.append('text')\n    .attr('x', width / 2)\n    .attr('y', 0 - margin.top / 2)\n    .attr('text-anchor', 'middle')\n    .attr('font-size', '24px')\n    .text('My Chart Title');\n\n\n    // Create the line path\n    svg.append('path')\n      .datum(this.array2D[0])\n      .attr('d', line)\n      .attr('fill', 'none')\n      .attr('stroke', 'steelblue')\n      .attr('stroke-width', 2);\n\n      svg\n    .append('rect')\n    .style(\"fill\", \"none\")\n    .style(\"pointer-events\", \"all\")\n    .attr('width', width)\n    .attr('height', height)\n    .on('mouseover', mouseover)\n    .on('mousemove', mousemove)\n    .on('mouseout', mouseout);\n\n    function mouseover() {\n    focus.style(\"opacity\", 1)\n    focusText.style(\"opacity\",1)\n  }\n\n  function mousemove() {\n    // recover coordinate we need\n    var x0 = xScale.invert(d3.mouse(this)[0]);\n    var i = bisect(this.array2D[0], data, x0, 1);\n    focus\n      .attr(\"cx\", xScale(this.array2D[0][i]))\n      .attr(\"cy\", yScale(data))\n    focusText\n      .html(\"x:\" + this.array2D[0][i] + \"  -  \" + \"y:\" + data[i])\n      .attr(\"x\", xScale(this.array2D[0])+15)\n      .attr(\"y\", yScale(data))\n    }\n  function mouseout() {\n    focus.style(\"opacity\", 0)\n    focusText.style(\"opacity\", 0)\n  }\n\n\n      // Add the X axis label\n  svg.append('text')\n    .attr('transform', `translate(${width / 2}, ${height + margin.bottom / 1.3})`)\n    .attr('text-anchor', 'middle')\n    .attr('font-size', '16px')\n    .text('X Axis Label');\n\n  // Add the Y axis label\n  svg.append('text')\n    .attr('transform', 'rotate(-90)')\n    .attr('x', 0 - height / 2)\n    .attr('y', 0 - margin.left)\n    .attr('dy', '1em')\n    .attr('text-anchor', 'middle')\n    .attr('font-size', '16px')\n    .text('Y Axis Label');\n\n\n    // Create the X and Y axes\n    const xAxis = d3.axisBottom(xScale);\n    const yAxis = d3.axisLeft(yScale);\n\n    svg.append('g')\n      .attr('transform', `translate(0, ${height})`)\n      .call(xAxis);\n\n    svg.append('g')\n      .call(yAxis);\n\n\n     // Add legend\nsvg.append('rect')\n  .attr('x', width - 100)\n  .attr('y', 50)\n  .attr('width', 10)\n  .attr('height', 10)\n  .style('fill', 'steelblue');\n\nsvg.append('text')\n  .attr('x', width - 85)\n  .attr('y', 60)\n  .text('Legend Label');\n\n\n\n  \n  }\n\n\n  \n\n  }\n,\n\n\n}\n\n</script>\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}