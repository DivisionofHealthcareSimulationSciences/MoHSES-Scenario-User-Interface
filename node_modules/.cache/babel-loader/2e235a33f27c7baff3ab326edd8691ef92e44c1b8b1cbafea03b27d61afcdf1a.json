{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// import * as d3 from 'd3';\nimport vegaEmbed from 'vega-embed';\nexport default {\n  data: () => ({\n    currentSpec: null,\n    chosenFile: null,\n    data: null,\n    columnData: [],\n    array2D: null,\n    allGroup: [],\n    selectPlot: null\n  }),\n  methods: {\n    async downloadChart() {\n      if (!this.currentSpec) {\n        return; // Exit the method if no chart has been plotted\n      }\n\n      // Get the Vega view instance from the vegaEmbed function\n      const {\n        view\n      } = await vegaEmbed(this.$refs.chart, this.currentSpec, {\n        actions: false\n      });\n\n      // Generate the PNG image data URL\n      const dataUrl = await view.toImageURL('png');\n\n      // Create a temporary link element for downloading the chart\n      const link = document.createElement('a');\n      link.href = dataUrl;\n      link.download = 'chart.png';\n      link.style.display = 'none';\n\n      // Add the link to the DOM, click it, and remove it\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    },\n    importFile() {\n      if (this.chosenFile === null) {\n        this.data = \"No File Chosen\";\n      } else {\n        var reader = new FileReader();\n        var file = this.chosenFile[0];\n        // Use the javascript reader object to load the contents\n        // of the file in the v-model prop\n        reader.readAsText(file);\n        reader.onload = () => {\n          this.data = reader.result;\n          const rows = this.data.split('\\n');\n          this.array2D = Array.from({\n            length: rows[0].split(',').length\n          }, () => []);\n          for (let i = 0; i < rows.length; i++) {\n            const columns = rows[i].split(',');\n            for (let j = 0; j < columns.length; j++) {\n              this.array2D[j].push(columns[j]);\n            }\n          }\n          for (let i = 0; i < this.array2D.length; i++) {\n            this.allGroup.push(this.array2D[i][0]);\n            this.array2D[i] = this.array2D[i].slice(1).map(str => parseFloat(str));\n          }\n          console.log(this.allGroup);\n          console.log(this.array2D);\n          console.log(this.array2D);\n        };\n      }\n    },\n    plotChart(data) {\n      const xAxisData = this.array2D[0];\n      const yAxisData = data;\n      const dataset = xAxisData.map((value, index) => ({\n        xValue: value,\n        yValue: yAxisData[index]\n      }));\n      const spec = {\n        $schema: 'https://vega.github.io/schema/vega-lite/v5.json',\n        data: {\n          values: dataset\n        },\n        mark: 'line',\n        title: {\n          text: this.selectPlot + ' Versus Time (s)',\n          // Set the title text\n          anchor: 'middle',\n          // Position the title (start, middle, or end)\n          fontSize: 16,\n          // Set the font size\n          fontWeight: 'bold',\n          // Set the font weight\n          dy: -10 // Adjust the vertical distance between the title and the chart\n        },\n\n        encoding: {\n          x: {\n            field: 'xValue',\n            type: 'quantitative',\n            title: 'Time (s)'\n          },\n          y: {\n            field: 'yValue',\n            type: 'quantitative',\n            title: this.selectPlot\n          },\n          tooltip: [{\n            field: 'xValue',\n            type: 'quantitative',\n            title: 'Time (s)'\n          }, {\n            field: 'yValue',\n            type: 'quantitative',\n            title: this.selectPlot\n          }]\n        },\n        selection: {\n          mySelection: {\n            type: 'interval',\n            bind: 'scales',\n            // Bind the selection to the chart scales\n            encodings: ['x', 'y'],\n            // Apply the selection to both x and y axes\n            zoom: true,\n            // Enable zooming\n            translate: true // Enable panning\n          }\n        },\n\n        width: 700,\n        // Add the desired width\n        height: 550 // Add the desired height\n      };\n\n      vegaEmbed(this.$refs.chart, spec, {\n        actions: false\n      });\n      return spec;\n    },\n    plotSelectedChart() {\n      if (this.array2D && this.allGroup && this.selectPlot) {\n        this.currentSpec = this.plotChart(this.array2D[this.allGroup.indexOf(this.selectPlot)]);\n      }\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["vegaEmbed","data","currentSpec","chosenFile","columnData","array2D","allGroup","selectPlot","methods","downloadChart","view","$refs","chart","actions","dataUrl","toImageURL","link","document","createElement","href","download","style","display","body","appendChild","click","removeChild","importFile","reader","FileReader","file","readAsText","onload","result","rows","split","Array","from","length","i","columns","j","push","slice","map","str","parseFloat","console","log","plotChart","xAxisData","yAxisData","dataset","value","index","xValue","yValue","spec","$schema","values","mark","title","text","anchor","fontSize","fontWeight","dy","encoding","x","field","type","y","tooltip","selection","mySelection","bind","encodings","zoom","translate","width","height","plotSelectedChart","indexOf"],"sourceRoot":"","sources":["/Users/stlp/Desktop/Spring 2023/BIOEN 405/User Interface/MoHSES-Scenario-User-Interface/src/views/PlottingView.vue"],"sourcesContent":["<template>\n  <v-toolbar style=\"color: white\" color=\"#3c2d70\">\n    <v-toolbar-title>BioGears Plotting Tool</v-toolbar-title>\n  </v-toolbar>\n  <v-main class=\"bg-grey-lighten-3\">\n    <v-container>\n      <v-card class=\"mt-n12\">\n        <v-card-text>\n          <p style=\"font-size: 20px\">Please upload your .CSV:</p>\n          <br>\n          <v-file-input v-model=\"chosenFile\"></v-file-input>\n          <v-btn style=\"color: white\" color=\"#3c2d70\" @click=\"importFile\">Import File</v-btn>\n          <br>\n          <br>\n              <v-select v-if=\"array2D\" label=\"Please select a variable.\" v-model=\"selectPlot\" id=\"selectButton\" :items=\"allGroup.slice(1)\"></v-select>\n\n              <v-row>\n      <v-col cols=\"auto\" class=\"mr-2\">\n        <v-btn style=\"color: white\" color=\"#3c2d70\" v-if=\"selectPlot\" @click=\"plotSelectedChart\">Plot Chart</v-btn>\n      </v-col>\n      <v-col cols=\"auto\">\n        <v-btn style=\"color: white\" color=\"#3c2d70\" v-if=\"selectPlot\" @click=\"downloadChart\">Download Chart</v-btn>\n      </v-col>\n    </v-row>\n\n\n\n        \n        </v-card-text>\n        <v-row justify=\"center\">\n          <div ref=\"chart\" class=\"chart-container\"></div>\n       \n        </v-row>\n      </v-card>\n    </v-container>\n  </v-main>\n</template>\n<script>\n  // import * as d3 from 'd3';\n  import vegaEmbed from 'vega-embed';\n  export default {\n    data: () => ({\n      currentSpec: null,\n      chosenFile: null,\n      data: null,\n      columnData: [],\n      array2D: null,\n      allGroup: [],\n      selectPlot: null\n    }),\n    methods: {\n      async downloadChart() {\n          if (!this.currentSpec) {\n  return; // Exit the method if no chart has been plotted\n}\n\n// Get the Vega view instance from the vegaEmbed function\nconst { view } = await vegaEmbed(this.$refs.chart, this.currentSpec, {\n  actions: false,\n});\n\n// Generate the PNG image data URL\nconst dataUrl = await view.toImageURL('png');\n\n// Create a temporary link element for downloading the chart\nconst link = document.createElement('a');\nlink.href = dataUrl;\nlink.download = 'chart.png';\nlink.style.display = 'none';\n\n// Add the link to the DOM, click it, and remove it\ndocument.body.appendChild(link);\nlink.click();\ndocument.body.removeChild(link);\n},\n      importFile() {\n        if (this.chosenFile === null) {\n          this.data = \"No File Chosen\"\n        } else {\n          var reader = new FileReader();\n          var file = this.chosenFile[0]\n          // Use the javascript reader object to load the contents\n          // of the file in the v-model prop\n          reader.readAsText(file);\n          reader.onload = () => {\n            this.data = reader.result;\n            const rows = this.data.split('\\n')\n            this.array2D = Array.from({\n              length: rows[0].split(',').length\n            }, () => []);\n            for (let i = 0; i < rows.length; i++) {\n              const columns = rows[i].split(',');\n              for (let j = 0; j < columns.length; j++) {\n                this.array2D[j].push(columns[j]);\n              }\n            }\n            for (let i = 0; i < this.array2D.length; i++) {\n              this.allGroup.push(this.array2D[i][0])\n              this.array2D[i] = this.array2D[i].slice(1).map(str => parseFloat(str));\n            }\n            console.log(this.allGroup)\n            console.log(this.array2D)\n            console.log(this.array2D)\n          }\n        }\n      },\n      plotChart(data) {\n          const xAxisData = this.array2D[0];\n  const yAxisData = data;\n  \n  const dataset = xAxisData.map((value, index) => ({\n    xValue: value,\n    yValue: yAxisData[index]\n  }));\n\n  const spec = {\n    $schema: 'https://vega.github.io/schema/vega-lite/v5.json',\n    data: { values: dataset },\n    mark: 'line',\n    title: {\n  text: this.selectPlot + ' Versus Time (s)', // Set the title text\n  anchor: 'middle', // Position the title (start, middle, or end)\n  fontSize: 16, // Set the font size\n  fontWeight: 'bold', // Set the font weight\n  dy: -10, // Adjust the vertical distance between the title and the chart\n},\n    encoding: {\n      x: { field: 'xValue', type: 'quantitative', title: 'Time (s)' },\n      y: { field: 'yValue', type: 'quantitative', title: this.selectPlot },\n      tooltip: [\n        { field: 'xValue', type: 'quantitative', title: 'Time (s)' },\n        { field: 'yValue', type: 'quantitative', title: this.selectPlot },\n      ],\n    },\n    selection: {\n  mySelection: {\n    type: 'interval',\n    bind: 'scales', // Bind the selection to the chart scales\n    encodings: ['x', 'y'], // Apply the selection to both x and y axes\n    zoom: true, // Enable zooming\n    translate: true, // Enable panning\n  },\n},\n    width: 700, // Add the desired width\nheight: 550, // Add the desired height\n  };\n    vegaEmbed(this.$refs.chart, spec, { actions: false });\n    return spec\n},\n\n\n  plotSelectedChart() {\n    if (this.array2D && this.allGroup && this.selectPlot) {\n      this.currentSpec = this.plotChart(this.array2D[this.allGroup.indexOf(this.selectPlot)]);\n    }\n  },\n     \n      }\n  }\n</script>\n\n<style scoped>\n.chart-container {\n  padding-bottom: 50px;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}