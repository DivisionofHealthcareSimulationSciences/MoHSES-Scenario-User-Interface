{"ast":null,"code":"var __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Optimizer_modified;\nimport { GraticuleNode } from './graticule';\nimport { SequenceNode } from './sequence';\nimport { SourceNode } from './source';\n/**\n * Whether this dataflow node is the source of the dataflow that produces data i.e. a source or a generator.\n */\nexport function isDataSourceNode(node) {\n  return node instanceof SourceNode || node instanceof GraticuleNode || node instanceof SequenceNode;\n}\n/**\n * Abstract base class for Dataflow optimizers.\n * Contains only mutation handling logic. Subclasses need to implement iteration logic.\n */\nexport class Optimizer {\n  constructor() {\n    _Optimizer_modified.set(this, void 0);\n    __classPrivateFieldSet(this, _Optimizer_modified, false, \"f\");\n  }\n  // Once true, #modified is never set to false\n  setModified() {\n    __classPrivateFieldSet(this, _Optimizer_modified, true, \"f\");\n  }\n  get modifiedFlag() {\n    return __classPrivateFieldGet(this, _Optimizer_modified, \"f\");\n  }\n}\n_Optimizer_modified = new WeakMap();\n/**\n * Starts from a node and runs the optimization function (the \"run\" method) upwards to the root,\n * depending on the continue and modified flag values returned by the optimization function.\n */\nexport class BottomUpOptimizer extends Optimizer {\n  /**\n   * Compute a map of node depths that we can use to determine a topological sort order.\n   */\n  getNodeDepths(node, depth, depths) {\n    depths.set(node, depth);\n    for (const child of node.children) {\n      this.getNodeDepths(child, depth + 1, depths);\n    }\n    return depths;\n  }\n  /**\n   * Run the optimizer on all nodes starting from the leaves.\n   */\n  optimize(node) {\n    const depths = this.getNodeDepths(node, 0, new Map());\n    const topologicalSort = [...depths.entries()].sort((a, b) => b[1] - a[1]);\n    for (const tuple of topologicalSort) {\n      this.run(tuple[0]);\n    }\n    return this.modifiedFlag;\n  }\n}\n/**\n * The optimizer function (the \"run\" method), is invoked on the given node and then continues recursively.\n */\nexport class TopDownOptimizer extends Optimizer {\n  /**\n   * Run the optimizer depth first on all nodes starting from the roots.\n   */\n  optimize(node) {\n    this.run(node);\n    for (const child of node.children) {\n      this.optimize(child);\n    }\n    return this.modifiedFlag;\n  }\n}","map":{"version":3,"mappings":";;;;;;;;;;;;AACA,SAAQA,aAAa,QAAO,aAAa;AACzC,SAAQC,YAAY,QAAO,YAAY;AACvC,SAAQC,UAAU,QAAO,UAAU;AAEnC;;;AAGA,OAAM,SAAUC,gBAAgB,CAACC,IAAkB;EACjD,OAAOA,IAAI,YAAYF,UAAU,IAAIE,IAAI,YAAYJ,aAAa,IAAII,IAAI,YAAYH,YAAY;AACpG;AAEA;;;;AAIA,OAAM,MAAgBI,SAAS;EAG7BC;IAFAC;IAGEC,2BAAI,uBAAa,KAAK;EACxB;EAEA;EACOC,WAAW;IAChBD,2BAAI,uBAAa,IAAI;EACvB;EAEA,IAAIE,YAAY;IACd,OAAOC,2BAAI,2BAAU;EACvB;;;AAQF;;;;AAIA,OAAM,MAAgBC,iBAAkB,SAAQP,SAAS;EAMvD;;;EAGQQ,aAAa,CACnBT,IAAkB,EAClBU,KAAa,EACbC,MAAiC;IAEjCA,MAAM,CAACC,GAAG,CAACZ,IAAI,EAAEU,KAAK,CAAC;IAEvB,KAAK,MAAMG,KAAK,IAAIb,IAAI,CAACc,QAAQ,EAAE;MACjC,IAAI,CAACL,aAAa,CAACI,KAAK,EAAEH,KAAK,GAAG,CAAC,EAAEC,MAAM,CAAC;;IAG9C,OAAOA,MAAM;EACf;EAEA;;;EAGOI,QAAQ,CAACf,IAAkB;IAChC,MAAMW,MAAM,GAAG,IAAI,CAACF,aAAa,CAACT,IAAI,EAAE,CAAC,EAAE,IAAIgB,GAAG,EAAE,CAAC;IACrD,MAAMC,eAAe,GAAG,CAAC,GAAGN,MAAM,CAACO,OAAO,EAAE,CAAC,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAC,CAAC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC,CAAC;IAEzE,KAAK,MAAME,KAAK,IAAIL,eAAe,EAAE;MACnC,IAAI,CAACM,GAAG,CAACD,KAAK,CAAC,CAAC,CAAC,CAAC;;IAGpB,OAAO,IAAI,CAAChB,YAAY;EAC1B;;AAGF;;;AAGA,OAAM,MAAgBkB,gBAAiB,SAAQvB,SAAS;EAMtD;;;EAGOc,QAAQ,CAACf,IAAkB;IAChC,IAAI,CAACuB,GAAG,CAACvB,IAAI,CAAC;IAEd,KAAK,MAAMa,KAAK,IAAIb,IAAI,CAACc,QAAQ,EAAE;MACjC,IAAI,CAACC,QAAQ,CAACF,KAAK,CAAC;;IAGtB,OAAO,IAAI,CAACP,YAAY;EAC1B","names":["GraticuleNode","SequenceNode","SourceNode","isDataSourceNode","node","Optimizer","constructor","_Optimizer_modified","__classPrivateFieldSet","setModified","modifiedFlag","__classPrivateFieldGet","BottomUpOptimizer","getNodeDepths","depth","depths","set","child","children","optimize","Map","topologicalSort","entries","sort","a","b","tuple","run","TopDownOptimizer"],"sourceRoot":"","sources":["../../../../src/compile/data/optimizer.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}