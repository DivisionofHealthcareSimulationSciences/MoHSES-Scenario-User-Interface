{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as d3 from 'd3';\nexport default {\n  data: () => ({\n    chosenFile: null,\n    data: null,\n    columnData: []\n  }),\n  methods: {\n    importFile() {\n      if (this.chosenFile === null) {\n        this.data = \"No File Chosen\";\n      } else {\n        var reader = new FileReader();\n        var file = this.chosenFile[0];\n        // Use the javascript reader object to load the contents\n        // of the file in the v-model prop\n        reader.readAsText(file);\n        reader.onload = () => {\n          this.data = reader.result;\n          const rows = this.data.split('\\n');\n          const array2D = Array.from({\n            length: rows[0].split(',').length\n          }, () => []);\n          for (let i = 0; i < rows.length; i++) {\n            const columns = rows[i].split(',');\n            for (let j = 0; j < columns.length; j++) {\n              array2D[j].push(columns[j]);\n            }\n          }\n          console.log(array2D);\n        };\n      }\n    }\n  },\n  mounted() {\n    // Set the width and height of the SVG element\n    const width = 600;\n    const height = 400;\n\n    // Create the SVG element\n    const svg = d3.select(this.$refs.chart).append('svg').attr('width', width).attr('height', height);\n\n    // Define the scales for the X and Y axes\n    const xScale = d3.scaleLinear().domain([0, data.length - 1]).range([0, width]);\n    const yScale = d3.scaleLinear().domain([0, d3.max(data, d => d[1])]).range([height, 0]);\n\n    // Define the line function\n    const line = d3.line().x((d, i) => xScale(i)).y(d => yScale(d[1]));\n\n    // Create the line path\n    svg.append('path').datum(data).attr('d', line).attr('fill', 'none').attr('stroke', 'steelblue').attr('stroke-width', 2);\n\n    // Create the X and Y axes\n    const xAxis = d3.axisBottom(xScale);\n    const yAxis = d3.axisLeft(yScale);\n    svg.append('g').attr('transform', `translate(0, ${height})`).call(xAxis);\n    svg.append('g').call(yAxis);\n  }\n};","map":{"version":3,"mappings":"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","names":["d3","data","chosenFile","columnData","methods","importFile","reader","FileReader","file","readAsText","onload","result","rows","split","array2D","Array","from","length","i","columns","j","push","console","log","mounted","width","height","svg","select","$refs","chart","append","attr","xScale","scaleLinear","domain","range","yScale","max","d","line","x","y","datum","xAxis","axisBottom","yAxis","axisLeft","call"],"sourceRoot":"","sources":["/Users/stlp/Desktop/Spring 2023/BIOEN 405/User Interface/MoHSES-Scenario-User-Interface/src/views/PlottingView.vue"],"sourcesContent":["<template>\n    <v-toolbar style=\"color: white\" color=\"#4b0082\">\n      <v-toolbar-title>BioGears Plotting Tool</v-toolbar-title>\n    </v-toolbar>\n    <v-main class=\"bg-grey-lighten-3\">\n      <v-container>\n        <v-card class=\"mt-n12\">\n          <v-card-text>\n            <p style=\"font-size: 20px\">Please upload your .CSV:</p>\n            <br>\n            <v-file-input v-model=\"chosenFile\"></v-file-input>\n            <v-spacer></v-spacer>\n            <v-btn @click=\"importFile\">Import File</v-btn>\n        </v-card-text>\n        </v-card>\n        <div ref=\"chart\"></div>\n      </v-container>\n    </v-main>\n  </template>\n  \n<script>\nimport * as d3 from 'd3';\n\nexport default {\n      data: () => ({\n        chosenFile: null,\n        data: null,\n        columnData:[],\n      }),\n      methods: {\n        importFile() {\n      \n      if (this.chosenFile === null) {\n        this.data = \"No File Chosen\"\n      } else {\n        var reader = new FileReader();\n        var file = this.chosenFile[0]\n        // Use the javascript reader object to load the contents\n        // of the file in the v-model prop\n        reader.readAsText(file);\n        reader.onload = () => {\n        this.data = reader.result;\n        const rows = this.data.split('\\n')\n        const array2D = Array.from({ length: rows[0].split(',').length }, () => []);\n        for (let i=0; i<rows.length;i++) {\n            const columns = rows[i].split(',');\n            for (let j =0; j<columns.length;j++) {\n                array2D[j].push(columns[j]);\n            }\n        }\n        console.log(array2D)\n      }\n    }\n}\n  }\n,\n\n  mounted() {\n    // Set the width and height of the SVG element\n    const width = 600;\n    const height = 400;\n\n    // Create the SVG element\n    const svg = d3.select(this.$refs.chart)\n      .append('svg')\n      .attr('width', width)\n      .attr('height', height);\n\n    // Define the scales for the X and Y axes\n    const xScale = d3.scaleLinear()\n      .domain([0, data.length - 1])\n      .range([0, width]);\n\n    const yScale = d3.scaleLinear()\n      .domain([0, d3.max(data, d => d[1])])\n      .range([height, 0]);\n\n    // Define the line function\n    const line = d3.line()\n      .x((d, i) => xScale(i))\n      .y(d => yScale(d[1]));\n\n    // Create the line path\n    svg.append('path')\n      .datum(data)\n      .attr('d', line)\n      .attr('fill', 'none')\n      .attr('stroke', 'steelblue')\n      .attr('stroke-width', 2);\n\n    // Create the X and Y axes\n    const xAxis = d3.axisBottom(xScale);\n    const yAxis = d3.axisLeft(yScale);\n\n    svg.append('g')\n      .attr('transform', `translate(0, ${height})`)\n      .call(xAxis);\n\n    svg.append('g')\n      .call(yAxis);\n  }\n}\n\n</script>\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}