{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport * as d3 from 'd3';\nexport default {\n  data: () => ({\n    chosenFile: null,\n    data: null,\n    columnData: [],\n    array2D: null\n  }),\n  methods: {\n    importFile() {\n      if (this.chosenFile === null) {\n        this.data = \"No File Chosen\";\n      } else {\n        var reader = new FileReader();\n        var file = this.chosenFile[0];\n        // Use the javascript reader object to load the contents\n        // of the file in the v-model prop\n        reader.readAsText(file);\n        reader.onload = () => {\n          this.data = reader.result;\n          const rows = this.data.split('\\n');\n          this.array2D = Array.from({\n            length: rows[0].split(',').length\n          }, () => []);\n          for (let i = 0; i < rows.length; i++) {\n            const columns = rows[i].split(',');\n            for (let j = 0; j < columns.length; j++) {\n              this.array2D[j].push(columns[j]);\n            }\n          }\n          console.log(this.array2D);\n        };\n      }\n    },\n    plotChart() {\n      // Create 2 datasets\n      var data1 = [{\n        ser1: 0.3,\n        ser2: 4\n      }, {\n        ser1: 2,\n        ser2: 16\n      }, {\n        ser1: 3,\n        ser2: 8\n      }];\n      var data2 = [{\n        ser1: 1,\n        ser2: 7\n      }, {\n        ser1: 4,\n        ser2: 1\n      }, {\n        ser1: 6,\n        ser2: 8\n      }];\n\n      // set the dimensions and margins of the graph\n      var margin = {\n          top: 10,\n          right: 30,\n          bottom: 30,\n          left: 50\n        },\n        width = 460 - margin.left - margin.right,\n        height = 400 - margin.top - margin.bottom;\n\n      // append the svg object to the body of the page\n      var svg = d3.select(\"#my_dataviz\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n      // Initialise a X axis:\n      var x = d3.scaleLinear().range([0, width]);\n      var xAxis = d3.axisBottom().scale(x);\n      svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").attr(\"class\", \"myXaxis\");\n\n      // Initialize an Y axis\n      var y = d3.scaleLinear().range([height, 0]);\n      var yAxis = d3.axisLeft().scale(y);\n      svg.append(\"g\").attr(\"class\", \"myYaxis\");\n\n      // Create a function that takes a dataset as input and update the plot:\n      function update(data) {\n        // Create the X axis:\n        x.domain([0, d3.max(data, function (d) {\n          return d.ser1;\n        })]);\n        svg.selectAll(\".myXaxis\").transition().duration(3000).call(xAxis);\n\n        // create the Y axis\n        y.domain([0, d3.max(data, function (d) {\n          return d.ser2;\n        })]);\n        svg.selectAll(\".myYaxis\").transition().duration(3000).call(yAxis);\n\n        // Create a update selection: bind to the new data\n        var u = svg.selectAll(\".lineTest\").data([data], function (d) {\n          return d.ser1;\n        });\n\n        // Updata the line\n        u.enter().append(\"path\").attr(\"class\", \"lineTest\").merge(u).transition().duration(3000).attr(\"d\", d3.line().x(function (d) {\n          return x(d.ser1);\n        }).y(function (d) {\n          return y(d.ser2);\n        })).attr(\"fill\", \"none\").attr(\"stroke\", \"steelblue\").attr(\"stroke-width\", 2.5);\n      }\n\n      // At the beginning, I run the update function on the first dataset:\n      update(data1);\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["d3","data","chosenFile","columnData","array2D","methods","importFile","reader","FileReader","file","readAsText","onload","result","rows","split","Array","from","length","i","columns","j","push","console","log","plotChart","data1","ser1","ser2","data2","margin","top","right","bottom","left","width","height","svg","select","append","attr","x","scaleLinear","range","xAxis","axisBottom","scale","y","yAxis","axisLeft","update","domain","max","d","selectAll","transition","duration","call","u","enter","merge","line"],"sourceRoot":"","sources":["/Users/stlp/Desktop/Spring 2023/BIOEN 405/User Interface/MoHSES-Scenario-User-Interface/src/views/PlottingView.vue"],"sourcesContent":["<template>\n    <v-toolbar style=\"color: white\" color=\"#4b0082\">\n      <v-toolbar-title>BioGears Plotting Tool</v-toolbar-title>\n    </v-toolbar>\n    <v-main class=\"bg-grey-lighten-3\">\n      <v-container>\n        <v-card class=\"mt-n12\">\n          <v-card-text>\n            <p style=\"font-size: 20px\">Please upload your .CSV:</p>\n            <br>\n            <v-file-input v-model=\"chosenFile\"></v-file-input>\n            <v-spacer></v-spacer>\n            <v-btn @click=\"importFile\">Import File</v-btn>\n            <v-spacer></v-spacer>\n            <br>\n            <v-btn @click=\"plotChart\">Plot Chart</v-btn>\n        </v-card-text>\n        <div ref=\"chart\"></div>\n        </v-card>\n      </v-container>\n    </v-main>\n  </template>\n  \n<script>\nimport * as d3 from 'd3';\n\nexport default {\n      data: () => ({\n        chosenFile: null,\n        data: null,\n        columnData:[],\n        array2D: null\n      }),\n      methods: {\n        importFile() {\n      \n      if (this.chosenFile === null) {\n        this.data = \"No File Chosen\"\n      } else {\n        var reader = new FileReader();\n        var file = this.chosenFile[0]\n        // Use the javascript reader object to load the contents\n        // of the file in the v-model prop\n        reader.readAsText(file);\n        reader.onload = () => {\n        this.data = reader.result;\n        const rows = this.data.split('\\n')\n        this.array2D = Array.from({ length: rows[0].split(',').length }, () => []);\n        for (let i=0; i<rows.length;i++) {\n            const columns = rows[i].split(',');\n            for (let j =0; j<columns.length;j++) {\n                this.array2D[j].push(columns[j]);\n            }\n        }\n        console.log(this.array2D)\n      }\n    }\n},\n\nplotChart () {\n    // Create 2 datasets\nvar data1 = [\n   {ser1: 0.3, ser2: 4},\n   {ser1: 2, ser2: 16},\n   {ser1: 3, ser2: 8}\n];\n\nvar data2 = [\n   {ser1: 1, ser2: 7},\n   {ser1: 4, ser2: 1},\n   {ser1: 6, ser2: 8}\n];\n\n// set the dimensions and margins of the graph\nvar margin = {top: 10, right: 30, bottom: 30, left: 50},\n    width = 460 - margin.left - margin.right,\n    height = 400 - margin.top - margin.bottom;\n\n// append the svg object to the body of the page\nvar svg = d3.select(\"#my_dataviz\")\n  .append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n  .append(\"g\")\n    .attr(\"transform\",\n          \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n// Initialise a X axis:\nvar x = d3.scaleLinear().range([0,width]);\nvar xAxis = d3.axisBottom().scale(x);\nsvg.append(\"g\")\n  .attr(\"transform\", \"translate(0,\" + height + \")\")\n  .attr(\"class\",\"myXaxis\")\n\n// Initialize an Y axis\nvar y = d3.scaleLinear().range([height, 0]);\nvar yAxis = d3.axisLeft().scale(y);\nsvg.append(\"g\")\n  .attr(\"class\",\"myYaxis\")\n\n// Create a function that takes a dataset as input and update the plot:\nfunction update(data) {\n\n  // Create the X axis:\n  x.domain([0, d3.max(data, function(d) { return d.ser1 }) ]);\n  svg.selectAll(\".myXaxis\").transition()\n    .duration(3000)\n    .call(xAxis);\n\n  // create the Y axis\n  y.domain([0, d3.max(data, function(d) { return d.ser2  }) ]);\n  svg.selectAll(\".myYaxis\")\n    .transition()\n    .duration(3000)\n    .call(yAxis);\n\n  // Create a update selection: bind to the new data\n  var u = svg.selectAll(\".lineTest\")\n    .data([data], function(d){ return d.ser1 });\n\n  // Updata the line\n  u\n    .enter()\n    .append(\"path\")\n    .attr(\"class\",\"lineTest\")\n    .merge(u)\n    .transition()\n    .duration(3000)\n    .attr(\"d\", d3.line()\n      .x(function(d) { return x(d.ser1); })\n      .y(function(d) { return y(d.ser2); }))\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"steelblue\")\n      .attr(\"stroke-width\", 2.5)\n}\n\n// At the beginning, I run the update function on the first dataset:\nupdate(data1)\n  }\n\n  }\n,\n\n\n}\n\n</script>\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}