{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"canvas\", {\n    ref: \"canvas\",\n    onMousemove: _cache[0] || (_cache[0] = (...args) => $options.handleMouseMove && $options.handleMouseMove(...args)),\n    height: \"1000\",\n    width: \"1000\"\n  }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */)]);\n}","map":{"version":3,"mappings":";;uBACEA,oBAEM,cADJC,oBAAsF;IAA9EC,GAAG,EAAC,QAAQ;IAAEC,WAAS,yCAAEC,6DAAe;IAAEC,MAAM,EAAC,MAAM;IAACC,KAAK,EAAC","names":["_createElementBlock","_createElementVNode","ref","onMousemove","$options","height","width"],"sourceRoot":"","sources":["/Users/stlp/Desktop/BIOEN 404/User Interface/MoHSES-Scenario-User-Interface/src/views/AboutView.vue"],"sourcesContent":["<template>\n  <div>\n    <canvas ref=\"canvas\" @mousemove=\"handleMouseMove\" height=\"1000\" width=\"1000\"></canvas>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      highlightedRegion: null\n    }\n  },\n  mounted() {\n    this.drawBodyModel();\n  },\n  methods: {\n    drawBodyModel() {\n      const canvas = this.$refs.canvas;\n      const ctx = canvas.getContext(\"2d\");\n      \n      // Draw the head\n      ctx.fillStyle = \"#FFCC99\";\n      ctx.beginPath();\n      ctx.arc(100, 100, 50, 0, 2 * Math.PI);\n      ctx.fill();\n      \n      // Draw the torso\n      ctx.fillStyle = \"#FFFFCC\";\n      ctx.fillRect(75, 150, 50, 100);\n      \n      // Draw the arms\n      ctx.fillStyle = \"#FFCC99\";\n      ctx.fillRect(25, 150, 50, 10);\n      ctx.fillRect(125, 150, 50, 10);\n      \n      // Draw the legs\n      ctx.fillStyle = \"#99CCFF\";\n      ctx.fillRect(75, 250, 10, 50);\n      ctx.fillRect(115, 250, 10, 50);\n    },\n    handleMouseMove(event) {\n      const canvas = this.$refs.canvas;\n      const rect = canvas.getBoundingClientRect();\n      const x = event.clientX - rect.left;\n      const y = event.clientY - rect.top;\n      \n      // Check if the mouse is over the head\n      if (this.isPointInCircle(x, y, 100, 100, 50)) {\n        this.highlightedRegion = \"head\";\n      }\n      // Check if the mouse is over the torso\n      else if (this.isPointInRect(x, y, 75, 150, 50, 100)) {\n        this.highlightedRegion = \"torso\";\n      }\n      // Check if the mouse is over the left arm\n      else if (this.isPointInRect(x, y, 25, 150, 50, 10)) {\n        this.highlightedRegion = \"left arm\";\n      }\n      // Check if the mouse is over the right arm\n      else if (this.isPointInRect(x, y, 125, 150, 50, 10)) {\n        this.highlightedRegion = \"right arm\";\n      }\n      // Check if the mouse is over the left leg\n      else if (this.isPointInRect(x, y, 75, 250, 10, 50)) {\n        this.highlightedRegion = \"left leg\";\n      }\n      // Check if the mouse is over the right leg\n      else if (this.isPointInRect(x, y, 115, 250, 10, 50)) {\n        this.highlightedRegion = \"right leg\";\n      }\n      // Clear the highlighted region if the mouse is not over any body part\n      else {\n        this.highlightedRegion = null;\n      }\n    },\n    isPointInCircle(x, y, cx, cy, r) {\n      const dx = x - cx;\n      const dy = y - cy;\n      return dx*dx + dy*dy <= r*r;\n    },\n    isPointInRect(x, y, rx, ry, rw, rh) {\n      return x >= rx && x <= rx + rw && y >= ry && y <= ry + rh;\n    }\n  }\n};\n</script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}