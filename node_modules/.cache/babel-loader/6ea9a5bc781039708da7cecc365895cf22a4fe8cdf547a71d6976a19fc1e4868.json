{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-4cebd208\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \" This is the MoHSES Scenario and State File Design Web Interface developed by Jake Flynn, Sanika Joshi, and Megan Luu for their 2023 Bioengineering Capstone project. This project was developed under the mentorship of Dr. David Hananel, Dr. Rainer Leuschke, and Dr. Austin Baird from the UW CREST Lab. The purpose of this tool is to allow for an accessible, easy-to-use interface for users to design customized patient scenario files that are compatible with the CREST Advanced Modular Manikin (AMM). \", -1 /* HOISTED */));\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \" The process to generate these patient scenario files is two-fold. First, users will use the BioGears Scenario Creation Tool tab to configure a patient and generate a BioGears patient state XML file. Then, users will input this generated BioGears patient state file into the /insert tab name/ tab to generate a MoHSES-compatible scenario file. \", -1 /* HOISTED */));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_col = _resolveComponent(\"v-col\");\n  const _component_v_row = _resolveComponent(\"v-row\");\n  const _component_v_main = _resolveComponent(\"v-main\");\n  return _openBlock(), _createBlock(_component_v_main, null, {\n    default: _withCtx(() => [_createVNode(_component_v_row, {\n      class: \"justify-center\"\n    }, {\n      default: _withCtx(() => [_createVNode(_component_v_col, {\n        cols: \"12\",\n        sm: \"8\",\n        md: \"6\"\n      }, {\n        default: _withCtx(() => [_hoisted_1, _hoisted_2, _hoisted_3]),\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  });\n}","map":{"version":3,"mappings":";;gEAKIA,oBAKI,WALD,sfAKH;gEACAA,oBAAI;gEACJA,oBAIE,WAJC,0VAIL;;;;;;uBAfAC,aAkBSC;sBAhBT,MAeQ,CAfRC,aAeQC;MAfDC,KAAK,EAAC;IAAgB;wBAC7B,MAaQ,CAbRF,aAaQG;QAbDC,IAAI,EAAC,IAAI;QAACC,EAAE,EAAC,GAAG;QAACC,EAAE,EAAC;;0BACzB,MAKI,CALJC,UAKI,EACJC,UAAI,EACJC,UAIE","names":["_createElementVNode","_createBlock","_component_v_main","_createVNode","_component_v_row","class","_component_v_col","cols","sm","md","_hoisted_1","_hoisted_2","_hoisted_3"],"sourceRoot":"","sources":["/Users/stlp/Desktop/Spring 2023/BIOEN 405/User Interface/MoHSES-Scenario-User-Interface/src/views/AboutView.vue"],"sourcesContent":["<template>\n  <v-main>\n\n  <v-row class=\"justify-center\">\n  <v-col cols=\"12\" sm=\"8\" md=\"6\">\n    <p>\n    This is the MoHSES Scenario and State File Design Web Interface developed by Jake Flynn, Sanika Joshi, and Megan Luu for their 2023 Bioengineering Capstone project.\n    This project was developed under the mentorship of Dr. David Hananel, Dr. Rainer Leuschke, and Dr. Austin Baird from the UW CREST Lab. The purpose\n    of this tool is to allow for an accessible, easy-to-use interface for users to design customized patient scenario files that are compatible with the CREST\n    Advanced Modular Manikin (AMM). \n    </p>\n    <br>\n    <p>\n    The process to generate these patient scenario files is two-fold. First, users will use the BioGears Scenario Creation Tool tab to configure a patient and\n    generate a BioGears patient state XML file. Then, users will input this generated BioGears patient state file into the /insert tab name/ tab\n    to generate a MoHSES-compatible scenario file.\n  </p>\n  </v-col>\n  </v-row>\n  </v-main>\n</template>\n\n<script>\nexport default {\n}\n</script>\n\n<style scoped>\n@media (hover: hover) {\n  svg:hover {\n    cursor: pointer;\n  }\n  svg path:hover {\n    opacity: 0.8;\n  }\n}\n.active {\n    fill: #FF0000;\n  }\n.noClick {\n  pointer-events: none;\n}\n</style>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}