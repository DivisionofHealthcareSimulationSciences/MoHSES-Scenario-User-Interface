{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, Fragment as _Fragment, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"p\", {\n  style: {\n    \"font-size\": \"20px\"\n  }\n}, \"Please upload your .CSV:\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_5 = {\n  ref: \"chart\"\n};\nexport function render(_ctx, _cache) {\n  const _component_v_toolbar_title = _resolveComponent(\"v-toolbar-title\");\n  const _component_v_toolbar = _resolveComponent(\"v-toolbar\");\n  const _component_v_file_input = _resolveComponent(\"v-file-input\");\n  const _component_v_spacer = _resolveComponent(\"v-spacer\");\n  const _component_v_btn = _resolveComponent(\"v-btn\");\n  const _component_v_col = _resolveComponent(\"v-col\");\n  const _component_v_select = _resolveComponent(\"v-select\");\n  const _component_v_row = _resolveComponent(\"v-row\");\n  const _component_v_card_text = _resolveComponent(\"v-card-text\");\n  const _component_v_card = _resolveComponent(\"v-card\");\n  const _component_v_container = _resolveComponent(\"v-container\");\n  const _component_v_main = _resolveComponent(\"v-main\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_v_toolbar, {\n    style: {\n      \"color\": \"white\"\n    },\n    color: \"#4b0082\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_toolbar_title, null, {\n      default: _withCtx(() => [_createTextVNode(\"BioGears Plotting Tool\")]),\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_main, {\n    class: \"bg-grey-lighten-3\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_container, null, {\n      default: _withCtx(() => [_createVNode(_component_v_card, {\n        class: \"mt-n12\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_v_card_text, null, {\n          default: _withCtx(() => [_hoisted_1, _hoisted_2, _createVNode(_component_v_file_input, {\n            modelValue: _ctx.chosenFile,\n            \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.chosenFile = $event)\n          }, null, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_v_spacer), _createVNode(_component_v_btn, {\n            onClick: _ctx.importFile\n          }, {\n            default: _withCtx(() => [_createTextVNode(\"Import File\")]),\n            _: 1 /* STABLE */\n          }, 8 /* PROPS */, [\"onClick\"]), _hoisted_3, _hoisted_4, _ctx.array2D ? (_openBlock(), _createBlock(_component_v_row, {\n            key: 0\n          }, {\n            default: _withCtx(() => [_createVNode(_component_v_col, {\n              cols: \"2\"\n            }, {\n              default: _withCtx(() => [_createVNode(_component_v_btn, {\n                onClick: _ctx.drawSVG\n              }, {\n                default: _withCtx(() => [_createTextVNode(\"Plot Chart\")]),\n                _: 1 /* STABLE */\n              }, 8 /* PROPS */, [\"onClick\"])]),\n              _: 1 /* STABLE */\n            }), _createVNode(_component_v_col, {\n              cols: \"10\"\n            }, {\n              default: _withCtx(() => [_createVNode(_component_v_select, {\n                onChange: _cache[1] || (_cache[1] = $event => _ctx.updateData(_ctx.array2D[0], _ctx.array2D[_ctx.allGroup.indexOf(_ctx.selectPlot)])),\n                modelValue: _ctx.selectPlot,\n                \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.selectPlot = $event),\n                id: \"selectButton\",\n                items: _ctx.allGroup.slice(1)\n              }, null, 8 /* PROPS */, [\"modelValue\", \"items\"])]),\n              _: 1 /* STABLE */\n            })]),\n\n            _: 1 /* STABLE */\n          })) : _createCommentVNode(\"v-if\", true)]),\n          _: 1 /* STABLE */\n        }), _createElementVNode(\"div\", _hoisted_5, null, 512 /* NEED_PATCH */)]),\n\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  })], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";gCAQYA,oBAAuD;EAApDC,KAAuB,EAAvB;IAAA;EAAA;AAAuB,GAAC,0BAAwB;gCACnDD,oBAAI;gCAQJA,oBAAI;gCACJA,oBAAI;;EAcHE,GAAG,EAAC;AAAO;;;;;;;;;;;;;;6DA/BpBC,aAEYC;IAFDH,KAAoB,EAApB;MAAA;IAAA,CAAoB;IAACI,KAAK,EAAC;;sBACpC,MAAyD,CAAzDF,aAAyDG;wBAAxC,MAAsB,kBAAtB,wBAAsB;;;;;MAEzCH,aA+BSI;IA/BDC,KAAK,EAAC;EAAmB;sBAC/B,MA6Bc,CA7BdL,aA6BcM;wBA5BZ,MA2BS,CA3BTN,aA2BSO;QA3BDF,KAAK,EAAC;MAAQ;0BACpB,MAuBY,CAvBZL,aAuBYQ;4BAtBV,MAAuD,CAAvDC,UAAuD,EACvDC,UAAI,EACJV,aAAkDW;wBAA3BC,eAAU;uEAAVA,eAAU;mDACjCZ,aAAqBa,sBAErBb,aAA8Cc;YAAtCC,OAAK,EAAEH;UAAU;8BAAE,MAAW,kBAAX,aAAW;;0CAItCI,UAAI,EACJC,UAAI,EAESL,YAAO,kBAApBM,aASQC;YAAAC;UAAA;8BAPJ,MAEQ,CAFRpB,aAEQqB;cAFDC,IAAI,EAAC;YAAG;gCACX,MAA0C,CAA1CtB,aAA0Cc;gBAAlCC,OAAK,EAAEH;cAAO;kCAAE,MAAU,kBAAV,YAAU;;;;gBAEtCZ,aAEQqB;cAFDC,IAAI,EAAC;YAAI;gCACZ,MAA+J,CAA/JtB,aAA+JuB;gBAApJC,QAAM,sCAAEZ,eAAU,CAACA,YAAO,KAAKA,YAAO,CAACA,aAAQ,CAACa,OAAO,CAACb,eAAU;4BAAcA,eAAU;2EAAVA,eAAU;gBAAEc,EAAE,EAAC,cAAc;gBAAEC,KAAK,EAAEf,aAAQ,CAACgB,KAAK;;;;;;;;YAM3J/B,oBAAuB,OAAvBgC,UAAuB","names":["_createElementVNode","style","ref","_createVNode","_component_v_toolbar","color","_component_v_toolbar_title","_component_v_main","class","_component_v_container","_component_v_card","_component_v_card_text","_hoisted_1","_hoisted_2","_component_v_file_input","_ctx","_component_v_spacer","_component_v_btn","onClick","_hoisted_3","_hoisted_4","_createBlock","_component_v_row","key","_component_v_col","cols","_component_v_select","onChange","indexOf","id","items","slice","_hoisted_5"],"sourceRoot":"","sources":["/Users/stlp/Desktop/Spring 2023/BIOEN 405/User Interface/MoHSES-Scenario-User-Interface/src/views/PlottingView.vue"],"sourcesContent":["<template>\n    <v-toolbar style=\"color: white\" color=\"#4b0082\">\n      <v-toolbar-title>BioGears Plotting Tool</v-toolbar-title>\n    </v-toolbar>\n    <v-main class=\"bg-grey-lighten-3\">\n      <v-container>\n        <v-card class=\"mt-n12\">\n          <v-card-text>\n            <p style=\"font-size: 20px\">Please upload your .CSV:</p>\n            <br>\n            <v-file-input v-model=\"chosenFile\"></v-file-input>\n            <v-spacer></v-spacer>\n\n            <v-btn @click=\"importFile\">Import File</v-btn>\n            \n\n    \n            <br>\n            <br>\n \n            <v-row v-if=\"array2D\">\n            \n                <v-col cols=\"2\">\n                    <v-btn @click=\"drawSVG\">Plot Chart</v-btn>\n                </v-col>\n                <v-col cols=\"10\">\n                    <v-select @change=\"updateData(array2D[0], array2D[allGroup.indexOf(selectPlot)])\" v-model=\"selectPlot\" id=\"selectButton\" :items=\"allGroup.slice(1)\"></v-select>\n                </v-col>\n                \n            </v-row>\n        </v-card-text>\n        \n        <div ref=\"chart\"></div>\n        </v-card>\n      </v-container>\n    </v-main>\n  </template>\n  \n<script>\nimport * as d3 from 'd3';\n\nexport default {\n      data: () => ({\n        chosenFile: null,\n        data: null,\n        columnData:[],\n        array2D: null,\n        allGroup: [],\n        selectPlot: null,\n        data1: null\n        data2: null\n      }),\n      methods: {\n        importFile() {\n      \n      if (this.chosenFile === null) {\n        this.data = \"No File Chosen\"\n      } else {\n        var reader = new FileReader();\n        var file = this.chosenFile[0]\n        // Use the javascript reader object to load the contents\n        // of the file in the v-model prop\n        reader.readAsText(file);\n        reader.onload = () => {\n        this.data = reader.result;\n        const rows = this.data.split('\\n')\n        this.array2D = Array.from({ length: rows[0].split(',').length }, () => []);\n        for (let i=0; i<rows.length;i++) {\n            const columns = rows[i].split(',');\n            for (let j =0; j<columns.length;j++) {\n                this.array2D[j].push(columns[j]);\n            }\n            \n        }\n        for (let i=0; i<this.array2D.length;i++) {\n        this.allGroup.push(this.array2D[i][0])\n        this.array2D[i] = this.array2D[i].slice(1).map(str => parseInt(str));\n    }\n    console.log(this.allGroup)\n    console.log(this.array2D)\n        console.log(this.array2D)\n      }\n    }\n},\n\n   mounted: function() {\n     this.drawSVG()\n   },\n   watch: {\n     dataModel(data1, data2){\n       this.drawSVG()\n     },\n   },\n   methods: {\n     drawSVG: function(data1, data2){\n       var element = document.getElementById(\"visualization\");\n\t\t\tlet localThis = this;\n\t\t\tif ($(element).children()) {\n\t\t\t\tconsole.log('re-drawing');\n\t\t\t\t$(element).empty();\n\t\t\t}\n\t\t\tvar lineData = this.dataModel; \n\t\t\tvar vis = d3.select(\"#visualization\"),\n\t\t\t    margin = {\n\t\t\t      top: 20,\n\t\t\t      right: 20,\n\t\t\t      bottom: 20,\n\t\t\t      left: 50\n\t\t\t    },\n\t\t\t    width = Math.max($(element).width(), 400) - margin.left - margin.right,\n\t\t\t\theight = $(element).height() - margin.top - margin.bottom,\n\t\t\t    xRange = d3.scale.linear().range([margin.left, width - margin.right]).domain([d3.min(data1),d3.max(data1)]),\n\t\t\t    yRange = d3.scale.linear().range([height - margin.top, margin.bottom]).domain([d3.min(data2), d3.max(data2)]),\n\n\t\t\t    xAxis = d3.svg.axis()\n\t\t\t      .scale(xRange)\n\t\t\t      .tickSize(1)\n\t\t\t      .tickSubdivide(true),\n\n\t\t\t    yAxis = d3.svg.axis()\n\t\t\t      .scale(yRange)\n\t\t\t      .tickSize(1)\n\t\t\t      .orient(\"left\")\n\t\t\t      .tickSubdivide(true);\n\n\t\t\t  vis.append(\"svg:g\")\n\t\t\t    .attr(\"class\", \"x axis\")\n\t\t\t    .attr(\"transform\", \"translate(0,\" + (height - margin.bottom) + \")\")\n\t\t\t    .call(xAxis);\n\n\t\t\t  vis.append(\"svg:g\")\n\t\t\t    .attr(\"class\", \"y axis\")\n\t\t\t    .attr(\"transform\", \"translate(\" + (margin.left) + \",0)\")\n\t\t\t    .call(yAxis);\n\n\t\t\t  var lineFunc = d3.svg.line()\n\t\t\t  .x(function (d) {\n\t\t\t    return xRange(d.x);\n\t\t\t  })\n\t\t\t  .y(function (d) {\n\t\t\t    return yRange(d.y);\n\t\t\t  })\n\t\t\t  .interpolate('basis');\n\n\t\t\tvis.append(\"svg:path\")\n\t\t\t  .attr(\"d\", lineFunc(lineData))\n\t\t\t  .attr(\"stroke\", \"blue\")\n\t\t\t  .attr(\"stroke-width\", 2)\n\t\t\t  .attr(\"fill\", \"none\");\n     }\n   }\n  \n},\n\n\n\n  methods: {\n    updateData: function(){\n      this.dataModel = this.dataModel.map(item=>{\n        item.x = Math.floor(Math.random() * 60);\n        item.y = Math.floor(Math.random() * 60);\n        return item\n      })\n    }\n  }\n}\n\n</script>\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}