{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, Fragment as _Fragment, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-45730464\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", {\n  class: \"text-center\",\n  style: {\n    \"font-size\": \"20px\"\n  }\n}, \" Please upload a simulation .CSV to visualize your results: \", -1 /* HOISTED */));\nconst _hoisted_4 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_5 = {\n  ref: \"chart\",\n  class: \"chart-container\"\n};\nconst _hoisted_6 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_7 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_8 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\nconst _hoisted_9 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_toolbar_title = _resolveComponent(\"v-toolbar-title\");\n  const _component_v_toolbar = _resolveComponent(\"v-toolbar\");\n  const _component_v_card_title = _resolveComponent(\"v-card-title\");\n  const _component_v_file_input = _resolveComponent(\"v-file-input\");\n  const _component_v_col = _resolveComponent(\"v-col\");\n  const _component_v_btn = _resolveComponent(\"v-btn\");\n  const _component_v_row = _resolveComponent(\"v-row\");\n  const _component_v_select = _resolveComponent(\"v-select\");\n  const _component_v_card_text = _resolveComponent(\"v-card-text\");\n  const _component_v_card = _resolveComponent(\"v-card\");\n  const _component_v_container = _resolveComponent(\"v-container\");\n  const _component_v_main = _resolveComponent(\"v-main\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_v_toolbar, {\n    style: {\n      \"color\": \"white\"\n    },\n    color: \"#3c2d70\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_toolbar_title, null, {\n      default: _withCtx(() => [_createTextVNode(\"BioGears Plotting Tool\")]),\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_main, {\n    class: \"bg-grey-lighten-3\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_container, null, {\n      default: _withCtx(() => [_createVNode(_component_v_card, {\n        flat: \"\",\n        class: \"mt-n12\"\n      }, {\n        default: _withCtx(() => [_hoisted_1, _createVNode(_component_v_card_title, {\n          class: \"text-center\",\n          style: {\n            \"font-size\": \"36px\"\n          }\n        }, {\n          default: _withCtx(() => [_createTextVNode(\"Welcome to the BioGears Plotting Tool!\")]),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_v_card_text, null, {\n          default: _withCtx(() => [_hoisted_2, _hoisted_3, _hoisted_4, _createVNode(_component_v_row, null, {\n            default: _withCtx(() => [_createVNode(_component_v_col, {\n              cols: \"10\"\n            }, {\n              default: _withCtx(() => [_createVNode(_component_v_file_input, {\n                modelValue: _ctx.chosenFile,\n                \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.chosenFile = $event)\n              }, null, 8 /* PROPS */, [\"modelValue\"])]),\n              _: 1 /* STABLE */\n            }), _createVNode(_component_v_col, null, {\n              default: _withCtx(() => [_createVNode(_component_v_btn, {\n                style: {\n                  \"color\": \"white\"\n                },\n                color: \"#3c2d70\",\n                onClick: $options.importFile\n              }, {\n                default: _withCtx(() => [_createTextVNode(\"Import File\")]),\n                _: 1 /* STABLE */\n              }, 8 /* PROPS */, [\"onClick\"]), _createTextVNode(\"a \")]),\n              _: 1 /* STABLE */\n            })]),\n\n            _: 1 /* STABLE */\n          }), _createVNode(_component_v_row, null, {\n            default: _withCtx(() => [_createVNode(_component_v_col, {\n              cols: \"10\"\n            }, {\n              default: _withCtx(() => [_ctx.array2D ? (_openBlock(), _createBlock(_component_v_select, {\n                key: 0,\n                \"prepend-icon\": \"mdi-chart-line\",\n                label: \"Please select a variable to plot.\",\n                modelValue: _ctx.selectPlot,\n                \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.selectPlot = $event),\n                id: \"selectButton\",\n                items: _ctx.allGroup.slice(1)\n              }, null, 8 /* PROPS */, [\"modelValue\", \"items\"])) : _createCommentVNode(\"v-if\", true)]),\n              _: 1 /* STABLE */\n            }), _createVNode(_component_v_col, null, {\n              default: _withCtx(() => [_ctx.array2D ? (_openBlock(), _createBlock(_component_v_btn, {\n                key: 0,\n                style: {\n                  \"color\": \"white\"\n                },\n                color: \"#3c2d70\",\n                onClick: $options.plotSelectedChart\n              }, {\n                default: _withCtx(() => [_createTextVNode(\"Plot Chart\")]),\n                _: 1 /* STABLE */\n              }, 8 /* PROPS */, [\"onClick\"])) : _createCommentVNode(\"v-if\", true)]),\n              _: 1 /* STABLE */\n            })]),\n\n            _: 1 /* STABLE */\n          })]),\n\n          _: 1 /* STABLE */\n        }), _createVNode(_component_v_row, {\n          justify: \"center\"\n        }, {\n          default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_5, null, 512 /* NEED_PATCH */)]),\n\n          _: 1 /* STABLE */\n        }), _ctx.plotChartVar ? (_openBlock(), _createBlock(_component_v_row, {\n          key: 0,\n          justify: \"center\"\n        }, {\n          default: _withCtx(() => [_createVNode(_component_v_btn, {\n            style: {\n              \"color\": \"white\"\n            },\n            color: \"#3c2d70\",\n            onClick: $options.downloadChart\n          }, {\n            default: _withCtx(() => [_createTextVNode(\"Download Chart\")]),\n            _: 1 /* STABLE */\n          }, 8 /* PROPS */, [\"onClick\"]), _hoisted_6, _hoisted_7, _hoisted_8, _hoisted_9]),\n          _: 1 /* STABLE */\n        })) : _createCommentVNode(\"v-if\", true)]),\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  })], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";;gEAOIA,oBAAM;gEAKPA,oBAAM;gEACNA,oBAEI;EAFDC,KAAK,EAAC,aAAa;EAACC,KAAuB,EAAvB;IAAA;EAAA;GAAwB,8DAE/C;gEACAF,oBAAM;;EAkCDG,GAAG,EAAC,OAAO;EAACF,KAAK,EAAC;;gEAMvBD,oBAAM;gEACNA,oBAAM;gEACNA,oBAAM;gEACNA,oBAAM;;;;;;;;;;;;;;;6DA1DRI,aAEYC;IAFDH,KAAoB,EAApB;MAAA;IAAA,CAAoB;IAACI,KAAK,EAAC;;sBACpC,MAAyD,CAAzDF,aAAyDG;wBAAxC,MAAsB,kBAAtB,wBAAsB;;;;;MAEzCH,aA2DSI;IA3DDP,KAAK,EAAC;EAAmB;sBAC/B,MAyDc,CAzDdG,aAyDcK;wBAxDf,MAuDS,CAvDTL,aAuDSM;QAvDDC,IAAI,EAAJ,EAAI;QAACV,KAAK,EAAC;;0BACjB,MAAM,CAANW,UAAM,EACNR,aAECS;UAFaZ,KAAK,EAAC,aAAa;UAACC,KAAuB,EAAvB;YAAA;UAAA;;4BAClC,MAAsC,kBAAtC,wCAAsC;;YAEtCE,aAqCcU;4BApCf,MAAM,CAANC,UAAM,EACNC,UAEI,EACJC,UAAM,EACNb,aASQc;8BARN,MAEQ,CAFRd,aAEQe;cAFDC,IAAI,EAAC;YAAI;gCACjB,MAAkD,CAAlDhB,aAAkDiB;4BAA3BC,eAAU;2EAAVA,eAAU;;;gBAEhClB,aAIQe;gCAHT,MAEC,CAFDf,aAECmB;gBAFMrB,KAAoB,EAApB;kBAAA;gBAAA,CAAoB;gBAACI,KAAK,EAAC,SAAS;gBAAEkB,OAAK,EAAEC;;kCACjD,MAAW,kBAAX,aAAW;;+DACb,IACA;;;;;cAEFrB,aAoBQc;8BAnBN,MASQ,CATRd,aASQe;cATDC,IAAI,EAAC;YAAI;gCACjB,MAOY,CALJE,YAAO,kBAFfI,aAOYC;;gBANV,cAAY,EAAC,gBAAgB;gBAE7BC,KAAK,EAAC,mCAAmC;4BAChCN,eAAU;2EAAVA,eAAU;gBACnBO,EAAE,EAAC,cAAc;gBAChBC,KAAK,EAAER,aAAQ,CAACS,KAAK;;;gBAGvB3B,aAQQe;gCAPT,MAMC,CAHOG,YAAO,kBAHfI,aAMCH;;gBALCrB,KAAoB,EAApB;kBAAA;gBAAA,CAAoB;gBACpBI,KAAK,EAAC,SAAS;gBAEdkB,OAAK,EAAEC;;kCACP,MAAU,kBAAV,YAAU;;;;;;;;;;YAKbrB,aAEQc;UAFDc,OAAO,EAAC;QAAQ;4BACxB,MAA+C,CAA/ChC,oBAA+C,OAA/CiC,UAA+C;;;YAEjCX,iBAAY,kBAAzBI,aAQQR;;UARmBc,OAAO,EAAC;;4BACpC,MAEC,CAFD5B,aAECmB;YAFMrB,KAAoB,EAApB;cAAA;YAAA,CAAoB;YAACI,KAAK,EAAC,SAAS;YAAEkB,OAAK,EAAEC;;8BACjD,MAAc,kBAAd,gBAAc;;0CAEjBS,UAAM,EACNC,UAAM,EACNC,UAAM,EACNC,UAAM","names":["_createElementVNode","class","style","ref","_createVNode","_component_v_toolbar","color","_component_v_toolbar_title","_component_v_main","_component_v_container","_component_v_card","flat","_hoisted_1","_component_v_card_title","_component_v_card_text","_hoisted_2","_hoisted_3","_hoisted_4","_component_v_row","_component_v_col","cols","_component_v_file_input","_ctx","_component_v_btn","onClick","$options","_createBlock","_component_v_select","label","id","items","slice","justify","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9"],"sourceRoot":"","sources":["/Users/stlp/Desktop/Spring 2023/BIOEN 405/User Interface/MoHSES-Scenario-User-Interface/src/views/PlottingView.vue"],"sourcesContent":["<template>\n\t<v-toolbar style=\"color: white\" color=\"#3c2d70\">\n\t  <v-toolbar-title>BioGears Plotting Tool</v-toolbar-title>\n\t</v-toolbar>\n\t<v-main class=\"bg-grey-lighten-3\">\n\t  <v-container>\n\t\t<v-card flat class=\"mt-n12\">\n\t\t  <br />\n\t\t  <v-card-title class=\"text-center\" style=\"font-size: 36px\"\n\t\t\t>Welcome to the BioGears Plotting Tool!</v-card-title\n\t\t  >\n\t\t  <v-card-text>\n\t\t\t<br />\n\t\t\t<p class=\"text-center\" style=\"font-size: 20px\">\n\t\t\t  Please upload a simulation .CSV to visualize your results:\n\t\t\t</p>\n\t\t\t<br />\n\t\t\t<v-row>\n\t\t\t  <v-col cols=\"10\">\n\t\t\t\t<v-file-input v-model=\"chosenFile\"></v-file-input>\n\t\t\t  </v-col>\n\t\t\t  <v-col>\n\t\t\t\t<v-btn style=\"color: white\" color=\"#3c2d70\" @click=\"importFile\"\n\t\t\t\t  >Import File</v-btn\n\t\t\t\t>a\n\t\t\t  </v-col>\n\t\t\t</v-row>\n\t\t\t<v-row>\n\t\t\t  <v-col cols=\"10\">\n\t\t\t\t<v-select\n\t\t\t\t  prepend-icon=\"mdi-chart-line\"\n\t\t\t\t  v-if=\"array2D\"\n\t\t\t\t  label=\"Please select a variable to plot.\"\n\t\t\t\t  v-model=\"selectPlot\"\n\t\t\t\t  id=\"selectButton\"\n\t\t\t\t  :items=\"allGroup.slice(1)\"\n\t\t\t\t></v-select>\n\t\t\t  </v-col>\n\t\t\t  <v-col>\n\t\t\t\t<v-btn\n\t\t\t\t  style=\"color: white\"\n\t\t\t\t  color=\"#3c2d70\"\n\t\t\t\t  v-if=\"array2D\"\n\t\t\t\t  @click=\"plotSelectedChart\"\n\t\t\t\t  >Plot Chart</v-btn\n\t\t\t\t>\n\t\t\t  </v-col>\n\t\t\t</v-row>\n\t\t  </v-card-text>\n\t\t  <v-row justify=\"center\">\n\t\t\t<div ref=\"chart\" class=\"chart-container\"></div>\n\t\t  </v-row>\n\t\t  <v-row v-if=\"plotChartVar\" justify=\"center\">\n\t\t\t<v-btn style=\"color: white\" color=\"#3c2d70\" @click=\"downloadChart\"\n\t\t\t  >Download Chart</v-btn\n\t\t\t>\n\t\t\t<br />\n\t\t\t<br />\n\t\t\t<br />\n\t\t\t<br />\n\t\t  </v-row>\n\t\t</v-card>\n\t  </v-container>\n\t</v-main>\n  </template>\n  <script>\n  import vegaEmbed from 'vega-embed';\n  export default {\n\t  data: () => ({\n\t\t  plotChartVar: false,\n\t\t  currentSpec: null,\n\t\t  chosenFile: null,\n\t\t  data: null,\n\t\t  columnData: [],\n\t\t  array2D: null,\n\t\t  allGroup: [],\n\t\t  selectPlot: null\n\t  }),\n\t  methods: {\n\t\t  async downloadChart() {\n\t\t\t\t  if(!this.currentSpec) {\n\t\t\t\t\t  return; // Exit the method if no chart has been plotted\n\t\t\t\t  }\n\t\t\t\t  // Get the Vega view instance from the vegaEmbed function\n\t\t\t\t  const {\n\t\t\t\t\t  view\n\t\t\t\t  } = await vegaEmbed(this.$refs.chart, this.currentSpec, {\n\t\t\t\t\t  actions: false,\n\t\t\t\t  });\n\t\t\t\t  // Generate the PNG image data URL\n\t\t\t\t  const dataUrl = await view.toImageURL('png');\n\t\t\t\t  // Create a temporary link element for downloading the chart\n\t\t\t\t  const link = document.createElement('a');\n\t\t\t\t  link.href = dataUrl;\n\t\t\t\t  link.download = 'chart.png';\n\t\t\t\t  link.style.display = 'none';\n\t\t\t\t  // Add the link to the DOM, click it, and remove it\n\t\t\t\t  document.body.appendChild(link);\n\t\t\t\t  link.click();\n\t\t\t\t  document.body.removeChild(link);\n\t\t\t  },\n\t\t\t  importFile() {\n\t\t\t\t  if(this.chosenFile === null) {\n\t\t\t\t\t  this.data = \"No File Chosen\"\n\t\t\t\t  } else {\n\t\t\t\t\t  var reader = new FileReader();\n\t\t\t\t\t  var file = this.chosenFile[0]\n\t\t\t\t\t\t  // Use the javascript reader object to load the contents\n\t\t\t\t\t\t  // of the file in the v-model prop\n\t\t\t\t\t  reader.readAsText(file);\n\t\t\t\t\t  reader.onload = () => {\n\t\t\t\t\t\t  this.data = reader.result;\n\t\t\t\t\t\t  const rows = this.data.split('\\n')\n\t\t\t\t\t\t  this.array2D = Array.from({\n\t\t\t\t\t\t\t  length: rows[0].split(',').length\n\t\t\t\t\t\t  }, () => []);\n\t\t\t\t\t\t  for(let i = 0; i < rows.length; i++) {\n\t\t\t\t\t\t\t  const columns = rows[i].split(',');\n\t\t\t\t\t\t\t  for(let j = 0; j < columns.length; j++) {\n\t\t\t\t\t\t\t\t  this.array2D[j].push(columns[j]);\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  for(let i = 0; i < this.array2D.length; i++) {\n\t\t\t\t\t\t\t  this.allGroup.push(this.array2D[i][0])\n\t\t\t\t\t\t\t  this.array2D[i] = this.array2D[i].slice(1).map(str => parseFloat(str));\n\t\t\t\t\t\t  }\n\t\t\t\t\t\t  console.log(this.allGroup)\n\t\t\t\t\t\t  console.log(this.array2D)\n\t\t\t\t\t\t  console.log(this.array2D)\n\t\t\t\t\t  }\n\t\t\t\t  }\n\t\t\t  },\n\t\t\t  plotChart(data) {\n\t\t\t\t  const xAxisData = this.array2D[0];\n\t\t\t\t  const yAxisData = data;\n\t\t\t\t  const dataset = xAxisData.map((value, index) => ({\n\t\t\t\t\t  xValue: value,\n\t\t\t\t\t  yValue: yAxisData[index]\n\t\t\t\t  }));\n\t\t\t\t  const spec = {\n\t\t\t\t\t  $schema: 'https://vega.github.io/schema/vega-lite/v5.json',\n\t\t\t\t\t  data: {\n\t\t\t\t\t\t  values: dataset\n\t\t\t\t\t  },\n\t\t\t\t\t  mark: 'line',\n\t\t\t\t\t  title: {\n\t\t\t\t\t\t  text: this.selectPlot + ' Versus Time (s)', // Set the title text\n\t\t\t\t\t\t  anchor: 'middle', // Position the title (start, middle, or end)\n\t\t\t\t\t\t  fontSize: 16, // Set the font size\n\t\t\t\t\t\t  fontWeight: 'bold', // Set the font weight\n\t\t\t\t\t\t  dy: -10, // Adjust the vertical distance between the title and the chart\n\t\t\t\t\t  },\n\t\t\t\t\t  encoding: {\n\t\t\t\t\t\t  x: {\n\t\t\t\t\t\t\t  field: 'xValue',\n\t\t\t\t\t\t\t  type: 'quantitative',\n\t\t\t\t\t\t\t  title: 'Time (s)'\n\t\t\t\t\t\t  },\n\t\t\t\t\t\t  y: {\n\t\t\t\t\t\t\t  field: 'yValue',\n\t\t\t\t\t\t\t  type: 'quantitative',\n\t\t\t\t\t\t\t  title: this.selectPlot\n\t\t\t\t\t\t  },\n\t\t\t\t\t\t  tooltip: [{\n\t\t\t\t\t\t\t  field: 'xValue',\n\t\t\t\t\t\t\t  type: 'quantitative',\n\t\t\t\t\t\t\t  title: 'Time (s)'\n\t\t\t\t\t\t  }, {\n\t\t\t\t\t\t\t  field: 'yValue',\n\t\t\t\t\t\t\t  type: 'quantitative',\n\t\t\t\t\t\t\t  title: this.selectPlot\n\t\t\t\t\t\t  }, ],\n\t\t\t\t\t  },\n\t\t\t\t\t  selection: {\n\t\t\t\t\t\t  mySelection: {\n\t\t\t\t\t\t\t  type: 'interval',\n\t\t\t\t\t\t\t  bind: 'scales', // Bind the selection to the chart scales\n\t\t\t\t\t\t\t  encodings: ['x', 'y'], // Apply the selection to both x and y axes\n\t\t\t\t\t\t\t  zoom: true, // Enable zooming\n\t\t\t\t\t\t\t  translate: true, // Enable panning\n\t\t\t\t\t\t  },\n\t\t\t\t\t  },\n\t\t\t\t\t  width: 700, // Add the desired width\n\t\t\t\t\t  height: 550, // Add the desired height\n\t\t\t\t  };\n\t\t\t\t  vegaEmbed(this.$refs.chart, spec, {\n\t\t\t\t\t  actions: false\n\t\t\t\t  });\n\t\t\t\t  return spec\n\t\t\t  },\n\t\t\t  plotSelectedChart() {\n\t\t\t\t  this.plotChartVar = true;\n\t\t\t\t  if(this.array2D && this.allGroup && this.selectPlot) {\n\t\t\t\t\t  this.currentSpec = this.plotChart(this.array2D[this.allGroup.indexOf(this.selectPlot)]);\n\t\t\t\t  }\n\t\t\t  },\n\t  }\n  }\n  </script>\n  <style scoped>\n  .chart-container {\n\tpadding-bottom: 50px;\n  }\n  </style>  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}