{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"p\", {\n  style: {\n    \"font-size\": \"20px\"\n  }\n}, \"Please upload your .CSV:\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_4 = {\n  ref: \"chart\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_toolbar_title = _resolveComponent(\"v-toolbar-title\");\n  const _component_v_toolbar = _resolveComponent(\"v-toolbar\");\n  const _component_v_file_input = _resolveComponent(\"v-file-input\");\n  const _component_v_spacer = _resolveComponent(\"v-spacer\");\n  const _component_v_btn = _resolveComponent(\"v-btn\");\n  const _component_v_card_text = _resolveComponent(\"v-card-text\");\n  const _component_v_card = _resolveComponent(\"v-card\");\n  const _component_v_container = _resolveComponent(\"v-container\");\n  const _component_v_main = _resolveComponent(\"v-main\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_v_toolbar, {\n    style: {\n      \"color\": \"white\"\n    },\n    color: \"#4b0082\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_toolbar_title, null, {\n      default: _withCtx(() => [_createTextVNode(\"BioGears Plotting Tool\")]),\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_main, {\n    class: \"bg-grey-lighten-3\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_container, null, {\n      default: _withCtx(() => [_createVNode(_component_v_card, {\n        class: \"mt-n12\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_v_card_text, null, {\n          default: _withCtx(() => [_hoisted_1, _hoisted_2, _createVNode(_component_v_file_input, {\n            modelValue: _ctx.chosenFile,\n            \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.chosenFile = $event)\n          }, null, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_v_spacer), _createVNode(_component_v_btn, {\n            onClick: $options.importFile\n          }, {\n            default: _withCtx(() => [_createTextVNode(\"Import File\")]),\n            _: 1 /* STABLE */\n          }, 8 /* PROPS */, [\"onClick\"]), _createVNode(_component_v_spacer), _hoisted_3, _createVNode(_component_v_btn, {\n            onClick: $options.plotChart\n          }, {\n            default: _withCtx(() => [_createTextVNode(\"Plot Chart\")]),\n            _: 1 /* STABLE */\n          }, 8 /* PROPS */, [\"onClick\"])]),\n          _: 1 /* STABLE */\n        }), _createElementVNode(\"div\", _hoisted_4, null, 512 /* NEED_PATCH */)]),\n\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  })], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";gCAQYA,oBAAuD;EAApDC,KAAuB,EAAvB;IAAA;EAAA;AAAuB,GAAC,0BAAwB;gCACnDD,oBAAI;gCAKJA,oBAAI;;EAGHE,GAAG,EAAC;AAAO;;;;;;;;;;;6DAhBpBC,aAEYC;IAFDH,KAAoB,EAApB;MAAA;IAAA,CAAoB;IAACI,KAAK,EAAC;;sBACpC,MAAyD,CAAzDF,aAAyDG;wBAAxC,MAAsB,kBAAtB,wBAAsB;;;;;MAEzCH,aAgBSI;IAhBDC,KAAK,EAAC;EAAmB;sBAC/B,MAcc,CAddL,aAccM;wBAbZ,MAYS,CAZTN,aAYSO;QAZDF,KAAK,EAAC;MAAQ;0BACpB,MASY,CATZL,aASYQ;4BARV,MAAuD,CAAvDC,UAAuD,EACvDC,UAAI,EACJV,aAAkDW;wBAA3BC,eAAU;uEAAVA,eAAU;mDACjCZ,aAAqBa,sBACrBb,aAA8Cc;YAAtCC,OAAK,EAAEC;UAAU;8BAAE,MAAW,kBAAX,aAAW;;0CACtChB,aAAqBa,sBACrBI,UAAI,EACJjB,aAA4Cc;YAApCC,OAAK,EAAEC;UAAS;8BAAE,MAAU,kBAAV,YAAU;;;;YAExCnB,oBAAuB,OAAvBqB,UAAuB","names":["_createElementVNode","style","ref","_createVNode","_component_v_toolbar","color","_component_v_toolbar_title","_component_v_main","class","_component_v_container","_component_v_card","_component_v_card_text","_hoisted_1","_hoisted_2","_component_v_file_input","_ctx","_component_v_spacer","_component_v_btn","onClick","$options","_hoisted_3","_hoisted_4"],"sourceRoot":"","sources":["/Users/stlp/Desktop/Spring 2023/BIOEN 405/User Interface/MoHSES-Scenario-User-Interface/src/views/PlottingView.vue"],"sourcesContent":["<template>\n    <v-toolbar style=\"color: white\" color=\"#4b0082\">\n      <v-toolbar-title>BioGears Plotting Tool</v-toolbar-title>\n    </v-toolbar>\n    <v-main class=\"bg-grey-lighten-3\">\n      <v-container>\n        <v-card class=\"mt-n12\">\n          <v-card-text>\n            <p style=\"font-size: 20px\">Please upload your .CSV:</p>\n            <br>\n            <v-file-input v-model=\"chosenFile\"></v-file-input>\n            <v-spacer></v-spacer>\n            <v-btn @click=\"importFile\">Import File</v-btn>\n            <v-spacer></v-spacer>\n            <br>\n            <v-btn @click=\"plotChart\">Plot Chart</v-btn>\n        </v-card-text>\n        <div ref=\"chart\"></div>\n        </v-card>\n      </v-container>\n    </v-main>\n  </template>\n  \n<script>\nimport * as d3 from 'd3';\n\nexport default {\n      data: () => ({\n        chosenFile: null,\n        data: null,\n        columnData:[],\n        array2D: null\n      }),\n      methods: {\n        importFile() {\n      \n      if (this.chosenFile === null) {\n        this.data = \"No File Chosen\"\n      } else {\n        var reader = new FileReader();\n        var file = this.chosenFile[0]\n        // Use the javascript reader object to load the contents\n        // of the file in the v-model prop\n        reader.readAsText(file);\n        reader.onload = () => {\n        this.data = reader.result;\n        const rows = this.data.split('\\n')\n        this.array2D = Array.from({ length: rows[0].split(',').length }, () => []);\n        for (let i=0; i<rows.length;i++) {\n            const columns = rows[i].split(',');\n            for (let j =0; j<columns.length;j++) {\n                this.array2D[j].push(columns[j]);\n            }\n        }\n        console.log(this.array2D)\n      }\n    }\n},\n\nplotChart () {\n    // Create 2 datasets\n// set the dimensions and margins of the graph\nvar margin = {top: 10, right: 100, bottom: 30, left: 30},\n    width = 460 - margin.left - margin.right,\n    height = 400 - margin.top - margin.bottom;\n\n// append the svg object to the body of the page\nvar svg = d3.select(\"#my_dataviz\")\n  .append(\"svg\")\n    .attr(\"width\", width + margin.left + margin.right)\n    .attr(\"height\", height + margin.top + margin.bottom)\n  .append(\"g\")\n    .attr(\"transform\",\n          \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n//Read the data\nd3.csv(\"https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/data_connectedscatter.csv\", function(data) {\n\n    // List of groups (here I have one group per column)\n    var allGroup = [\"valueA\", \"valueB\", \"valueC\"]\n\n    // add the options to the button\n    d3.select(\"#selectButton\")\n      .selectAll('myOptions')\n      .data(allGroup)\n      .enter()\n      .append('option')\n      .text(function (d) { return d; }) // text showed in the menu\n      .attr(\"value\", function (d) { return d; }) // corresponding value returned by the button\n\n    // A color scale: one color for each group\n    var myColor = d3.scaleOrdinal()\n      .domain(allGroup)\n      .range(d3.schemeSet2);\n\n    // Add X axis --> it is a date format\n    var x = d3.scaleLinear()\n      .domain([0,10])\n      .range([ 0, width ]);\n    svg.append(\"g\")\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\n      .call(d3.axisBottom(x));\n\n    // Add Y axis\n    var y = d3.scaleLinear()\n      .domain( [0,20])\n      .range([ height, 0 ]);\n    svg.append(\"g\")\n      .call(d3.axisLeft(y));\n\n    // Initialize line with group a\n    var line = svg\n      .append('g')\n      .append(\"path\")\n        .datum(data)\n        .attr(\"d\", d3.line()\n          .x(function(d) { return x(+d.time) })\n          .y(function(d) { return y(+d.valueA) })\n        )\n        .attr(\"stroke\", function(d){ return myColor(\"valueA\") })\n        .style(\"stroke-width\", 4)\n        .style(\"fill\", \"none\")\n\n    // A function that update the chart\n    function update(selectedGroup) {\n\n      // Create new data with the selection?\n      var dataFilter = data.map(function(d){return {time: d.time, value:d[selectedGroup]} })\n\n      // Give these new data to update line\n      line\n          .datum(dataFilter)\n          .transition()\n          .duration(1000)\n          .attr(\"d\", d3.line()\n            .x(function(d) { return x(+d.time) })\n            .y(function(d) { return y(+d.value) })\n          )\n          .attr(\"stroke\", function(d){ return myColor(selectedGroup) })\n    }\n\n    // When the button is changed, run the updateChart function\n    d3.select(\"#selectButton\").on(\"change\", function(d) {\n        // recover the option that has been chosen\n        var selectedOption = d3.select(this).property(\"value\")\n        // run the updateChart function with this selected option\n        update(selectedOption)\n    })\n\n})\n\n\n  }\n\n  }\n,\n\n\n}\n\n</script>\n  "]},"metadata":{},"sourceType":"module","externalDependencies":[]}