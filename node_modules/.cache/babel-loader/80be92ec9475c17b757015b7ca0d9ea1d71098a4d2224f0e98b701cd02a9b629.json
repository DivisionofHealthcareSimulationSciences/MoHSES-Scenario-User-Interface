{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { isArray } from 'vega-util';\nimport { valueExpr, vgField } from './channeldef';\nimport { fieldExpr as timeUnitFieldExpr, normalizeTimeUnit } from './timeunit';\nimport { stringify } from './util';\nimport { isSignalRef } from './vega.schema';\nexport function isSelectionPredicate(predicate) {\n  return predicate?.['param'];\n}\nexport function isFieldEqualPredicate(predicate) {\n  return !!predicate?.field && predicate.equal !== undefined;\n}\nexport function isFieldLTPredicate(predicate) {\n  return !!predicate?.field && predicate.lt !== undefined;\n}\nexport function isFieldLTEPredicate(predicate) {\n  return !!predicate?.field && predicate.lte !== undefined;\n}\nexport function isFieldGTPredicate(predicate) {\n  return !!predicate?.field && predicate.gt !== undefined;\n}\nexport function isFieldGTEPredicate(predicate) {\n  return !!predicate?.field && predicate.gte !== undefined;\n}\nexport function isFieldRangePredicate(predicate) {\n  if (predicate?.field) {\n    if (isArray(predicate.range) && predicate.range.length === 2) {\n      return true;\n    } else if (isSignalRef(predicate.range)) {\n      return true;\n    }\n  }\n  return false;\n}\nexport function isFieldOneOfPredicate(predicate) {\n  return !!predicate?.field && (isArray(predicate.oneOf) || isArray(predicate.in)) // backward compatibility\n  ;\n}\n\nexport function isFieldValidPredicate(predicate) {\n  return !!predicate?.field && predicate.valid !== undefined;\n}\nexport function isFieldPredicate(predicate) {\n  return isFieldOneOfPredicate(predicate) || isFieldEqualPredicate(predicate) || isFieldRangePredicate(predicate) || isFieldLTPredicate(predicate) || isFieldGTPredicate(predicate) || isFieldLTEPredicate(predicate) || isFieldGTEPredicate(predicate);\n}\nfunction predicateValueExpr(v, timeUnit) {\n  return valueExpr(v, {\n    timeUnit,\n    wrapTime: true\n  });\n}\nfunction predicateValuesExpr(vals, timeUnit) {\n  return vals.map(v => predicateValueExpr(v, timeUnit));\n}\n// This method is used by Voyager. Do not change its behavior without changing Voyager.\nexport function fieldFilterExpression(predicate, useInRange = true) {\n  const {\n    field\n  } = predicate;\n  const timeUnit = normalizeTimeUnit(predicate.timeUnit)?.unit;\n  const fieldExpr = timeUnit ?\n  // For timeUnit, cast into integer with time() so we can use ===, inrange, indexOf to compare values directly.\n  // TODO: We calculate timeUnit on the fly here. Consider if we would like to consolidate this with timeUnit pipeline\n  // TODO: support utc\n  `time(${timeUnitFieldExpr(timeUnit, field)})` : vgField(predicate, {\n    expr: 'datum'\n  });\n  if (isFieldEqualPredicate(predicate)) {\n    return `${fieldExpr}===${predicateValueExpr(predicate.equal, timeUnit)}`;\n  } else if (isFieldLTPredicate(predicate)) {\n    const upper = predicate.lt;\n    return `${fieldExpr}<${predicateValueExpr(upper, timeUnit)}`;\n  } else if (isFieldGTPredicate(predicate)) {\n    const lower = predicate.gt;\n    return `${fieldExpr}>${predicateValueExpr(lower, timeUnit)}`;\n  } else if (isFieldLTEPredicate(predicate)) {\n    const upper = predicate.lte;\n    return `${fieldExpr}<=${predicateValueExpr(upper, timeUnit)}`;\n  } else if (isFieldGTEPredicate(predicate)) {\n    const lower = predicate.gte;\n    return `${fieldExpr}>=${predicateValueExpr(lower, timeUnit)}`;\n  } else if (isFieldOneOfPredicate(predicate)) {\n    return `indexof([${predicateValuesExpr(predicate.oneOf, timeUnit).join(',')}], ${fieldExpr}) !== -1`;\n  } else if (isFieldValidPredicate(predicate)) {\n    return fieldValidPredicate(fieldExpr, predicate.valid);\n  } else if (isFieldRangePredicate(predicate)) {\n    const {\n      range\n    } = predicate;\n    const lower = isSignalRef(range) ? {\n      signal: `${range.signal}[0]`\n    } : range[0];\n    const upper = isSignalRef(range) ? {\n      signal: `${range.signal}[1]`\n    } : range[1];\n    if (lower !== null && upper !== null && useInRange) {\n      return 'inrange(' + fieldExpr + ', [' + predicateValueExpr(lower, timeUnit) + ', ' + predicateValueExpr(upper, timeUnit) + '])';\n    }\n    const exprs = [];\n    if (lower !== null) {\n      exprs.push(`${fieldExpr} >= ${predicateValueExpr(lower, timeUnit)}`);\n    }\n    if (upper !== null) {\n      exprs.push(`${fieldExpr} <= ${predicateValueExpr(upper, timeUnit)}`);\n    }\n    return exprs.length > 0 ? exprs.join(' && ') : 'true';\n  }\n  /* istanbul ignore next: it should never reach here */\n  throw new Error(`Invalid field predicate: ${stringify(predicate)}`);\n}\nexport function fieldValidPredicate(fieldExpr, valid = true) {\n  if (valid) {\n    return `isValid(${fieldExpr}) && isFinite(+${fieldExpr})`;\n  } else {\n    return `!isValid(${fieldExpr}) || !isFinite(+${fieldExpr})`;\n  }\n}\nexport function normalizePredicate(f) {\n  if (isFieldPredicate(f) && f.timeUnit) {\n    return {\n      ...f,\n      timeUnit: normalizeTimeUnit(f.timeUnit)?.unit\n    };\n  }\n  return f;\n}","map":{"version":3,"mappings":"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","names":["isArray","valueExpr","vgField","fieldExpr","timeUnitFieldExpr","normalizeTimeUnit","stringify","isSignalRef","isSelectionPredicate","predicate","isFieldEqualPredicate","field","equal","undefined","isFieldLTPredicate","lt","isFieldLTEPredicate","lte","isFieldGTPredicate","gt","isFieldGTEPredicate","gte","isFieldRangePredicate","range","length","isFieldOneOfPredicate","oneOf","in","isFieldValidPredicate","valid","isFieldPredicate","predicateValueExpr","v","timeUnit","wrapTime","predicateValuesExpr","vals","map","fieldFilterExpression","useInRange","unit","expr","upper","lower","join","fieldValidPredicate","signal","exprs","push","Error","normalizePredicate","f"],"sourceRoot":"","sources":["../../src/predicate.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}