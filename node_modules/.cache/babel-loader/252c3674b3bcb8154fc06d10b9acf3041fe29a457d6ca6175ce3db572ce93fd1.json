{"ast":null,"code":"import { geoCentroid as centroid, geoProjection as projection, geoRotation as rotation } from \"d3-geo\";\nimport { abs, acos, asin, atan2, cos, epsilon, floor, pi, radians, sin, sqrt } from \"./math.js\";\nimport { solve2d } from \"./newton.js\";\n\n// Azimuthal distance.\nfunction distance(dPhi, c1, s1, c2, s2, dLambda) {\n  var cosdLambda = cos(dLambda),\n    r;\n  if (abs(dPhi) > 1 || abs(dLambda) > 1) {\n    r = acos(s1 * s2 + c1 * c2 * cosdLambda);\n  } else {\n    var sindPhi = sin(dPhi / 2),\n      sindLambda = sin(dLambda / 2);\n    r = 2 * asin(sqrt(sindPhi * sindPhi + c1 * c2 * sindLambda * sindLambda));\n  }\n  return abs(r) > epsilon ? [r, atan2(c2 * sin(dLambda), c1 * s2 - s1 * c2 * cosdLambda)] : [0, 0];\n}\n\n// Angle opposite a, and contained between sides of lengths b and c.\nfunction angle(b, c, a) {\n  return acos((b * b + c * c - a * a) / (2 * b * c));\n}\n\n// Normalize longitude.\nfunction longitude(lambda) {\n  return lambda - 2 * pi * floor((lambda + pi) / (2 * pi));\n}\nexport function chamberlinRaw(p0, p1, p2) {\n  var points = [[p0[0], p0[1], sin(p0[1]), cos(p0[1])], [p1[0], p1[1], sin(p1[1]), cos(p1[1])], [p2[0], p2[1], sin(p2[1]), cos(p2[1])]];\n  for (var a = points[2], b, i = 0; i < 3; ++i, a = b) {\n    b = points[i];\n    a.v = distance(b[1] - a[1], a[3], a[2], b[3], b[2], b[0] - a[0]);\n    a.point = [0, 0];\n  }\n  var beta0 = angle(points[0].v[0], points[2].v[0], points[1].v[0]),\n    beta1 = angle(points[0].v[0], points[1].v[0], points[2].v[0]),\n    beta2 = pi - beta0;\n  points[2].point[1] = 0;\n  points[0].point[0] = -(points[1].point[0] = points[0].v[0] / 2);\n  var mean = [points[2].point[0] = points[0].point[0] + points[2].v[0] * cos(beta0), 2 * (points[0].point[1] = points[1].point[1] = points[2].v[0] * sin(beta0))];\n  function forward(lambda, phi) {\n    var sinPhi = sin(phi),\n      cosPhi = cos(phi),\n      v = new Array(3),\n      i;\n\n    // Compute distance and azimuth from control points.\n    for (i = 0; i < 3; ++i) {\n      var p = points[i];\n      v[i] = distance(phi - p[1], p[3], p[2], cosPhi, sinPhi, lambda - p[0]);\n      if (!v[i][0]) return p.point;\n      v[i][1] = longitude(v[i][1] - p.v[1]);\n    }\n\n    // Arithmetic mean of interception points.\n    var point = mean.slice();\n    for (i = 0; i < 3; ++i) {\n      var j = i == 2 ? 0 : i + 1;\n      var a = angle(points[i].v[0], v[i][0], v[j][0]);\n      if (v[i][1] < 0) a = -a;\n      if (!i) {\n        point[0] += v[i][0] * cos(a);\n        point[1] -= v[i][0] * sin(a);\n      } else if (i == 1) {\n        a = beta1 - a;\n        point[0] -= v[i][0] * cos(a);\n        point[1] -= v[i][0] * sin(a);\n      } else {\n        a = beta2 - a;\n        point[0] += v[i][0] * cos(a);\n        point[1] += v[i][0] * sin(a);\n      }\n    }\n    point[0] /= 3, point[1] /= 3;\n    return point;\n  }\n  return forward;\n}\nfunction pointRadians(p) {\n  return p[0] *= radians, p[1] *= radians, p;\n}\nexport function chamberlinAfrica() {\n  return chamberlin([0, 22], [45, 22], [22.5, -22]).scale(380).center([22.5, 2]);\n}\nexport default function chamberlin(p0, p1, p2) {\n  // TODO order matters!\n  var c = centroid({\n      type: \"MultiPoint\",\n      coordinates: [p0, p1, p2]\n    }),\n    R = [-c[0], -c[1]],\n    r = rotation(R),\n    f = chamberlinRaw(pointRadians(r(p0)), pointRadians(r(p1)), pointRadians(r(p2)));\n  f.invert = solve2d(f);\n  var p = projection(f).rotate(R),\n    center = p.center;\n  delete p.rotate;\n  p.center = function (_) {\n    return arguments.length ? center(r(_)) : r.invert(center());\n  };\n  return p.clipAngle(90);\n}","map":{"version":3,"names":["geoCentroid","centroid","geoProjection","projection","geoRotation","rotation","abs","acos","asin","atan2","cos","epsilon","floor","pi","radians","sin","sqrt","solve2d","distance","dPhi","c1","s1","c2","s2","dLambda","cosdLambda","r","sindPhi","sindLambda","angle","b","c","a","longitude","lambda","chamberlinRaw","p0","p1","p2","points","i","v","point","beta0","beta1","beta2","mean","forward","phi","sinPhi","cosPhi","Array","p","slice","j","pointRadians","chamberlinAfrica","chamberlin","scale","center","type","coordinates","R","f","invert","rotate","_","arguments","length","clipAngle"],"sources":["C:/Users/sanik/Downloads/capstone/MoHSES-Scenario-User-Interface/node_modules/d3-geo-projection/src/chamberlin.js"],"sourcesContent":["import {geoCentroid as centroid, geoProjection as projection, geoRotation as rotation} from \"d3-geo\";\r\nimport {abs, acos, asin, atan2, cos, epsilon, floor, pi, radians, sin, sqrt} from \"./math.js\";\r\nimport {solve2d} from \"./newton.js\";\r\n\r\n// Azimuthal distance.\r\nfunction distance(dPhi, c1, s1, c2, s2, dLambda) {\r\n  var cosdLambda = cos(dLambda), r;\r\n  if (abs(dPhi) > 1 || abs(dLambda) > 1) {\r\n    r = acos(s1 * s2 + c1 * c2 * cosdLambda);\r\n  } else {\r\n    var sindPhi = sin(dPhi / 2), sindLambda = sin(dLambda / 2);\r\n    r = 2 * asin(sqrt(sindPhi * sindPhi + c1 * c2 * sindLambda * sindLambda));\r\n  }\r\n  return abs(r) > epsilon ? [r, atan2(c2 * sin(dLambda), c1 * s2 - s1 * c2 * cosdLambda)] : [0, 0];\r\n}\r\n\r\n// Angle opposite a, and contained between sides of lengths b and c.\r\nfunction angle(b, c, a) {\r\n  return acos((b * b + c * c - a * a) / (2 * b * c));\r\n}\r\n\r\n// Normalize longitude.\r\nfunction longitude(lambda) {\r\n  return lambda - 2 * pi * floor((lambda + pi) / (2 * pi));\r\n}\r\n\r\nexport function chamberlinRaw(p0, p1, p2) {\r\n  var points = [\r\n    [p0[0], p0[1], sin(p0[1]), cos(p0[1])],\r\n    [p1[0], p1[1], sin(p1[1]), cos(p1[1])],\r\n    [p2[0], p2[1], sin(p2[1]), cos(p2[1])]\r\n  ];\r\n\r\n  for (var a = points[2], b, i = 0; i < 3; ++i, a = b) {\r\n    b = points[i];\r\n    a.v = distance(b[1] - a[1], a[3], a[2], b[3], b[2], b[0] - a[0]);\r\n    a.point = [0, 0];\r\n  }\r\n\r\n  var beta0 = angle(points[0].v[0], points[2].v[0], points[1].v[0]),\r\n      beta1 = angle(points[0].v[0], points[1].v[0], points[2].v[0]),\r\n      beta2 = pi - beta0;\r\n\r\n  points[2].point[1] = 0;\r\n  points[0].point[0] = -(points[1].point[0] = points[0].v[0] / 2);\r\n\r\n  var mean = [\r\n    points[2].point[0] = points[0].point[0] + points[2].v[0] * cos(beta0),\r\n    2 * (points[0].point[1] = points[1].point[1] = points[2].v[0] * sin(beta0))\r\n  ];\r\n\r\n  function forward(lambda, phi) {\r\n    var sinPhi = sin(phi),\r\n        cosPhi = cos(phi),\r\n        v = new Array(3), i;\r\n\r\n    // Compute distance and azimuth from control points.\r\n    for (i = 0; i < 3; ++i) {\r\n      var p = points[i];\r\n      v[i] = distance(phi - p[1], p[3], p[2], cosPhi, sinPhi, lambda - p[0]);\r\n      if (!v[i][0]) return p.point;\r\n      v[i][1] = longitude(v[i][1] - p.v[1]);\r\n    }\r\n\r\n    // Arithmetic mean of interception points.\r\n    var point = mean.slice();\r\n    for (i = 0; i < 3; ++i) {\r\n      var j = i == 2 ? 0 : i + 1;\r\n      var a = angle(points[i].v[0], v[i][0], v[j][0]);\r\n      if (v[i][1] < 0) a = -a;\r\n\r\n      if (!i) {\r\n        point[0] += v[i][0] * cos(a);\r\n        point[1] -= v[i][0] * sin(a);\r\n      } else if (i == 1) {\r\n        a = beta1 - a;\r\n        point[0] -= v[i][0] * cos(a);\r\n        point[1] -= v[i][0] * sin(a);\r\n      } else {\r\n        a = beta2 - a;\r\n        point[0] += v[i][0] * cos(a);\r\n        point[1] += v[i][0] * sin(a);\r\n      }\r\n    }\r\n\r\n    point[0] /= 3, point[1] /= 3;\r\n    return point;\r\n  }\r\n\r\n  return forward;\r\n}\r\n\r\nfunction pointRadians(p) {\r\n  return p[0] *= radians, p[1] *= radians, p;\r\n}\r\n\r\nexport function chamberlinAfrica() {\r\n  return chamberlin([0, 22], [45, 22], [22.5, -22])\r\n      .scale(380)\r\n      .center([22.5, 2]);\r\n}\r\n\r\nexport default function chamberlin(p0, p1, p2) { // TODO order matters!\r\n  var c = centroid({type: \"MultiPoint\", coordinates: [p0, p1, p2]}),\r\n      R = [-c[0], -c[1]],\r\n      r = rotation(R),\r\n      f = chamberlinRaw(pointRadians(r(p0)), pointRadians(r(p1)), pointRadians(r(p2)));\r\n  f.invert = solve2d(f);\r\n  var p = projection(f).rotate(R),\r\n      center = p.center;\r\n\r\n  delete p.rotate;\r\n\r\n  p.center = function(_) {\r\n    return arguments.length ? center(r(_)) : r.invert(center());\r\n  };\r\n\r\n  return p\r\n      .clipAngle(90);\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}