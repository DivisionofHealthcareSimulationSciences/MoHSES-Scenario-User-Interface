{"ast":null,"code":"import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, Fragment as _Fragment, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"p\", {\n  style: {\n    \"font-size\": \"20px\"\n  }\n}, \"Please upload your .CSV:\", -1 /* HOISTED */);\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\nconst _hoisted_5 = {\n  ref: \"chart\"\n};\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"br\", null, null, -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_toolbar_title = _resolveComponent(\"v-toolbar-title\");\n  const _component_v_toolbar = _resolveComponent(\"v-toolbar\");\n  const _component_v_file_input = _resolveComponent(\"v-file-input\");\n  const _component_v_spacer = _resolveComponent(\"v-spacer\");\n  const _component_v_btn = _resolveComponent(\"v-btn\");\n  const _component_v_select = _resolveComponent(\"v-select\");\n  const _component_v_col = _resolveComponent(\"v-col\");\n  const _component_v_row = _resolveComponent(\"v-row\");\n  const _component_v_card_text = _resolveComponent(\"v-card-text\");\n  const _component_v_card = _resolveComponent(\"v-card\");\n  const _component_v_container = _resolveComponent(\"v-container\");\n  const _component_v_main = _resolveComponent(\"v-main\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_v_toolbar, {\n    style: {\n      \"color\": \"white\"\n    },\n    color: \"#4b0082\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_toolbar_title, null, {\n      default: _withCtx(() => [_createTextVNode(\"BioGears Plotting Tool\")]),\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  }), _createVNode(_component_v_main, {\n    class: \"bg-grey-lighten-3\"\n  }, {\n    default: _withCtx(() => [_createVNode(_component_v_container, null, {\n      default: _withCtx(() => [_createVNode(_component_v_card, {\n        class: \"mt-n12\"\n      }, {\n        default: _withCtx(() => [_createVNode(_component_v_card_text, null, {\n          default: _withCtx(() => [_hoisted_1, _hoisted_2, _createVNode(_component_v_file_input, {\n            modelValue: _ctx.chosenFile,\n            \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => _ctx.chosenFile = $event)\n          }, null, 8 /* PROPS */, [\"modelValue\"]), _createVNode(_component_v_spacer), _createVNode(_component_v_btn, {\n            onClick: $options.importFile\n          }, {\n            default: _withCtx(() => [_createTextVNode(\"Import File\")]),\n            _: 1 /* STABLE */\n          }, 8 /* PROPS */, [\"onClick\"]), _hoisted_3, _hoisted_4, _ctx.array2D ? (_openBlock(), _createBlock(_component_v_row, {\n            key: 0\n          }, {\n            default: _withCtx(() => [_createVNode(_component_v_col, {\n              cols: \"12\"\n            }, {\n              default: _withCtx(() => [_createVNode(_component_v_select, {\n                modelValue: _ctx.selectPlot,\n                \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.selectPlot = $event),\n                id: \"selectButton\",\n                items: _ctx.allGroup.slice(1)\n              }, null, 8 /* PROPS */, [\"modelValue\", \"items\"])]),\n              _: 1 /* STABLE */\n            }), _ctx.selectPlot ? (_openBlock(), _createBlock(_component_v_col, {\n              key: 0,\n              cols: \"12\"\n            }, {\n              default: _withCtx(() => [_createVNode(_component_v_btn, {\n                onClick: _cache[2] || (_cache[2] = $event => $options.plotChart(_ctx.array2D[_ctx.allGroup.indexOf(_ctx.selectPlot)]))\n              }, {\n                default: _withCtx(() => [_createTextVNode(\"Plot Chart\")]),\n                _: 1 /* STABLE */\n              })]),\n\n              _: 1 /* STABLE */\n            })) : _createCommentVNode(\"v-if\", true)]),\n            _: 1 /* STABLE */\n          })) : _createCommentVNode(\"v-if\", true)]),\n          _: 1 /* STABLE */\n        }), _createVNode(_component_v_row, {\n          justify: \"center\"\n        }, {\n          default: _withCtx(() => [_createElementVNode(\"div\", _hoisted_5, null, 512 /* NEED_PATCH */), _hoisted_6]),\n          _: 1 /* STABLE */\n        })]),\n\n        _: 1 /* STABLE */\n      })]),\n\n      _: 1 /* STABLE */\n    })]),\n\n    _: 1 /* STABLE */\n  })], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"mappings":";gCAQYA,oBAAuD;EAApDC,KAAuB,EAAvB;IAAA;EAAA;AAAuB,GAAC,0BAAwB;gCACnDD,oBAAI;gCAIJA,oBAAI;gCACJA,oBAAI;;EAWCE,GAAG,EAAC;AAAO;gCAChBF,oBAAI;;;;;;;;;;;;;;;6DAzBZG,aAEYC;IAFDH,KAAoB,EAApB;MAAA;IAAA,CAAoB;IAACI,KAAK,EAAC;;sBACpC,MAAyD,CAAzDF,aAAyDG;wBAAxC,MAAsB,kBAAtB,wBAAsB;;;;;MAEzCH,aA0BSI;IA1BDC,KAAK,EAAC;EAAmB;sBAC/B,MAwBc,CAxBdL,aAwBcM;wBAvBZ,MAsBS,CAtBTN,aAsBSO;QAtBDF,KAAK,EAAC;MAAQ;0BACpB,MAgBc,CAhBdL,aAgBcQ;4BAfZ,MAAuD,CAAvDC,UAAuD,EACvDC,UAAI,EACJV,aAAkDW;wBAA3BC,eAAU;uEAAVA,eAAU;mDACjCZ,aAAqBa,sBACrBb,aAA8Cc;YAAtCC,OAAK,EAAEC;UAAU;8BAAE,MAAW,kBAAX,aAAW;;0CACtCC,UAAI,EACJC,UAAI,EACSN,YAAO,kBAApBO,aAOQC;YAAAC;UAAA;8BANN,MAEQ,CAFRrB,aAEQsB;cAFDC,IAAI,EAAC;YAAI;gCACd,MAAuF,CAAvFvB,aAAuFwB;4BAApEZ,eAAU;2EAAVA,eAAU;gBAAEa,EAAE,EAAC,cAAc;gBAAEC,KAAK,EAAEd,aAAQ,CAACe,KAAK;;;gBAE5Df,eAAU,kBAAvBO,aAEQG;;cAFiBC,IAAI,EAAC;;gCAC5B,MAAmF,CAAnFvB,aAAmFc;gBAA3EC,OAAK,sCAAEC,kBAAS,CAACJ,YAAO,CAACA,aAAQ,CAACgB,OAAO,CAAChB,eAAU;;kCAAK,MAAU,kBAAV,YAAU;;;;;;;;;YAIjFZ,aAGQoB;UAHDS,OAAO,EAAC;QAAQ;4BACrB,MAAuB,CAAvBhC,oBAAuB,OAAvBiC,UAAuB,+BACvBC,UAAI","names":["_createElementVNode","style","ref","_createVNode","_component_v_toolbar","color","_component_v_toolbar_title","_component_v_main","class","_component_v_container","_component_v_card","_component_v_card_text","_hoisted_1","_hoisted_2","_component_v_file_input","_ctx","_component_v_spacer","_component_v_btn","onClick","$options","_hoisted_3","_hoisted_4","_createBlock","_component_v_row","key","_component_v_col","cols","_component_v_select","id","items","slice","indexOf","justify","_hoisted_5","_hoisted_6"],"sourceRoot":"","sources":["/Users/stlp/Desktop/Spring 2023/BIOEN 405/User Interface/MoHSES-Scenario-User-Interface/src/views/PlottingView.vue"],"sourcesContent":["<template>\n    <v-toolbar style=\"color: white\" color=\"#4b0082\">\n      <v-toolbar-title>BioGears Plotting Tool</v-toolbar-title>\n    </v-toolbar>\n    <v-main class=\"bg-grey-lighten-3\">\n      <v-container>\n        <v-card class=\"mt-n12\">\n          <v-card-text>\n            <p style=\"font-size: 20px\">Please upload your .CSV:</p>\n            <br>\n            <v-file-input v-model=\"chosenFile\"></v-file-input>\n            <v-spacer></v-spacer>\n            <v-btn @click=\"importFile\">Import File</v-btn>\n            <br>\n            <br>\n            <v-row v-if=\"array2D\">\n              <v-col cols=\"12\">\n                <v-select v-model=\"selectPlot\" id=\"selectButton\" :items=\"allGroup.slice(1)\"></v-select>\n              </v-col>\n              <v-col v-if=\"selectPlot\" cols=\"12\">\n                <v-btn @click=\"plotChart(array2D[allGroup.indexOf(selectPlot)])\">Plot Chart</v-btn>\n              </v-col>\n            </v-row>\n          </v-card-text>\n          <v-row justify=\"center\">\n            <div ref=\"chart\"></div>\n            <br>\n          </v-row>\n        </v-card>\n      </v-container>\n    </v-main>\n  </template>\n  <script>\n    import * as d3 from 'd3';\n    export default {\n      data: () => ({\n        chosenFile: null,\n        data: null,\n        columnData: [],\n        array2D: null,\n        allGroup: [],\n        selectPlot: null\n      }),\n      methods: {\n        importFile() {\n          if (this.chosenFile === null) {\n            this.data = \"No File Chosen\"\n          } else {\n            var reader = new FileReader();\n            var file = this.chosenFile[0]\n            // Use the javascript reader object to load the contents\n            // of the file in the v-model prop\n            reader.readAsText(file);\n            reader.onload = () => {\n              this.data = reader.result;\n              const rows = this.data.split('\\n')\n              this.array2D = Array.from({\n                length: rows[0].split(',').length\n              }, () => []);\n              for (let i = 0; i < rows.length; i++) {\n                const columns = rows[i].split(',');\n                for (let j = 0; j < columns.length; j++) {\n                  this.array2D[j].push(columns[j]);\n                }\n              }\n              for (let i = 0; i < this.array2D.length; i++) {\n                this.allGroup.push(this.array2D[i][0])\n                this.array2D[i] = this.array2D[i].slice(1).map(str => parseFloat(str));\n              }\n              console.log(this.allGroup)\n              console.log(this.array2D)\n              console.log(this.array2D)\n            }\n          }\n        },\n        plotChart(data) {\n          const margin = {\n            top: 50,\n            right: 50,\n            bottom: 50,\n            left: 0\n          };\n          const width = 800 - margin.left - margin.right;\n          const height = 500 - margin.top - margin.bottom;\n          console.log(data)\n          d3.select(this.$refs.chart).select('svg').remove();\n          // Define the scales for the X and Y axes\n          const xScale = d3.scaleLinear().domain([d3.min(this.array2D[0]), d3.max(this.array2D[0])]).range([0, width]);\n          const yScale = d3.scaleLinear().domain([0, d3.max(data)]).range([height, 0]);\n          // Create the SVG element\n          const svg = d3.select(this.$refs.chart).append('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', `translate(${margin.left}, ${margin.top})`);\n          // Define the line function\n          const line = d3.line().x((d, i) => xScale(this.array2D[0][i])).y((d, i) => yScale(data[i]));\n          // Add the title\n          let title = this.selectPlot + \" versus Time (s)\"\n          svg.append('text').attr('x', width / 2).attr('y', 0 - margin.top / 2).attr('text-anchor', 'middle').attr('font-size', '24px').text(title);\n          // Create the line path\n          svg.append('path').datum(this.array2D[0]).attr('d', line).attr('fill', 'none').attr('stroke', 'steelblue').attr('stroke-width', 2);\n          // Add the X axis label\n          svg.append('text').attr('transform', `translate(${width / 2}, ${height + margin.bottom / 1.3})`).attr('text-anchor', 'middle').attr('font-size', '16px').text('Time (s)');\n          // Add the Y axis label\n          svg.append('text').attr('transform', 'rotate(-90)').attr('x', 0 - height / 2).attr('y', 0 - margin.left).attr('dy', '1em').attr('text-anchor', 'middle').attr('font-size', '16px').text(this.selectPlot);\n          // Create the X and Y axes\n          const xAxis = d3.axisBottom(xScale);\n          const yAxis = d3.axisLeft(yScale);\n          svg.append('g').attr('transform', `translate(0, ${height})`).call(xAxis);\n          svg.append('g').call(yAxis);\n          // Add legend\n          svg.append('rect').attr('x', width - 200).attr('y', 50).attr('width', 10).attr('height', 10).style('fill', 'steelblue');\n          svg.append('text').attr('x', width - 185).attr('y', 60).text(this.selectPlot);\n        }\n      },\n    }\n  </script>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}