{"ast":null,"code":"import { isObject } from 'vega-util';\nimport { isBinned } from '../bin';\nimport { getMainRangeChannel, SECONDARY_RANGE_CHANNEL } from '../channel';\nimport { isDatumDef, isFieldDef } from '../channeldef';\nimport * as log from '../log';\nimport { isMarkDef } from '../mark';\nimport { isUnitSpec } from '../spec/unit';\nexport class RuleForRangedLineNormalizer {\n  constructor() {\n    this.name = 'RuleForRangedLine';\n  }\n  hasMatchingType(spec) {\n    if (isUnitSpec(spec)) {\n      const {\n        encoding,\n        mark\n      } = spec;\n      if (mark === 'line' || isMarkDef(mark) && mark.type === 'line') {\n        for (const channel of SECONDARY_RANGE_CHANNEL) {\n          const mainChannel = getMainRangeChannel(channel);\n          const mainChannelDef = encoding[mainChannel];\n          if (encoding[channel]) {\n            if (isFieldDef(mainChannelDef) && !isBinned(mainChannelDef.bin) || isDatumDef(mainChannelDef)) {\n              return true;\n            }\n          }\n        }\n      }\n    }\n    return false;\n  }\n  run(spec, params, normalize) {\n    const {\n      encoding,\n      mark\n    } = spec;\n    log.warn(log.message.lineWithRange(!!encoding.x2, !!encoding.y2));\n    return normalize({\n      ...spec,\n      mark: isObject(mark) ? {\n        ...mark,\n        type: 'rule'\n      } : 'rule'\n    }, params);\n  }\n}","map":{"version":3,"mappings":"AAAA,SAAQA,QAAQ,QAAO,WAAW;AAClC,SAAQC,QAAQ,QAAO,QAAQ;AAC/B,SAAQC,mBAAmB,EAAEC,uBAAuB,QAAO,YAAY;AACvE,SAAeC,UAAU,EAAEC,UAAU,QAAO,eAAe;AAE3D,OAAO,KAAKC,GAAG,MAAM,QAAQ;AAC7B,SAAQC,SAAS,QAAO,SAAS;AAEjC,SAAyBC,UAAU,QAAO,cAAc;AAaxD,OAAM,MAAOC,2BAA2B;EAAxCC;IACS,SAAI,GAAG,mBAAmB;EAiCnC;EA/BSC,eAAe,CAACC,IAAqC;IAC1D,IAAIJ,UAAU,CAACI,IAAI,CAAC,EAAE;MACpB,MAAM;QAACC,QAAQ;QAAEC;MAAI,CAAC,GAAGF,IAAI;MAC7B,IAAIE,IAAI,KAAK,MAAM,IAAKP,SAAS,CAACO,IAAI,CAAC,IAAIA,IAAI,CAACC,IAAI,KAAK,MAAO,EAAE;QAChE,KAAK,MAAMC,OAAO,IAAIb,uBAAuB,EAAE;UAC7C,MAAMc,WAAW,GAAGf,mBAAmB,CAACc,OAAO,CAAC;UAChD,MAAME,cAAc,GAAGL,QAAQ,CAACI,WAAW,CAAC;UAE5C,IAAIJ,QAAQ,CAACG,OAAO,CAAC,EAAE;YACrB,IAAKX,UAAU,CAACa,cAAc,CAAC,IAAI,CAACjB,QAAQ,CAACiB,cAAc,CAACC,GAAG,CAAC,IAAKf,UAAU,CAACc,cAAc,CAAC,EAAE;cAC/F,OAAO,IAAI;;;;;;IAMrB,OAAO,KAAK;EACd;EAEOE,GAAG,CAACR,IAAoB,EAAES,MAAwB,EAAEC,SAA+B;IACxF,MAAM;MAACT,QAAQ;MAAEC;IAAI,CAAC,GAAGF,IAAI;IAC7BN,GAAG,CAACiB,IAAI,CAACjB,GAAG,CAACkB,OAAO,CAACC,aAAa,CAAC,CAAC,CAACZ,QAAQ,CAACa,EAAE,EAAE,CAAC,CAACb,QAAQ,CAACc,EAAE,CAAC,CAAC;IAEjE,OAAOL,SAAS,CACd;MACE,GAAGV,IAAI;MACPE,IAAI,EAAEd,QAAQ,CAACc,IAAI,CAAC,GAAG;QAAC,GAAGA,IAAI;QAAEC,IAAI,EAAE;MAAM,CAAC,GAAG;KAClD,EACDM,MAAM,CACP;EACH","names":["isObject","isBinned","getMainRangeChannel","SECONDARY_RANGE_CHANNEL","isDatumDef","isFieldDef","log","isMarkDef","isUnitSpec","RuleForRangedLineNormalizer","constructor","hasMatchingType","spec","encoding","mark","type","channel","mainChannel","mainChannelDef","bin","run","params","normalize","warn","message","lineWithRange","x2","y2"],"sourceRoot":"","sources":["../../../src/normalize/ruleforrangedline.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module","externalDependencies":[]}